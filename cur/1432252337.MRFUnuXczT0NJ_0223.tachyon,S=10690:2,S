From cypherpunks-bounces@cpunks.org  Wed Nov 13 09:53:38 2013
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id rADEqau0011662;
	Wed, 13 Nov 2013 09:52:42 -0500
Authentication-Results: antiproton.jfet.org; dkim=pass
	reason="2048-bit key; insecure key"
	header.d=gmail.com header.i=@gmail.com header.b=FVwpIqKw;
	dkim-adsp=pass; dkim-atps=neutral
Received: from mail-lb0-f170.google.com (mail-lb0-f170.google.com
 [209.85.217.170])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id rADEqWn5011658
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Wed, 13 Nov 2013 09:52:34 -0500
Received: by mail-lb0-f170.google.com with SMTP id z5so429995lbh.15
 for <cypherpunks@cpunks.org>; Wed, 13 Nov 2013 06:52:26 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=message-id:date:from:user-agent:mime-version:to:subject:references
 :in-reply-to:openpgp:content-type;
 bh=3BzY+ZBrO65GXkYANTd8Inf5upWgIwEF1Q+i9pbkRPo=;
 b=FVwpIqKwOVAMx+4hs5OFIxRcXZl0RqQzNDT7Rc4e/rvJfzkoe2pT3oJIdm7uyTAoZ6
 p2prNTHJyflIAZP/EIszvw7kb+HN2YD8eIJaPK++Z3pIKBrNCDljcpTL45s4SEa1f37d
 ZTxMNfeCDX1FziG7toVs/iHL2H8i347fT76/6a9ugdrRsj5NhUd3bBHqJb/uMfBCrZy9
 oxjsLZ8C0p8dRlinjGUfOVYj72PaFkUHltZbXe24h4LZzbkE+kETa1+Ljqm/hiymYhsG
 QREcEuMDsNwp7MPRU4ZOWwOrslTDHtachkVzV4xPvEpwLcp7rk+9G5n8Uq/38z/dih0h
 YsIg==
X-Received: by 10.112.77.169 with SMTP id t9mr31113831lbw.3.1384354345810;
 Wed, 13 Nov 2013 06:52:25 -0800 (PST)
Received: from Gearder.local ([92.255.5.146])
 by mx.google.com with ESMTPSA id ed8sm24367603lbc.11.2013.11.13.06.52.23
 for <cypherpunks@cpunks.org>
 (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
 Wed, 13 Nov 2013 06:52:24 -0800 (PST)
Message-ID: <5283921D.3020104@gmail.com>
Date: Wed, 13 Nov 2013 18:52:13 +0400
From: Alexey Zakhlestin <indeyets@gmail.com>
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9;
 rv:24.0) Gecko/20100101 Thunderbird/24.1.0
MIME-Version: 1.0
To: cypherpunks@cpunks.org
Subject: Re: The second operating system hiding in every mobile phone
References: <20131113085409.GO5661@leitl.org>
In-Reply-To: <20131113085409.GO5661@leitl.org>
X-Enigmail-Version: 1.6
OpenPGP: id=1D219F11
Content-Type: multipart/signed; micalg=pgp-sha512;
 protocol="application/pgp-signature";
 boundary="CNdOJaX7XmCW0tNXvwmv2VP1iluhUeMWn"
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 7524
Lines: 168

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--CNdOJaX7XmCW0tNXvwmv2VP1iluhUeMWn
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Reminded me of a good old article=E2=80=A6

http://blog.mecheye.net/2012/12/bytecode/

Bytecode
Posted on December 9, 2012=09

What is the most commonly used bytecode language in the world? Java
(JVM Bytecode)? .NET (CLI)? Flash (AVM1/AVM2)? Nope. There=E2=80=99s a fe=
w that
you use every day, simply by turning on your computer, or tablet, or
even phone. You don=E2=80=99t even have to start an application or visit =
a
webpage.

ACPI

The most obvious is the large, gargantuan specification known as
=E2=80=9CACPI=E2=80=9D. The =E2=80=9CAdvanced Configuration and Power Int=
erface=E2=80=9D specification
lives up to its name, with the most recent specification being a
mammoth document that weighs in at almost 1000 pages. And yes,
operating systems are expected to implement this. The entire thing. The
bytecode part is hidden deep, but it=E2=80=99s seen in chapter 20, under =
=E2=80=9CACPI
Machine Language=E2=80=9D, describing a semi-register VM with all the usu=
als:
Add, Subtract, Multiply, Divide, standard inequalities and equalities,
but then throws in other fun things like ToHexString and Mid
(substring). Look even further and you=E2=80=99ll see a full object model=
,
system properties, as well as an asynchronous signal mechanism so that
devices are notified about when those system properties change.

Most devices, of course, have a requirement of nothing less than a full
implementation of ACPI, so of course all this code is implemented in
your kernel, running at early boot. It parallels the complexity of a
full JavaScript environment with its type system and system bindings,
with the program code supplied directly over the wire from any device
you plug in. Because the specification is so complex, an OS-independent
reference implementation was created by Intel, and this is the
implementation that=E2=80=99s used in the Linux kernel, the BSDs (includi=
ng Mac
OS X), and the fun toy ReactOS, HaikuOS kernels. I don=E2=80=99t know if =
it=E2=80=99s
used by Windows or not. Since the specification=E2=80=99s got Microsoft=E2=
=80=99s name
on it, I assume their implementation was created long before ACPICA.

Fonts

After that, want to have a graphical boot loader? Simply rendering an
OpenType font (well, only OpenType fonts with CFF glyphs, but the
complexities of the OpenType font format is a subject for another day)
requires parsing the Type 2 Glyph Format, which indeed involves a
custom bytecode format to establish glyphs. This one=E2=80=99s even more
interesting: it=E2=80=99s a real stack-based interpreter, and it even has=
 a
=E2=80=9Crandom=E2=80=9D opcode to make random glyphs at runtime. I can=E2=
=80=99t imagine this
ever be useful, but it=E2=80=99s there, and it=E2=80=99s implemented by F=
reeType, so I
can only assume it=E2=80=99s used by some fonts from in the real world. T=
his
bytecode interpreter also contained at one time a stack overflow
vulnerability which was what jailbroke the iPhone in JailbreakMe.com
v2.0, with the OTF file being loaded by Apple=E2=80=99s custom PDF viewer=
=2E

This glyph language is based on and is a stripped down version of
PostScript. Actual PostScript involves a full turing-complete
register/stack-based hybrid virtual machine based on Forth. The
drawbacks of this system (looping forever, interpreting the entire
script to draw a specific page because of complex state) were the major
motivations for the PDF format =E2=80=94 while based on PostScript, it do=
esn=E2=80=99t
have much shared document state, and doesn=E2=80=99t allow any arbitrary =
flow
control operations. In this model, someone (even an automated program)
could easily verify that a graphic was encapsulated, not doing
different things depending on input, and that it terminated at some
point.

And, of course, since fonts are complicated, and OpenType is
complicated, OpenType also includes all of TrueType, which includes a
bytecode-based hinting model to ensure that your fonts look correct at
all resolutions. I won=E2=80=99t ramble on about it, but here=E2=80=99s t=
he FreeType
implementation. I don=E2=80=99t know of anything interesting happening to=
 this.
Seems there was a CVE for it at one time.

To get this article to display on screen, it=E2=80=99s very likely that
thousands of these tiny little microprograms ran, once for each glyph
shape in each font.

Packet filtering

Further on, if you want to capture a network packet with tcpdump or
libpcap (or one of its users like Wireshark), it=E2=80=99s being filtered=

through the Berkeley Packet Filter, a custom register-based bytecode.
The performance impact of this at one time was too large for people
debugging network issues, so a simple JIT compiler was put into the
kernel, under an experimental sysctl flag.

As a piece of historical interest, an earlier version of the BPF code
was part of the code claimed to be infringing part of the SCO lawsuits
(page 15), but was actually part of BSD4.3 code that was copied to the
Linux kernel. The original BSD code was eventually replaced with the
current architecture, known as the Linux Socket Filter, in Linux 2.2
(which I can=E2=80=99t easily link to, as there=E2=80=99s no public repos=
itory of the
Linux kernel code with pre-git history, as far as I know).

What about it?

The popularity of bytecode as a general and flexible solution to
problems is alluring, but it=E2=80=99s not without its complexities and f=
aults,
with such major security implications (an entire iPhone jailbreak from
incorrect stack overflow checking!) and insane implementation
requirements (so much that we only have one major implementation of
ACPI used across all OSes that we can check).

The four examples also bring out something interesting: the wildly
different approaches that can be taken to a bytecode language. In the
case of ACPI, it=E2=80=99s an interesting take on what I can only imagine=
 is
scope creep on an originally declarative table specification, bringing
it to the mess today. The Type 1 Glyph and TrueType Hinting languages
are basic stack-based interpreters, showing their PostScript heritage.
And BPF is a register-based interpreter, which ends up with a
relatively odd register-based language that can really only do simple
operations.

Note, though, that all of these implementations above have had security
issues in their implementations, with numerous CVEs for each one,
because bytecode interpreter implementations are hard to get right. So,
to other hackers: do you know of any other low-level, esoteric custom
bytecode specifications like these? And to spec writers: did you really
need that flexibility?



--CNdOJaX7XmCW0tNXvwmv2VP1iluhUeMWn
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Comment: GPGTools - http://gpgtools.org

iQEcBAEBCgAGBQJSg5ImAAoJEMkJcRxZdR27nJsH/1L28ueArD+Q0dIuEfArfRf2
v/aea9cukbPYsCv+NapZzGutF14GOtTet62/B0sP8RKAHWtrI5+g9v/sdUfcMbmV
xavL2Pj1wZfrBwbzdsfuPkcBmi0sowxjhId23GXW0gHifi0Lfaxp7Eae5bwny2cl
WpxxjQo27wKcEG+Wbq59zTTk3J+vtVgOSSBShDOrL88rKqOi+qJQQew5Wp6NdkC1
il2Rxvje7D82IXJMv3KuhKsU6eV2jxj0vbXdtFmnwIQYveBz6aSNoCzYYf+1L3LN
geSJ0h9l3PwRQvclFqExyoBfhWJItMYQqFlfv1SAdaYjLlfyEupaXSsMq41bq1A=
=3Evg
-----END PGP SIGNATURE-----

--CNdOJaX7XmCW0tNXvwmv2VP1iluhUeMWn--

