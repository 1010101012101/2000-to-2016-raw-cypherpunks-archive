From owner-cypherpunks@lne.com  Wed Nov  5 22:13:07 2003
Return-Path: <owner-cypherpunks@lne.com>
Received: from slack.lne.com (gw.lne.com [209.157.136.81])
	by positron.jfet.org (8.11.6p3/8.11.6-03-31-03) with ESMTP id hA63D5Y03818
	for <rsw@jfet.org>; Wed, 5 Nov 2003 22:13:06 -0500
Received: from slack.lne.com (slack.lne.com [127.0.0.1])
	by slack.lne.com (8.12.10/8.12.10) with ESMTP id hA62x4D2002724
	(version=TLSv1/SSLv3 cipher=EDH-DSS-DES-CBC3-SHA bits=168 verify=NO)
	for <cypherpunks-goingout345@slack.lne.com>; Wed, 5 Nov 2003 18:59:04 -0800
Received: (from majordom@localhost)
	by slack.lne.com (8.12.10/8.12.10/Submit) id hA62x491002723
	for cypherpunks-goingout345; Wed, 5 Nov 2003 18:59:04 -0800
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
From: "James A. Donald" <jamesd@echeque.com>
To: cypherpunks@lne.com
Date: Wed, 5 Nov 2003 18:58:58 -0800
Subject: Deniable data storage
Message-ID: <3FA94872.14740.DEE36E@localhost>
X-mailer: Pegasus Mail for Windows (v4.01)
Sender: owner-cypherpunks@lne.com
Precedence: bulk
X-Loop: cypherpunks@lne.com
Status: O
Content-Length: 743
Lines: 19

    --
 I want fully deniable information storage -- information 
 theoretic deniable, not merely steganographic deniable, for 
 stenography can never be wholly secure.

So I would have a fixed sized block of data containing a 
variable number of smaller secret chunks of data.  A random key 
would extract a random length of gibberish, a valid key would 
extract a stream of valid data, and revealing one secret key to 
the adversary would not give the adversary any evidene that 
more secrety keys were present or absent.

Any good known algorithms for this? 

    --digsig
         James A. Donald
     6YeGpsZR+nOTh/cGwvITnSR3TdzclVpR0+pr3YYQdkG
     E/45zLbSQGo9twu/KUBNIOlEXbRyhzQ7Y3BaLVsF
     41igtTR/jdGIfGHEe9yPuW0cL6FbO81L4da208BC1

