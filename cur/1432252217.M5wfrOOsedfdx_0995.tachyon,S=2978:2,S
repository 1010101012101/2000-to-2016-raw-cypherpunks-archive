From owner-cypherpunks@al-qaeda.net  Tue Jan 26 14:50:46 2010
Return-Path: <owner-cypherpunks@al-qaeda.net>
Received: from proton.jfet.org (majordomo@localhost [127.0.0.1])
	by proton.jfet.org (8.14.1/8.14.1/Debian-9) with ESMTP id o0QJntcX009710
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <cypherpunks-outgoing@proton.jfet.org>; Tue, 26 Jan 2010 14:49:55 -0500
Received: (from majordomo@localhost)
	by proton.jfet.org (8.14.1/8.14.1/Submit) id o0QJntll009709
	for cypherpunks-outgoing; Tue, 26 Jan 2010 14:49:55 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoo.com;
  s=s1024; t=1264535388;
  bh=52lXznh1B+yWTHZbd5BRhwyfSzsYvzObu6jMSC+mnLo=;
  h=Message-ID:X-YMail-OSG:Received:X-Mailer:Date:From:Subject:To:MIME-Version:Content-Type;
  b=4KaLOBkOxt7LedBlI0w1SxqcmI/Xq9q/T3MCkkoPnPL10hyQCwqghMUm9yN6HkTtAB9cl+tmtJ2vW/zbjoNRqXqnb1kVbuOUBY9I9bDDVGpuUSmQx0iDlYTqkTVTUllVIBc8y+x6rD4dytX5aWuKj1IDBLV0JGaCQhvVCeJW7T8=
Message-ID: <279930.78536.qm@web33307.mail.mud.yahoo.com>
X-YMail-OSG: DWJbnd0VM1k9iK1PqVapk49mh_Ukh39i7.azFYKMxSvB71zwxjF7DjfauxuCGgOa.5D06EsO37o_ADECoyIEQUD6VOJuavDllXQ1vxYK3VB_6khk80okAGfC6acS5j5uFj0HGm2QDuej1BuZJ.c2jY4njw48Rb5ZTnBmXRWIo8iEyCm0nmXAwiXBKZZzAsRyHsQc4yVMTL4q74WAoG6q3ucKPL3iMfD8P1OU7vTGulHpeDKf4O3kAHKPA42l.ulQ1LQBcuN5YYuqrZY8LN2JJP8ABi9nU6r0S35H.n99weFK0spNR8ieKqMkiariLgjYQKRS6RnN8TVcw20HNGvvgzg-
X-Mailer: YahooMailClassic/9.1.10 YahooMailWebService/0.8.100.260964
Date: Tue, 26 Jan 2010 11:49:48 -0800 (PST)
From: Sarad AV <jtrjtrjtr2001@yahoo.com>
Subject: Basic Birthday Paradox question
To: cypherpunks@al-qaeda.net
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Sender: owner-cypherpunks@al-qaeda.net
Precedence: bulk
X-Loop: al-qaeda.net

Hi,

I have a basic doubt of the birthday problem  for the case k=2, i.e 2 lists, where it is required to find a xor b =0(implies a=b; such that a is from the first list and b is from the second list).

Now, if we operate on 'n' bit values, then the basic algorithm is said to work in O( 2^(n/2) ) time and space. That is the time  and space requirement to find a collision between the two list.

What we do is fill the two lists(each) with  2^(n/2) random integers and 'JOIN' them. JOIN gives the elements that are common to both the lists.

JOIN (done efficiently) basically means sorting the two lists individually and then looking for a match between the two lists. We are assuming that we will have practical memory constrains when 'n' is large.

Sorting x elements can be done in O(x.log x) <--(1)


For e.g. 
if k=2 and x=256 elements; sorting takes O(x.log x) . 

But we store only 2^(n/2) elements in each list. Hence n=8 bits.
SO, we have 2^4 = 16 elements in each list. By eq (1), sorting takes
O(2^4 * 4) time= O(2^6) time.

Since x=256 , n=8 and we should have got O( 2^(n/2) ); i.e. O( 2^(8/2) ) =  O( 2^4 )  time complexity

there is a mismatch between the time complexities. what am I doing wrong here?

Thanks,
Sarad.

