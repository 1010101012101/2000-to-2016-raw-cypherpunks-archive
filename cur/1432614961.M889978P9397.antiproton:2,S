Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t4Q4ZEHd009376;
	Tue, 26 May 2015 00:35:18 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=VwYA965q;
	dkim-adsp=none (unprotected policy); dkim-atps=neutral
Received: from mail-qk0-f170.google.com (mail-qk0-f170.google.com
 [209.85.220.170])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t4Q4ZBmA009372
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Tue, 26 May 2015 00:35:12 -0400
Received: by qkdn188 with SMTP id n188so79618976qkd.2
 for <cypherpunks@cpunks.org>; Mon, 25 May 2015 21:35:05 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:sender:in-reply-to:references:from:date:message-id
 :subject:to:cc:content-type;
 bh=AZrPY6vmmHBLiX6oeECDfDdTYL0vkW2te1RIy8qzZ7U=;
 b=VwYA965q9rVdmmLhYsEJTdheFx7UgxgADZJZxBuMvN9TwWAV4NJHKzCCa1RyjtbBdq
 NDqMOitor3ad/QLm96KywnZ47u4WWBbidgWL71NyO6YUd0jQGWRylEAb6Ig3jRfG8oQM
 FKudOre4eW0ePhBRU7/bTKJWIXmCLYiSg6wGxpc9KkJoGaCGa6gG0EQdSIr/dxmEENAI
 +cslE8uHYqxRBZw24H0QxC1Quf/u15jhPSge8mbMRr4JQM70LXv9nRhxdCYu+yDlFJNG
 uIeEtCABjfjgKaEQbaYJrBQW0t+zcGh/Zl40VSVjibR6ObsNZXKUQR5o0QCJdxk/LKeH
 XkwQ==
X-Received: by 10.140.231.14 with SMTP id b14mr32535476qhc.85.1432614905324;
 Mon, 25 May 2015 21:35:05 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.140.30.70 with HTTP; Mon, 25 May 2015 21:34:44 -0700 (PDT)
In-Reply-To: <55630D90.2010205@cs.helsinki.fi>
References: <55621BE8.5050901@cs.helsinki.fi>
 <CAHWD2rKYQushRzL33L2ftuxnuVdO+cUgWwakQQLaqrD5LMZrQA@mail.gmail.com>
 <55630D90.2010205@cs.helsinki.fi>
From: =?UTF-8?Q?Lodewijk_andr=C3=A9_de_la_porte?= <l@odewijk.nl>
Date: Tue, 26 May 2015 13:34:44 +0900
X-Google-Sender-Auth: Duj6d757AmJXhAY_ROryK5yz2UY
Message-ID: <CAHWD2rLrhP73hyjBbq3ZUdxOBX+XBZ5JLKr96UFYpmyxSMnJEw@mail.gmail.com>
Subject: Re: TFC 0.5.5 out
To: Markus Ottela <oottela@cs.helsinki.fi>
Content-Type: multipart/alternative; boundary=001a11355854882a920516f4a615
Cc: "cypherpunks@cpunks.org" <cypherpunks@cpunks.org>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Lines: 155

--001a11355854882a920516f4a615
Content-Type: text/plain; charset=UTF-8

2015-05-25 20:54 GMT+09:00 Markus Ottela <oottela@cs.helsinki.fi>:

>  You don't lose one bit for each message. The idea is that the average
> length of cycle for a good 512 bit hash function is 2^256. So after 2^256
> messages, keys might start to repeat. 2^256 keys last for 10^73 messages,
> or 10^56 years with 1TB/s continuous transfer speed.
>

Yes, but the question was about situations wherin the hash function
functions subpar, for example because of some esoteric relationship between
one key and the next. Think also of a quantum computer, being able to work
through such relationships exceedingly fast. A chosen plaintext attack is
imaginable.


> This however doesn't mean the ciphertext will repeat. That would require
> that all four encryption keys are the same (Probability for that is 1 /
> (256^4)) and that all nonces are same as well (even less likely).
>

Yes, it seems plentifully good enough if the hash function is perfect. But,
is it? I am not able to say. I'm pretty confident that, even if it leaks
more than expected, the space would still be large enough. The only serious
issue arises with Quantum Computing, and whether or not that's a realistic
thing to fear is yet TBD. I think it is though, perhaps in 40 years, but
I'd like my chats to be private forever (iow: targeting at 100 years).


> You can't guarantee all messages make it through, and there is no return
> channel from either RxM to sender's TxM to tell if some message has not
> been received. If more entropy would be transferred inside messages, drop
> of packets could lead to keys getting out of sync. But since the keyspace
> of current implementation effectively never runs out, this is not necessary.
>

Yes, this would be a problem. Data corruption also seems like it might be a
serious issue.


> I think the local testing version comes very close to the "microservice"
> model you described. The local testing version runs all three programs on
> same computer and messages are transmitted unidirectionally via files. But
> whatever you can exploit on the single system, can lead to exfiltration of
> keys so the HW data-diode model is infinite times more secure. Malware
> isn't going to break the laws of physics inside data diodes (removing other
> covert channels from audio to heat between TCB units is of course required).
>

Fully agree. This actually means a hardware exploit is also irrelevant, so
long as the diodes work! Wonderful :)


> Pidgin is currently the ideal client, mainly because it was fairly easy to
> implement (readily available code) and because it's bundled with Tails.
>

Good reasons. My first thought was compatibility with other services, but
that didn't really make sense given that the other party would obviously
need to run TCB too.

If the constant transmission feature of TFC is combined with hidden service
> XMPP server, the amount of metadata should be about as low as you can make
> it.
>

I have called "constant transmission" a "trickle-connection" (perhaps just
a trickle) in the past, as information constantly trickles across, and
analogies with plumbing are common in networking. I'm happy to see someone
actually implementing it :)

Keep it up! It looks good!

--001a11355854882a920516f4a615
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><div class=3D"gmail_quote">2015=
-05-25 20:54 GMT+09:00 Markus Ottela <span dir=3D"ltr">&lt;<a href=3D"mailt=
o:oottela@cs.helsinki.fi" target=3D"_blank">oottela@cs.helsinki.fi</a>&gt;<=
/span>:<br><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;bor=
der-left:1px #ccc solid;padding-left:1ex">
 =20
   =20
 =20
  <div text=3D"#000000" bgcolor=3D"#FFFFFF">
    You don&#39;t lose one bit for each message. The idea is that the
    average length of cycle for a good 512 bit hash function is 2^256.
    So after 2^256 messages, keys might start to repeat. 2^256 keys last
    for 10^73 messages, or 10^56 years with 1TB/s continuous transfer
    speed.<br></div></blockquote><div><br></div><div>Yes, but the question =
was about situations wherin the hash function functions subpar, for example=
 because of some esoteric relationship between one key and the next. Think =
also of a quantum computer, being able to work through such relationships e=
xceedingly fast. A chosen plaintext attack is imaginable.</div><div>=C2=A0<=
/div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-le=
ft:1px #ccc solid;padding-left:1ex"><div text=3D"#000000" bgcolor=3D"#FFFFF=
F">This however doesn&#39;t mean the ciphertext will repeat. That would
    require that all four encryption keys are the same (Probability for
    that is 1 / (256^4)) and that all nonces are same as well (even less
    likely).<br></div></blockquote><div><br></div><div>Yes, it seems plenti=
fully good enough if the hash function is perfect. But, is it? I am not abl=
e to say. I&#39;m pretty confident that, even if it leaks more than expecte=
d, the space would still be large enough. The only serious issue arises wit=
h Quantum Computing, and whether or not that&#39;s a realistic thing to fea=
r is yet TBD. I think it is though, perhaps in 40 years, but I&#39;d like m=
y chats to be private forever (iow: targeting at 100 years).</div><div>=C2=
=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;borde=
r-left:1px #ccc solid;padding-left:1ex"><div text=3D"#000000" bgcolor=3D"#F=
FFFFF">You can&#39;t guarantee all messages make it through, and there is n=
o
    return channel from either RxM to sender&#39;s TxM to tell if some
    message has not been received. If more entropy would be transferred
    inside messages, drop of packets could lead to keys getting out of
    sync. But since the keyspace of current implementation effectively
    never runs out, this is not necessary.<br></div></blockquote><div><br><=
/div><div>Yes, this would be a problem. Data corruption also seems like it =
might be a serious issue.</div><div>=C2=A0</div><blockquote class=3D"gmail_=
quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1=
ex"><div text=3D"#000000" bgcolor=3D"#FFFFFF">
    I think the local testing version comes very close to the
    &quot;microservice&quot; model you described. The local testing version=
 runs
    all three programs on same computer and messages are transmitted
    unidirectionally via files. But whatever you can exploit on the
    single system, can lead to exfiltration of keys so the HW data-diode
    model is infinite times more secure. Malware isn&#39;t going to break
    the laws of physics inside data diodes (removing other covert
    channels from audio to heat between TCB units is of course
    required).<br></div></blockquote><div><br></div><div>Fully agree. This =
actually means a hardware exploit is also irrelevant, so long as the diodes=
 work! Wonderful :)</div><div>=C2=A0</div><blockquote class=3D"gmail_quote"=
 style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><d=
iv text=3D"#000000" bgcolor=3D"#FFFFFF">
    Pidgin is currently the ideal client, mainly because it was fairly
    easy to implement (readily available code) and because it&#39;s bundled
    with Tails.</div></blockquote><div><br></div><div>Good reasons. My firs=
t thought was compatibility with other services, but that didn&#39;t really=
 make sense given that the other party would obviously need to run TCB too.=
</div><div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 =
0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div text=3D"#000000" b=
gcolor=3D"#FFFFFF"> If the constant transmission feature of TFC is combined
    with hidden service XMPP server, the amount of metadata should be
    about as low as you can make it.</div></blockquote><div><br>I have call=
ed &quot;constant transmission&quot; a &quot;trickle-connection&quot; (perh=
aps just a trickle) in the past, as information constantly trickles across,=
 and analogies with plumbing are common in networking. I&#39;m happy to see=
 someone actually implementing it :)</div><div><br></div><div>Keep it up! I=
t looks good!</div></div></div></div>

--001a11355854882a920516f4a615--

