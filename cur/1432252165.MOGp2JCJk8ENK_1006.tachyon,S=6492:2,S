From owner-cypherpunks@Algebra.COM  Fri Jan 24 16:05:03 2003
Return-Path: <owner-cypherpunks@Algebra.COM>
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.7.7.76])
	by positron.jfet.org (8.11.6/8.9.3) with ESMTP id h0OL51O01350
	for <rsw@opamp.org>; Fri, 24 Jan 2003 16:05:01 -0500
Received: from ak47.algebra.com ([209.120.156.51])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id QAA07090
	for <rsw@mit.edu>; Fri, 24 Jan 2003 16:05:00 -0500 (EST)
Received: from ak47.algebra.com (majordom@localhost [127.0.0.1])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id h0OKqg8d014136
	for <cypherpunks-outgoing@ak47.algebra.com>; Fri, 24 Jan 2003 14:52:42 -0600
Received: (from majordom@localhost)
	by ak47.algebra.com (8.12.1/8.12.1/Submit) id h0OKqgMW014135
	for cypherpunks-outgoing; Fri, 24 Jan 2003 14:52:42 -0600
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from locust.minder.net (locust.minder.net [66.92.53.74])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id h0OKqb8d014113
	for <cypherpunks@algebra.com>; Fri, 24 Jan 2003 14:52:38 -0600
Received: from waste.minder.net (daemon@waste [66.92.53.73])
	by locust.minder.net (8.12.6/8.12.6) with ESMTP id h0OKqawx060519
	for <cypherpunks@algebra.com>; Fri, 24 Jan 2003 15:52:36 -0500 (EST)
	(envelope-from cpunks@waste.minder.net)
Received: (from cpunks@localhost)
	by waste.minder.net (8.11.6/8.11.6) id h0OKqZR14687
	for cypherpunks@algebra.com; Fri, 24 Jan 2003 15:52:35 -0500
Received: (from majordom@localhost)
	by waste.minder.net (8.11.6/8.11.6) id h0OKpp414626
	for cypherpunks-outgoing; Fri, 24 Jan 2003 15:51:51 -0500
Received: from locust.minder.net (locust.minder.net [66.92.53.74])
	by waste.minder.net (8.11.6/8.11.6) with ESMTP id h0OKpp814622
	for <cypherpunks@minder.net>; Fri, 24 Jan 2003 15:51:51 -0500
Received: from shaddack.mauriceward.com (s091-n154.tele2.cz [213.246.91.154])
	by locust.minder.net (8.12.6/8.12.6) with ESMTP id h0OKplx0060495
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=FAIL)
	for <cypherpunks@minder.net>; Fri, 24 Jan 2003 15:51:50 -0500 (EST)
	(envelope-from shaddack@ns.arachne.cz)
Received: (qmail 18266 invoked from network); 24 Jan 2003 20:51:46 -0000
Received: from zeta.shaddack.cz (HELO Zeta) (10.0.0.2)
  by zeta.shaddack.cz with SMTP; 24 Jan 2003 20:51:46 -0000
Date: Fri, 24 Jan 2003 21:51:46 +0100 (CET)
From: Thomas Shaddack <shaddack@ns.arachne.cz>
X-X-Sender: <shad@Zeta>
To: <cypherpunks@minder.net>
Old-Subject: Re: thumdrive integrity --Deniable Thumbdrive?
In-Reply-To: <2SCO0JWO37645.537025463@anonymous.poster>
Message-ID: <Pine.LNX.4.33.0301242118060.24927-100000@Zeta>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Old-Subject: Re: thumdrive integrity --Deniable Thumbdrive?
X-Spam-Status: No, hits=-1.4 required=10.0
	tests=IN_REP_TO,QUOTED_EMAIL_TEXT,SPAM_PHRASE_00_01,
	      USER_AGENT_PINE
	version=2.43
Subject:  Re: thumdrive integrity --Deniable Thumbdrive?
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
Status: O
Content-Length: 3205
Lines: 62



> WTF is the point of adding more biometric security to a device that
> cannot and does not support data integrity?  that flash memory held
> within the thumbdrive keeps your data in clear text...unless of course
> you store everything within some form of encrypted disk.  even then,
> the quick and dirty way to bypass the bio-security us to pull the card
> out of the usb enclosure and start poking at the contents.

DEFINITELY TRUE!

Thumbdrive products are a good step in the right direction, but by far not
long enough. Another approach is needed.

The unit should be tamperproof, with more services than just a dumb mass
storage device. The unit should contain a biometric sensor (eg, a
fingerprint reader), a small keypad or other device to enter a PIN, and
its own processor, for performing cryptographic operations.

The device should support several operations for different PINs, and
several PINs, which will allow several different private storage areas,
different operations, and a special PIN for destruction of secure content
and offering dummy content instead ("See officer? I told you there are no
crypto keys there!").

The device should be able to keep audit log of operations.

The device should store the data in encrypted form in the memory. The PIN
could be part of the decryption key.

The device should be able to handle the biometric reader output on its
own, independently on the host computer. This architecture together with
adherence to USB mass-storage standards would make us independent on any
OS-specific drivers, making the device truly multiplatform.

The device should be able to perform the encryption/decryption services on
its own (hence the cryptographic CPU). Eg, you have an untrusted computer.
You plug the device to its port, move a document from the untrusted
machine to device's directory "Cleartext", authorize yourself to the
device with fingerprint and PIN, select the "Encrypt" function (which can
be done eg. by a suffix to the PIN). In few seconds, you should then find
the encrypted document in the device's directory "Ciphertext". Similarly,
the device should support write-only directory, to which you could write
files freely but won't be able to retrieve them without authorization
(this could allow using the device for data couriers who would be able
to pick data but won't be able to read them along the way).

Optionally, the unit could be usable for encryption/decryption of data
streams, which would make it very useful for IP telephony.

The key for crypto functions should never leave the unit. Attempt of
physical compromising of the unit should result in self destruction of at
least the part of the memory that keeps the keys (maybe keep them in
battery-backed RAM, sealed in epoxide resin with both passive and active
tamper-detection devices (including but not limited to thin wire mesh)?

This way, even if the computer itself would get compromised, the only
thing the adversary would be able to intercept would be the plaintexts
used in the sessions with the compromised machine. Which they would be
able to get using TEMPEST or a keylogger anyway. This design should be
robust against hijacking of the key by eg. trojan horses.


