From owner-cypherpunks@Algebra.COM  Wed Feb 21 20:01:37 2001
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.72.0.53])
	by positron.mit.edu (8.9.3/8.9.3) with ESMTP id UAA22141
	for <kwantam@positron.mit.edu>; Wed, 21 Feb 2001 20:01:37 -0500
Received: from ak47.algebra.com (root@ak47.algebra.com [208.233.99.160])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id UAA12458
	for <rsw@mit.edu>; Wed, 21 Feb 2001 20:01:37 -0500 (EST)
Received: (from majordom@localhost)
	by ak47.algebra.com (8.11.1/8.11.1) id f1LNigB26011
	for cypherpunks-outgoing; Wed, 21 Feb 2001 17:44:42 -0600
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from einstein.ssz.com (cpunks@einstein.ssz.com [204.96.2.99])
	by ak47.algebra.com (8.11.1/8.11.1) with ESMTP id f1LNies25997
	for <cypherpunks@algebra.com>; Wed, 21 Feb 2001 17:44:40 -0600
Received: (from cpunks@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id RAA23673
	for cypherpunks@algebra.com; Wed, 21 Feb 2001 17:54:51 -0600
Received: (from mdom@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id RAA23664
	for cypherpunks-outgoing; Wed, 21 Feb 2001 17:54:44 -0600
Received: from localhost (ravage@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) with SMTP id RAA23656;
	Wed, 21 Feb 2001 17:54:36 -0600
Date: Wed, 21 Feb 2001 17:54:36 -0600 (CST)
From: Jim Choate <ravage@ssz.com>
To: cypherpunks@einstein.ssz.com
cc: coderpunks@toad.com, cryptography@c2.net
Old-Subject: CDR: Testing for encryption. (fwd)
Message-ID: <Pine.LNX.3.96.1010221175100.5925u-100000@einstein.ssz.com>
MIME-Version: 1.0
Old-Content-Type: TEXT/PLAIN; charset=US-ASCII
Reply-To: cypherpunks@ssz.com
X-Mailing-List: cypherpunks@ssz.com
X-Unsubscription-Info: http://einstein.ssz.com/cdr
X-List-Admin: list@ssz.com
X-Loop: ssz.com
X-Acceptable-Languages: English, Russian, German, French, Spanish
Subject:  Testing for encryption. (fwd)
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
Content-Type: application/pgp; format=text; x-action=sign
Status: O
Content-Length: 2909
Lines: 96



Yeah, yeah, yeah. Only problem is the constraint that GPG must be
specified as the allowed source encryption standard a priori. This was NOT
in the original problem description.

There is NO algorithm which will determine if an arbitrary piece of text
is encrypted by an arbitrary algorithm. You can tell, at least
statistically if a particular piece of arbitrary text ISN'T a particular
algorithm or language either. Again, not the same problem.

    ____________________________________________________________________

           Before a larger group can see the virtue of an idea, a
           smaller group must first understand it.

                                           "Stranger Suns"
                                           George Zebrowski

       The Armadillo Group       ,::////;::-.          James Choate
       Austin, Tx               /:'///// ``::>/|/      ravage@ssz.com
       www.ssz.com            .',  ||||    `/( e\      512-451-7087
                           -====~~mm-'`-```-mm --'-
    --------------------------------------------------------------------


 ---------- Forwarded message ----------
Date: 21 Feb 2001 19:44:33 -0000
From: Septic Remailer Admin <septic-admin@nym.alias.net>
To: Jim Choate <ravage@EINSTEIN.ssz.com>
Subject: Testing for encryption.

-----BEGIN PGP SIGNED MESSAGE-----

#!/usr/bin/perl

# name: encryption_check.pl
# purpose: Tests if STDIN is encrypted. Prints file to STDOUT if
# it is encrypted. Discards unencrypted files.
# requires: /bin/tempfile from debianutils, /usr/bin/gpg

# TODO:
# Does it need to detect Mixmaster messages?
# It should handle pings (i.e. plain text) to another remailer
# by checking rlist or some arbitrary whitelist.

# author: septic-admin@nym.alias.net
# date: 4 OCT 2000
# license: GPL

if (!-x "/bin/tempfile") { die "requires /bin/tempfile"; }
if (!-x "/usr/bin/gpg") { die "requires /usr/bin/gpg"; }

my $TMP = `tempfile` || die "cannot create temp file";
my $ENCRYPTED = 0;

# Store the file.
open(TEMPFILE, ">$TMP") || die "cannot open temp file";
while (<>) {
	print TEMPFILE;
}
close(TEMPFILE) || die "cannot close tempfile";

# Test the file.
open(GPG, "gpg --batch 2>&1 <$TMP|") || die "cannot open GPG pipe";
while (<GPG>) {
	if ($_ =~ /^gpg: encrypted/) {
		$ENCRYPTED = 1;
	}
}
close(GPG);

# Insert code here to test destination against whitelist (for pings).

# Print the file to STDOUT if it is encrypted.
if ($ENCRYPTED) {
	open(TEMPFILE, "<$TMP") || die "cannot reopen temp file";
	while (<TEMPFILE>) {
		print;
	}
	close(TEMPFILE);
}

unlink $TMP || die "cannot unlink temp file";


-----BEGIN PGP SIGNATURE-----
Version: 2.6.3a
Charset: noconv

iQCVAwUBOpQLgHT63FdzI1K1AQELwAQAr44gXDXjrHGzhF+Dj7YTw37hBkDrQaBf
QhmCRf22ikzWEazvWIqCCMOMRd5nB+bD454JWI5G7QWAOHNvU8lL2S4kxRIFqNyr
gA1vdrs5MlzRYQptjz2HpFpfx7BEO1mxsSXrlsCqOrNkAYmnhicfVgoMXcdYyQul
Rvw13C4kasw=
=UEL2
-----END PGP SIGNATURE-----

