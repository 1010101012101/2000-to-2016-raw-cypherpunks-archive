From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Fri Jul  4 10:57:16 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pa0-f49.google.com (mail-pa0-f49.google.com [209.85.220.49])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s64EvFop019423
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Fri, 4 Jul 2014 10:57:16 -0400
Received: by mail-pa0-f49.google.com with SMTP id lj1so2084181pab.8
        for <rsw@jfet.org>; Fri, 04 Jul 2014 07:57:09 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-original-authentication-results:delivered-to:date:to:subject
         :message-id:mime-version:content-type:content-disposition:user-agent
         :precedence:list-id:list-unsubscribe:list-archive:list-post
         :list-help:list-subscribe:errors-to:sender:from;
        bh=bOpIAobpnmhpFaAxpt8ftsmyiOx+MqwkQoiTcOlbCCo=;
        b=RrBhvwYhxwLnqCmRbHsih4frCRWTbxQ/VFb/y5GNEPGNkCKDD0RV1ohtvmSu4CYrYs
         ogqbZ1TNf+PE6Vfz9gC7JhcDTIASof6ipNwCk3rkXoOMbHM9k9DjJmLyw6dkFGp7saWQ
         P3xfKsXN49LGn64moawDzlg/XtRrCVdABa52dDq8z6Lh8VAMjy1FnvFZVBjDdxRpELVc
         WW9wEhk+cwvdo5aoXSo3phmgjK3ykQx37q2ttD5tyCGzqVfLFfd4jTvjEHRzWI2B9Z6X
         9Vw1BqvQt5U1ZnhSa0wsejIHACyapLnTRLXsab/7y1YI82CWQUBfIavxHwGa/OYTBUAX
         bquw==
X-Original-Authentication-Results: mx.google.com;       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net
X-Received: by 10.70.103.74 with SMTP id fu10mr10478566pdb.119.1404485829181;
        Fri, 04 Jul 2014 07:57:09 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.25.164 with SMTP id d4csp101902pdg;
        Fri, 4 Jul 2014 07:57:08 -0700 (PDT)
X-Received: by 10.68.163.100 with SMTP id yh4mr11272303pbb.122.1404485828439;
        Fri, 04 Jul 2014 07:57:08 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id hs4si2340698pac.33.2014.07.04.07.57.07
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Fri, 04 Jul 2014 07:57:08 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s64Euler019405;
	Fri, 4 Jul 2014 10:56:48 -0400
Received: from leitl.org (v8.ativel.com [164.177.174.8])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s64Euh2I019401
 (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Fri, 4 Jul 2014 10:56:45 -0400
Received: by leitl.org (Postfix, from userid 1000)
 id C11C8540F7F; Fri,  4 Jul 2014 16:56:41 +0200 (CEST)
Date: Fri, 4 Jul 2014 16:56:41 +0200
To: tor-talk@lists.torproject.org, cypherpunks@cpunks.org,
        Liberation Technologies <liberationtech@mailman.stanford.edu>
Subject: messing with XKeyScore
Message-ID: <20140704145641.GP26986@leitl.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.21 (2010-09-15)
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: Eugen Leitl <eugen@leitl.org>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 5725
Lines: 67


http://blog.erratasec.com/2014/07/jamming-xkeyscore_4.html?m=1 

Errata Security

Advanced persistent cybersecurity

Friday, July 04, 2014

Jamming XKeyScore

Back in the day there was talk about "jamming echelon" by adding keywords to email that the echelon system was supposedly looking for. We can do the same thing for XKeyScore: jam the system with more information than it can handle. (I enumerate the bugs I find in the code as "xks-00xx").


For example, when sending emails, just send from the address "bridges@torproject.org" and in the email body include:

https://bridges.torproject.org/
bridge = 0.0.0.1:443
bridge = 0.0.0.2:443
bridge = 0.0.0.3:443
...

Continue this for megabytes worth of bridges (xks-0001), and it'll totally mess up XKeyScore. It has no defense against getting flooded with information like this, as far as I can see.


Note that the regex only cares about 1 to 3 digit numbers, that means the following will be accepted by the system (xks-0002):

bridge = 75.748.86.91:80

The port number matches on 2 to 4 digits ([0-9]{2,4}). Therefore, bridges with port numbers below 10 and above 9999 will be safe. I don't know if this code reflect a limitation in Tor, or but assuming high/low ports are possible, this can be used to evade detection (xks-0011).

Strangely, when the port number is parsed, it'll capture the first non-digit character after the port number (xks-0012). This is normally whitespace, but we could generate an email with 256 entries, trying every possible character. A character like < or ' might cause various problems in rendering on an HTML page or generating SQL queries.


You can also jam the system with too many Onion addresses (xks-0003), but there are additional ways to screw with those. When looking for Onion addresses, the code uses a regex that contains the following capture clause:

([a-z]+):\/\/)

This is looking for a string like "http://" or "https://", but the regex has no upper bounds (xks-0004) and there is no validation. Thus, you can include "goscrewyourself://o987asgia7gsdfoi.onion:443/" in network traffic, and it'll happily insert this into the database. But remember that "no upper bounds" means just that: the prefix can be kilobytes long, megabytes long, or even gigabytes long. You can open a TCP connection to a system you feel the NSA is monitoring, send 5 gigabytes of lower-case letters, followed by the rest of the Onion address, and see what happens. I mean, there is some practical upper bound somewhere in the system,, and when you hit it, there's a good chance bad things will happen.

Likewise, the port number for Onion address is captured by the regex (d+), meaning any number of digits (xks-0005). Thus, we could get numbers that overflow 16-bits, 32-bits, 64-bits, or 982745987-bits. Very long strings of digits (megabytes) at this point might cause bad things to happen within the system.

There is an extra-special thing that happens when the schema part of the Onion address is exactly 16-bytes long (xks-0006). This will cause the address and the scheme to reverse themselves when inserted into the database. Thus, we can insert digits into the scheme field. This might foul up later code that assumes schemes only contain letters, because only letters match in the regex.


In some protocol fields, the regexes appear to be partial matches. The system appears to match on HTTP servers with "mixminion" anywhere in the name. Thus, we start causing lots of traffic to go to our domains, such as "mixminion.robertgraham.com", that will cause their servers to fill up with long term storage of sessions they don't care about (xks-0007)


Let's talk X.509, and the following code:

fingerprint('anonymizer/tor/bridge/tls') =
  ssl_x509_subject('bridges.torproject.org') or
  ssl_dns_name('bridges.torproject.org');

Code that parses X.509 certificates is known to be flaky as all get out. The simplest thing to do is find a data center you feel the NSA can monitor, and then setup a hostile server that can do generic fuzzing of X.509 certificates, trying to crash them.

It's likely that whatever code is parsing X.509 certificates is not validating them. Thus, anybody can put certificates on their servers claiming to be 'bridges.torproject.org' (xks-0008). It's likely that the NSA is parsing SSL on all ports, so just pick a random port on your server not being used for anything else, create a self-signed CERT claiming to be "bridges.torproject.org', then create incoming links to that port from other places so at least search-engines will follow that link and generate traffic. This will cause the NSA database of bridges to fill up with bad information -- assuming it's not already full from people screwing with the emails as noted above :).


<img src="http://www.google.com/?q=tails+usb" />

Putting the above code in a web page like this one will cause every visitor to trigger a search for TAILS in the XKeyScore rules. The more people who do this, the less useful it becomes to the NSA (xks-0009) in labeling people as suspicious. Likewise, putting <title>tails.boum.org/<.title> in your webpages will cause the same effect, even when CSS/JavaScript makes such a title invisible.


In theory, the NSA should only be monitoring foreign traffic, and not traffic originating from the United States (or, apparently, the other five-eyes). So here is the fun thing (xks-0010): run your jamming tools from United States IP addresses against those servers in Iran you know the NSA is monitoring. Since the code should already be ignoring the traffic because it originates from the United States, then they can't complain if you've filled up their databases full of Tor Onion and bridge addresses.

Robert Graham 

