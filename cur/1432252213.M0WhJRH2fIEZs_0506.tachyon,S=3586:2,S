From owner-cypherpunks@Algebra.COM  Mon Oct 21 23:04:09 2002
Return-Path: <owner-cypherpunks@Algebra.COM>
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.7.7.76])
	by positron.jfet.org (8.11.6/8.9.3) with ESMTP id g9M348h15364
	for <rsw@opamp.org>; Mon, 21 Oct 2002 23:04:08 -0400
Received: from ak47.algebra.com ([209.120.156.51])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id XAA07595
	for <rsw@mit.edu>; Mon, 21 Oct 2002 23:04:08 -0400 (EDT)
Received: from ak47.algebra.com (majordom@localhost [127.0.0.1])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g9M0oqh1025355
	for <cypherpunks-outgoing@ak47.algebra.com>; Mon, 21 Oct 2002 19:50:53 -0500
Received: (from majordom@localhost)
	by ak47.algebra.com (8.12.1/8.12.1/Submit) id g9M0oqGu025354
	for cypherpunks-outgoing; Mon, 21 Oct 2002 19:50:52 -0500
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from slack.lne.com (gw.lne.com [209.157.136.81])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g9M0ogh1025329
	for <cypherpunks@ak47.algebra.com>; Mon, 21 Oct 2002 19:50:49 -0500
Received: (from cpunk@localhost)
	by slack.lne.com (8.12.5/8.12.5) id g9M0oe01028625
	for cypherpunks@ak47.algebra.com; Mon, 21 Oct 2002 17:50:40 -0700
Received: (from majordom@localhost)
	by slack.lne.com (8.12.5/8.12.5) id g9M0nMxV028608
	for cypherpunks-goingout345; Mon, 21 Oct 2002 17:49:22 -0700
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
Message-ID: <3DB4A078.706ACE40@cdc.gov>
Date: Mon, 21 Oct 2002 17:48:56 -0700
From: "Major Variola (ret)" <mv@cdc.gov>
X-Mailer: Mozilla 4.75 [en] (Win95; U)
X-Accept-Language: en
MIME-Version: 1.0
To: "cypherpunks@lne.com" <cypherpunks@lne.com>
Old-Subject: Re: Intel Security processor + a question
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Loop: cypherpunks@lne.com
X-spam: 0 
Subject:  Re: Intel Security processor + a question
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
Status: O
Content-Length: 1310
Lines: 36


At 05:13 PM 10/21/02 -0400, Tyler Durden wrote:
>
>So I guess the follow on question is: Even if you can look at the code
of a
>RNG...how easy is it to determine if its output is "usefully random",
or are
>there certain "Diffie-approved" RNGs that should always be there, and
if not
>something's up?

Start with something analog, where no one knows the initial state
perfectly, and the dynamics are dispersive (chaotic).  Digitize it.
You can use ping pong balls if you like.

1. Measure its entropy (eg see Shannon).  Xor values together
(xor doesn't generate change (variation), but preserves it).
Go to 1 until you find that your measurments have asymptoted.

You should then hash ('whiten') your distilled 1bit/baud values,
to make it hard to go backwards throught the deterministic iterative
"distilling" in the above recipe.

In practice, you may feed a hashing digest function directly with your
raw
measurements and rely on the digest compressing the number of bits
in:out
to assure 1 bit/baud (even without the hash-whitening).

However the output of such a hash function will be noise-like even with
very low entropy input, e.g., successive integers.  Ergo measuring after

hashing is pointless.

Discuss the results with your troopleader, and you will receive your
crypto merit badge in 4-6 weeks.

