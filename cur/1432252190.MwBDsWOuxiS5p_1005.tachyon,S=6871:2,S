From cypherpunks-bounces@cpunks.org  Sun Jan 12 15:52:10 2014
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0CKpDQp006561;
	Sun, 12 Jan 2014 15:51:19 -0500
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; insecure key"
	header.d=gmail.com header.i=@gmail.com header.b=qdTp+umv;
	dkim-adsp=none (insecure policy); dkim-atps=neutral
Received: from mail-pd0-f176.google.com (mail-pd0-f176.google.com
 [209.85.192.176])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0CKpAna006557
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Sun, 12 Jan 2014 15:51:12 -0500
Received: by mail-pd0-f176.google.com with SMTP id r10so2629341pdi.35
 for <cypherpunks@cpunks.org>; Sun, 12 Jan 2014 12:51:03 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=content-type:mime-version:subject:from:in-reply-to:date:cc
 :content-transfer-encoding:message-id:references:to;
 bh=NxZhPcptQz1ucz18FneQ1K316BO6/V4/swpKHO2zlco=;
 b=qdTp+umvmpycGS7P3lI78cJhYBvTwtCnot7b1QjJXfZVBwRKqNdXXYCL6HDeZWyovy
 sXtMQ9UkqvTpCuB2VW2EFBBdaaY746tN0EJThSv5Q6qvPkZH2msSET8WCccMuciTRKiQ
 4bU5m+jW5s7ct4uL0PZVM1wZPqR5+v9bdtEKF55m50XRUY/EGh9DPO2Z9j4xBBbuMC05
 Ja2ywqsJk9jtBRRPmoOlfqWgUb7eaqob/+HEA7uN0DGM95ar77nqqRAH3PdhKgryS1Zg
 epYLNo/oycUhJFjfRPkJQ+2NhRKkEzqn20WJtk1Ml3Xz/YEUrJc77wVs18hubgJ9/KmT
 8VwQ==
X-Received: by 10.68.192.131 with SMTP id hg3mr25394278pbc.136.1389559863074; 
 Sun, 12 Jan 2014 12:51:03 -0800 (PST)
Received: from [10.0.1.6] ([12.131.214.70])
 by mx.google.com with ESMTPSA id xn12sm42148354pac.12.2014.01.12.12.51.02
 for <multiple recipients>
 (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
 Sun, 12 Jan 2014 12:51:02 -0800 (PST)
Content-Type: text/plain; charset=windows-1252
Mime-Version: 1.0 (Mac OS X Mail 7.1 \(1827\))
Subject: Re: Curve p25519 Replacements for GnuPG?(x2 now) Re: Pretty Curved
 Privacy.. ECC Curve p25519 util(Bernstein approved curve)
From: nymble <nymble@gmail.com>
In-Reply-To: <52D16B05.9010203@cathalgarvey.me>
Date: Sun, 12 Jan 2014 12:51:01 -0800
Message-Id: <F493A6BD-00DE-4B72-BDED-1ECEA318B609@gmail.com>
References: <52CFE3E9.5040400@cypherpunks.to> <20140110122133.GG7008@ctrlc.hu>
 <52CFEC67.9090706@cypherpunks.to> <3153198.N6KqkV6bkD@lap>
 <52D00724.1030302@cypherpunks.to> <20140110150209.GO7008@ctrlc.hu>
 <52D02F64.3010006@cypherpunks.to>
 <A946555C-7420-4EF8-B5F6-F841C7EC5621@gmail.com>
 <52D16B05.9010203@cathalgarvey.me>
To: Cathal Garvey <cathalgarvey@cathalgarvey.me>
X-Mailer: Apple Mail (2.1827)
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by antiproton.jfet.org id
 s0CKpAna006557
Cc: cypherpunks@cpunks.org
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>


On Jan 11, 2014, at 8:02 AM, Cathal Garvey <cathalgarvey@cathalgarvey.me> wrote:

>> - base 4096 (for UTF8 channels)
> 
> I may reveal some crippling ignorance, but:
No … but it depends whats being counted.
...
> If we assume it's 3, and further assume that, after declaring that the
> following 3 bytes are an extension, that any arbitrary binary sequence
> will be interpreted as a visible, copy/pasteable character, then you're
> looking at a length penalty to encode arbitrary data of 33%. For every
> three bytes, you're escaping them to random characters by prefixing with
> another byte.

Twitter limits transmissions to 140 UTF8 characters. 
More than 140 binary characters can be encoded into 140 UTF
8 characters.

In any UTF8 capabile browser/mail/whatever - the apparent
length of a binary string will appear shorter even though the
underlying bytes are longer.

That said … such encoding tricks (base4096 or the like) might 
be better saved for encrypted content in Twiiter or other
UTF8 limited channels.

Public key representation would need to be consistent over
other ASCII limited channels.



> 
> Yes, it's more nuanced than that; you can factor in the ascii set and
> use that where possible, only escaping binary values outside the ascii
> set, but one way or another you're adding length to the binary string by
> messing with it, with the aim being a character-representable set of
> binary data that can be copy/pasted safely and passed through diverse
> transports.
> 
> So the question is what's more important; ability to transport strings
> of data without a significant length penalty, ability to transport
> strings of arbitrary data without affecting the transport, or ability to
> copy/paste (a subset of "transport" I guess).
> 
> Given these, my personal feeling is that if your concern is
> transport-related, which implies that you can't control the transport,
> then stick with base64. If your concern is length, then I don't feel
> UTF8 will offer a significant advantage, and you're much better off
> using something like length-prefixing like bencoding does it. If your
> concern is copy-pasteability, then base58 works and probably is no worse
> than base-utf8, while being significantly easier to implement in code.
> 
> Spurious rant over.
> 
> * Take for example the way early email was sent, where headers were
> specified and then the server awaited the body of the message, the end
> of which was indicated by what amounts to a string of characters; a
> newline, a period, and another newline. Easily injected by accident or
> design, along with other commands.
> 
> On 11/01/14 06:27, nymble wrote:
>> 
>> consistent key formats are critical, need to converge on:
>> - endianness
>> - coordinate representation x, x&y, x and sign …
>> or bits to show which of these …. perhaps borrow ANSI method
>> - hint / indication of cipher suite / curve 
>> - text encoding of binary format (ascii)
>> - text encoding of binary format (utf8)
>> - human readable format
>> 
>>> ecc public key curve p25519(pcp 0.15)
>> leaking crypto suite
>> key should be usable in other contexts besides pcp 0.15
>> 
>> 
>>> 1l0$WoM5C8z=yeZG7?$]f^Uu8.g>4rf#t^6mfW9(rr910
>> one of several possible text encodings
>> Others might include:
>> - base 29 
>> - base 59
>> - base 4096 (for UTF8 channels)
>> 
>> 
>> 
> <0x988B9099.asc>


