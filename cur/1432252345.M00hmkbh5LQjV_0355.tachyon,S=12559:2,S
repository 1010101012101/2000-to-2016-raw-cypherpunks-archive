From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Tue Jul  8 12:07:18 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pd0-f179.google.com (mail-pd0-f179.google.com [209.85.192.179])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68G7H92024895
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Tue, 8 Jul 2014 12:07:18 -0400
Authentication-Results: antiproton.jfet.org; dkim=pass
	reason="2048-bit key; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=a9TpoW1a;
	dkim-adsp=pass; dkim-atps=neutral
Received: by mail-pd0-f179.google.com with SMTP id w10so7421962pde.38
        for <rsw@jfet.org>; Tue, 08 Jul 2014 09:07:11 -0700 (PDT)
X-Received: by 10.66.252.35 with SMTP id zp3mr35844410pac.40.1404835631001;
        Tue, 08 Jul 2014 09:07:11 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.25.164 with SMTP id d4csp352328pdg;
        Tue, 8 Jul 2014 09:07:09 -0700 (PDT)
X-Received: by 10.70.36.135 with SMTP id q7mr5947110pdj.79.1404835629305;
        Tue, 08 Jul 2014 09:07:09 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id b12si6225307pdk.186.2014.07.08.09.07.08
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Tue, 08 Jul 2014 09:07:09 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net;
       dkim=pass header.i=@gmail.com;
       dmarc=pass (p=NONE dis=NONE) header.from=gmail.com
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68G5ZXN024875;
	Tue, 8 Jul 2014 12:05:55 -0400
Received: from mail-qg0-f43.google.com (mail-qg0-f43.google.com
 [209.85.192.43])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68G5XYH024866
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Tue, 8 Jul 2014 12:05:34 -0400
Received: by mail-qg0-f43.google.com with SMTP id z60so5232284qgd.16
 for <cypherpunks@cpunks.org>; Tue, 08 Jul 2014 09:05:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=E4P5cqGuRcAwcqWiNj+vOTUCzerT4xcnJKprcjSxT8A=;
 b=a9TpoW1akX7mbneCuTjCpXS0O5Fj121EaB1uEhfpmM1XNtuOan7gJOx7wSrKmh8rjd
 4bxNlExuKXyFER7CRgKMYFKlXecyu3OB0Cuu+fijeq7CrP1iBw/Jiv4TzXmd9LjbosyC
 zjgVFDZec7pv+oNlxX3Jl2KKggOKuH5LvNKKc4Z0NEbRyr4r7w5ZQYM3q1pir18cqv62
 4sqbf9PiabPFXCJkxA+sYv5s0nhkHm8OZkvV0k0Mv2GIMwIWrfaJibh37YahQ5w9+A+H
 FZA4mi5ZhQdaxb8I7pmlr2WZaVfb/s4XTt1ce6wS60ki4lqbPzAz0tsUJ7fIw4n5NBkr
 u4sA==
MIME-Version: 1.0
X-Received: by 10.224.5.193 with SMTP id 1mr24393131qaw.89.1404835522258; Tue,
 08 Jul 2014 09:05:22 -0700 (PDT)
Received: by 10.229.11.197 with HTTP; Tue, 8 Jul 2014 09:05:22 -0700 (PDT)
In-Reply-To: <CAOsGNSS1H87C666NJKNi7SQaftkxZkRhq6JOoS6NwyZsS5vaKg@mail.gmail.com>
References: <53B84037.7030406@cathalgarvey.me> <20140707084122.GQ6997@ctrlc.hu>
 <CAOE4rSwC55WuYLNRtV5ihZOoVakcaFeV6Z4_a--2nV3d7nOk-g@mail.gmail.com>
 <1997735.1n1TTR1eli@lapuntu> <53BB899A.40408@gmail.com>
 <CAOsGNSS1H87C666NJKNi7SQaftkxZkRhq6JOoS6NwyZsS5vaKg@mail.gmail.com>
Date: Tue, 8 Jul 2014 19:05:22 +0300
Message-ID: <CAOE4rSzEMCjRo57VQfP2gQ4xrCpKLxKd23XvH0YxH7ZE7jCnmQ@mail.gmail.com>
Subject: Re: Tox.im
To: Zenaan Harkness <zen@freedbms.net>
Content-Type: multipart/alternative; boundary=047d7b67745645ac2104fdb0c288
Cc: cypherpunks@cpunks.org
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: =?UTF-8?B?RMSBdmlzIE1vc8SBbnM=?= <davispuh@gmail.com>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 7749
Lines: 171

--047d7b67745645ac2104fdb0c288
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

yeah I agree that using XML was bad idea in XMPP design, there's no good
reason to use it, but XMPP is already thought out unlike any new protocol.
But actually I think could use same XMPP protocol and just map on different
encoding. What is XML?  basically it's just a language for data mapping (an
encoding) and it would be perfectly possible to use same XMPP protocol
concepts and map them on different data structure. And this is the thing I
think should be pursued for. Which encoding to use is debatable. I would
say using Google Protocol Buffers
<https://developers.google.com/protocol-buffers/> are perfect for network
protocols. I haven't investigated how good is MessagePack, but it could be
usable too. Only about JSON and similar I don't like that they're
"type-less", they have just some basic data types like String, Number etc
and you loose information that way, say you've uint32 and you store and
transmit that with JSON and on other end it will be probably int64 because
that CPU is 64bit, of course you could find shortest fitting type, but
that's not practical because you don't know limits of this field, maybe
next message it will be bigger. In Protobuf there's types for everything
int32, unit64 and so on.




2014-07-08 11:25 GMT+03:00 Zenaan Harkness <zen@freedbms.net>:

> On 7/8/14, "=C5=81ukasz \"Cyber Killer\" Korpalski" <cyberkiller8@gmail.c=
om>
> wrote:
> > W dniu 07.07.2014 16:55, rysiek pisze:
> >> Dnia poniedzia=C5=82ek, 7 lipca 2014 16:06:47 D=C4=81vis Mos=C4=81ns p=
isze:
> >>> I don't agree, I think XMPP could be good solution, while yes attack
> >>> surface is quite large but it will be in any case, because even if yo=
u
> >>> create the very minimalist chat protocol possible (let's say basicall=
y
> >>> use
> >>> asymmetric cryptography for messages which are plaintext without any
> >>> features) you still can have bugs in cryptography library, network
> >>> stack,
> >>> OS/kernel. This part will be same no matter what messaging protocol y=
ou
> >>> use.
> >>
> >> Exactly. And that's an argument for NOT minimizing the attack surface
> >> beyond
> >> these problems... how exactly?
> >>
> >> I mean, your argument is basically: "don't wash your hands, as there
> might
> >> be
> >> salmonella in the eggs anyway". Dafuq?
> >
> > I'm going to defend XMPP too, but on the grounds that it's an already
> > established and widely used protocol, the overhead is minimal looking
> > from a modern point of view (even when not using the potentially
> > privacy-risky elements) and it was designed to be extendable. These are
> > imo good arguments to use xmpp instead of creating something new (again
> > :-P ).
>
> As has been said over the decades: start correct, 'good' easy
> to maintain code, secure of course, and optimize later,
> eg 1-1 mapping from XMPP (XML I assume?) to say msgpack:
> MessagePack: http://msgpack.org/ - a fast, binary replacement for JSON
>
> Such optimizations ought be behind a library anyway!
> (From user app point of view.)
>
> As someone else said, think of the stack, separate the concerns:
> IP, user addressing, persistence of ids, persistence of addresses,
> crypting, dht, distributed storage, libs, user apps.
>
> For impatient programmers wanting instant gratification,
> work on one layer in the stack.
>
>

--047d7b67745645ac2104fdb0c288
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">yeah I agree that using XML was bad idea in XMPP design, t=
here&#39;s no good reason to use it, but XMPP is already thought out unlike=
 any new protocol. But actually I think could use same XMPP protocol and ju=
st map on different encoding. What is XML?=C2=A0 basically it&#39;s just a =
language for data mapping (an encoding) and it would be perfectly possible =
to use same XMPP protocol concepts and map them on different data structure=
. And this is the thing I think should be pursued for. Which encoding to us=
e is debatable. I would say using <a href=3D"https://developers.google.com/=
protocol-buffers/">Google Protocol Buffers</a> are perfect for network prot=
ocols. I haven&#39;t investigated how good is MessagePack, but it could be =
usable too. Only about JSON and similar I don&#39;t like that they&#39;re &=
quot;type-less&quot;, they have just some basic data types like String, Num=
ber etc and you loose information that way, say you&#39;ve uint32 and you s=
tore and transmit that with JSON and on other end it will be probably int64=
 because that CPU is 64bit, of course you could find shortest fitting type,=
 but that&#39;s not practical because you don&#39;t know limits of this fie=
ld, maybe next message it will be bigger. In Protobuf there&#39;s types for=
 everything int32, unit64 and so on.<br>
<br><br></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote"=
>2014-07-08 11:25 GMT+03:00 Zenaan Harkness <span dir=3D"ltr">&lt;<a href=
=3D"mailto:zen@freedbms.net" target=3D"_blank">zen@freedbms.net</a>&gt;</sp=
an>:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"">On 7/8/14, &quot;=C5=81ukasz=
 \&quot;Cyber Killer\&quot; Korpalski&quot; &lt;<a href=3D"mailto:cyberkill=
er8@gmail.com">cyberkiller8@gmail.com</a>&gt; wrote:<br>

&gt; W dniu 07.07.2014 16:55, rysiek pisze:<br>
&gt;&gt; Dnia poniedzia=C5=82ek, 7 lipca 2014 16:06:47 D=C4=81vis Mos=C4=81=
ns pisze:<br>
&gt;&gt;&gt; I don&#39;t agree, I think XMPP could be good solution, while =
yes attack<br>
&gt;&gt;&gt; surface is quite large but it will be in any case, because eve=
n if you<br>
&gt;&gt;&gt; create the very minimalist chat protocol possible (let&#39;s s=
ay basically<br>
&gt;&gt;&gt; use<br>
&gt;&gt;&gt; asymmetric cryptography for messages which are plaintext witho=
ut any<br>
&gt;&gt;&gt; features) you still can have bugs in cryptography library, net=
work<br>
&gt;&gt;&gt; stack,<br>
&gt;&gt;&gt; OS/kernel. This part will be same no matter what messaging pro=
tocol you<br>
&gt;&gt;&gt; use.<br>
&gt;&gt;<br>
&gt;&gt; Exactly. And that&#39;s an argument for NOT minimizing the attack =
surface<br>
&gt;&gt; beyond<br>
&gt;&gt; these problems... how exactly?<br>
&gt;&gt;<br>
&gt;&gt; I mean, your argument is basically: &quot;don&#39;t wash your hand=
s, as there might<br>
&gt;&gt; be<br>
&gt;&gt; salmonella in the eggs anyway&quot;. Dafuq?<br>
&gt;<br>
&gt; I&#39;m going to defend XMPP too, but on the grounds that it&#39;s an =
already<br>
&gt; established and widely used protocol, the overhead is minimal looking<=
br>
&gt; from a modern point of view (even when not using the potentially<br>
&gt; privacy-risky elements) and it was designed to be extendable. These ar=
e<br>
&gt; imo good arguments to use xmpp instead of creating something new (agai=
n<br>
&gt; :-P ).<br>
<br>
</div>As has been said over the decades: start correct, &#39;good&#39; easy=
<br>
to maintain code, secure of course, and optimize later,<br>
eg 1-1 mapping from XMPP (XML I assume?) to say msgpack:<br>
MessagePack: <a href=3D"http://msgpack.org/" target=3D"_blank">http://msgpa=
ck.org/</a> - a fast, binary replacement for JSON<br>
<br>
Such optimizations ought be behind a library anyway!<br>
(From user app point of view.)<br>
<br>
As someone else said, think of the stack, separate the concerns:<br>
IP, user addressing, persistence of ids, persistence of addresses,<br>
crypting, dht, distributed storage, libs, user apps.<br>
<br>
For impatient programmers wanting instant gratification,<br>
work on one layer in the stack.<br>
<br>
</blockquote></div><br></div>

--047d7b67745645ac2104fdb0c288--

