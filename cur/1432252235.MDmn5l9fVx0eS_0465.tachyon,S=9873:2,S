From cypherpunks-bounces@cpunks.org  Sat Nov 16 00:51:28 2013
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id rAG5pQ4Z030830;
	Sat, 16 Nov 2013 00:51:27 -0500
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; insecure key"
	header.d=gmail.com header.i=@gmail.com header.b=FE66qLvJ;
	dkim-adsp=none (insecure policy); dkim-atps=neutral
Received: from mail-oa0-f53.google.com (mail-oa0-f53.google.com
 [209.85.219.53])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id rAG5pOgm030826
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Sat, 16 Nov 2013 00:51:25 -0500
Received: by mail-oa0-f53.google.com with SMTP id j17so233623oag.12
 for <cypherpunks@cpunks.org>; Fri, 15 Nov 2013 21:51:19 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:content-type
 :content-transfer-encoding;
 bh=wD3E+3q5j64NrIIKFiXxDtDLJKf9POJnsDhnwsLJYfE=;
 b=FE66qLvJP3XOF3YaEGMmF5oSprH2vrG26ohKs1JBFQOulje+FgrCtxyjqe5p8f4sYS
 bVfXQa0kqfUKWUk2L1jS3l9axKdMmcDS7dAYeJyAEyP+J1cumG60vGbyAGfdyPfgUTL5
 xXJCgJF3VvbKP6G4o3t6fSRz6CGr1aKLj24dhIxx2z5qUfSrs3mSjLvyxRKUukzvRfS5
 PuyZN+aPQ+7HUBuLJC8WbbhZPtKhSicnj51cRDvAcDXDcJvSutDglrNRyF3RVMWQR9Vz
 HT6eqq0q72L9PibqTCz9hEPLnlKyuPCwG3WxXVsldXG/DKUqFJdDS4yiTYwdNs8SfExb
 8LvA==
MIME-Version: 1.0
X-Received: by 10.182.81.99 with SMTP id z3mr10199660obx.64.1384581079206;
 Fri, 15 Nov 2013 21:51:19 -0800 (PST)
Received: by 10.76.33.167 with HTTP; Fri, 15 Nov 2013 21:51:19 -0800 (PST)
Date: Fri, 15 Nov 2013 23:51:19 -0600
Message-ID: <CADhsnxdKcsEi-zuhbsmjE1epvwnJ6QbwBNorETx+uHprJNjoJQ@mail.gmail.com>
Subject: re: passwords! (p7)
From: brian carroll <electromagnetize@gmail.com>
To: cypherpunks@cpunks.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by antiproton.jfet.org id
 rAG5pOgm030826
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 7077
Lines: 271

// two other techniques not yet mentioned...

 consider the previous example once again:


     [pass]-[wo]-[r]-[ds]   --->   [mo]-[sp]-[ssap]-[J]


there could be multiple transformations (a->b->c) that

could involve switching the sequence of the set, and

other such ~operations, whether to the entire password

in aggregate (as string) or inside the separate 'bit' sets,

each potentially having overlapped or different changes


due to symmetry with alphanumerics (hiox), usually the

reference is to vertical, horizontal mirroring and rotation of

180 degrees, though this could also involve 90/270 degrees,

such that a pass could filter the entire string for 90 degrees,

as in the example below, or in other instance, only set 1, etc.


     [mo]-[sp]-[ssap]-[J]   --->   [3o]-[иp]-[ииap]-[J]


in this example, the letters 's' when rotated 90 degrees turn

into the russian lowercase 'и' via substitution.  likewise the

letter 'm' turned into a '3' via its partial rotation.  another rule

for bit set transformation could involve the contraction and

expansion of what is inside the set or the string en total...

such that in the original example, the duplicates letters

in a given set are dropped into a single letter... though

this could then double the other letters within the set...


     [ssap]   --->    [sap]   --->   [saapp]


therefore, a starting password string could in a given

instance change from nine to ten characters...


     [mospssapJ]   --->   [mospsaappJ]


a different take on this same technique of expansion

and contraction is more deconstructive, in that that

the 'intra-sign' or 'infra-sign' structure itself could be

tapped into as its own layer of character abstraction.


consider once again the basic example already used...


     [pass]-[wo]-[r]-[ds]   --->   [mo]-[sp]-[ssap]-[J]


it is possible to modify what is within each bit set in

a range of ways, this transformative process equivalent

in some sense to calculus, relying on geometric ordering

as it relates to typography though could extend further into

linguistics (phonetics, meaning, grammar, syntax) variables.


the focus of consideration is what could potentially happen

to meaningfully transform a bit set or bit string and then use

this as a framework or basis for a ruleset for such processing


take the first bit set in the transformed version:  [mo]


it can be broken down or opened up via its correspondence

with other structuring, so for example the issue of rotation is

such that 3,w,E,m are variables for rotation while o is the same:


     [3o|wo|Eo|mo]


so in that particular range of parameter, the superposition for the

original letter 'm' is more varied than for the letter 'o' in the same set


further though, the structure of the sign itself (at the intra-bit set level

of measurement), that of a single letter, could also be the basis for

such transformative rulesets that further expand or contract 'variables'

in that through their "options" or optionality, provide various structures

that may or may not be used in given bit set permutations at multiple

levels of the letter sign, intra-bit set, inter-bit set, and bit set string


     [mo]


again, consider the potential letter-based structuring that could be

broken apart and merged/fused together to either expand or contract

the given alphabetic and likewise other alphanumeric example...


     [mo]   --->   [rno]  --->   [rn()]


the letter 'm' is fragmented into a letter 'r' and letter 'n' which combine

back into the letter m via proximity or adjacency, and the letter 'o' can

be abstracted into paired symmetric parentheses. what this also does

is take the bit set and expand it from two letters to four characters


the takeaway is that the length of a password could be variable given

what rules are involved, such that a base password could expand and-

or contract and itself be variable across many of its attributes, existing

in a potential state or superposition, that is more the parameters of a

Schrödinger scenario than a pattern-match in a dictionary context

for any given [password] that could be a million potential permutations


consider the following example of a bit string instance, again...


     [mospssapJ]


just making one transformation could change it from pw1 to pw2,

say using a 180 degree rotation first, then a repeated letter function

that drops a letter and expands others in the set (in this case string)...


     mospssapJ   --->   wosdssedr   --->   wwoossddseeddrr


notice the original password ~instance expanded from 9 characters

to 15 characters and has actually changed 'variables' of the password,

so that even if the original password is known, (and then: outdated),

without knowing the rules, it would not be easy to establish pw2 due

to potentially infinite variability, whatever the hidden rulesets may be


another example going further into this transformation via expansion

is to breakdown the sign-structures, again exampled at the bit string level.


     mospssapJ   --->   rn()s|oss|oJ


not much is occuring in this example, it expands from 9 to 12 characters.

though to make it more elaborate, lets rotate the letters 's' ninety degrees...


     moиpииapJ   --->   rn()VI|⁰VIVI|⁰J


this instance transforms the 9 character pw1 into a 15 character pw2 and

also introduces special characters that could be mapped to alphanumeric

structures. and this could go anywhere, to pw3...pwᴺ


for example, further mirroring, symmetry, rotation, duplication, substitution...


     rn()VI|⁰VIVI|⁰J   --->   L⁰|IVIV⁰|IV()nr


....horizontal mirroring of the string, and its further 180 rotation....


      L⁰|IVIV⁰|IV()nr   --->   ju()^I|ₒ^I^I|ₒ7


another pass could again recombine letters, such as substituting

a letter 'b' for '|ₒ', and turning each letter within the set 180 degrees,

if it can be mapped into another character structure...


      ju()^I|ₒ^I^I|ₒ7   --->   rn()VIpVIVIpL


so the idea here is that it is possible to move from pw1 to pwᴺ

and have a running password that is a transmutation of some

original or seed password that is itself autonomous, changing

and variable across a range of parameters; in this way, the

password could have involve aspects of superposition in its

bounded local interactions as its variability is encountered


     mospssapJ   --->   rn()VIpVIVIpL


in other words, pw1 and pw2 and pwᴺ could be a continual

process of transformation, and this variability could fill time,

and expand and contract and change characters, languages,

inter and intra-sign structures, and likewise could include

other variables as mentioned (temperature, other relativistic

variables- moon phase, number of sunspots, UV index, etc)


thus, pw1 could be 15 characters in one moment, 38 the next,

and potentially even strengthened if more than five attempts at

access occur, dropping gates and walls and further parameters,

or spawning a false basic password as entry into the labyrinth...


x⁽ xⁿ x⁾

