From owner-cypherpunks@lne.com  Fri Oct 10 15:22:26 2003
Return-Path: <owner-cypherpunks@lne.com>
Received: from slack.lne.com (gw.lne.com [209.157.136.81])
	by positron.jfet.org (8.11.6p3/8.11.6-03-31-03) with ESMTP id h9AJMOR20343
	for <rsw@jfet.org>; Fri, 10 Oct 2003 15:22:24 -0400
Received: from slack.lne.com (slack.lne.com [127.0.0.1])
	by slack.lne.com (8.12.10/8.12.10) with ESMTP id h9AJ8rid028173
	(version=TLSv1/SSLv3 cipher=EDH-DSS-DES-CBC3-SHA bits=168 verify=NO)
	for <cypherpunks-goingout345@slack.lne.com>; Fri, 10 Oct 2003 12:08:53 -0700
Received: (from majordom@localhost)
	by slack.lne.com (8.12.10/8.12.10/Submit) id h9AJ8rap028172
	for cypherpunks-goingout345; Fri, 10 Oct 2003 12:08:53 -0700
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
X-Authentication-Warning: waste.minder.net: majordom set sender to
  owner-cypherpunks@minder.net using -f
From: Eric Cordian <emc@artifact.psychedelic.net>
Message-Id: <200310101908.h9AJ8NpP029535@artifact.psychedelic.net>
Old-Subject: Re: base conversion
In-Reply-To: <20031008131619.81240.qmail@web21201.mail.yahoo.com>
To: cypherpunks@minder.net
Date: Fri, 10 Oct 2003 12:08:22 -0700 (PDT)
X-Mailer: ELM [version 2.4ME+ PL100 (25)]
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Type: text/plain; charset=US-ASCII
Subject: Re: base conversion
Sender: owner-cypherpunks@lne.com
Precedence: bulk
X-Loop: cypherpunks@lne.com
Status: O
Content-Length: 1504
Lines: 45

Sarad AV writes:

> If we are to convert a k-bit integer n to a base b
> number,it takes us O(log n) if the base b is a power
> of 2.
> eg. converting (11111)base to base 16

> 0001 1111
>   ^    ^
>   1    F  in hex.

> using a look up table.

> Is there an algorithm with time complexity O(log n)
> which allows such conversion to base b ,when b is not
> a power of 2?

The algorithm you describe is linear, not log.  Complexity measures are a
function of the size of the input data set in bits.  In general, a large
integer M will require an input around N = LOG2(M) bits to represent.

A linear algorithm will take twice as long to process a 2 megabyte
integer, as it takes to process a 1 megabyte integer.

You ask whether there are linear algorithms for arbitrary precision base
conversion.

I seem to recall that Schonhage showed how to do base conversion with an
FTT along with his well-known fast multiplication algorithm.

So my guess would be that there are no known linear arbitrary precision 
base conversion algorithms, but probably something O(n log(n))-ish as 
the best currently achievable. 

As usual, Google is your friend.

I think near-linear reciprocals, nth roots, and base conversions are 
covered in "Pi and the AGM" by the Borweins.  My copy is packed in a box 
somewhere, so I can't check.  Perhaps you can find the book at your local 
university library.

-- 
Eric Michael Cordian 0+
O:.T:.O:. Mathematical Munitions Division
"Do What Thou Wilt Shall Be The Whole Of The Law"

