From owner-cypherpunks@jfet.org  Tue Nov  1 09:38:00 2005
Return-Path: <owner-cypherpunks@jfet.org>
Received: from proton.jfet.org (localhost [127.0.0.1])
	by proton.jfet.org (8.13.4/8.13.4/Debian-3) with ESMTP id jA1EbRBR032254
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <cypherpunks-outgoing@proton.jfet.org>; Tue, 1 Nov 2005 09:37:27 -0500
Received: (from majordomo@localhost)
	by proton.jfet.org (8.13.4/8.13.4/Submit) id jA1EbRDb032253
	for cypherpunks-outgoing; Tue, 1 Nov 2005 09:37:27 -0500
Date: Tue, 1 Nov 2005 15:37:08 +0100
From: Eugen Leitl <eugen@leitl.org>
To: cypherpunks@jfet.org
Subject: [kerry@vscape.com: Re: [p2p-hackers] P2P Authentication]
Message-ID: <20051101143708.GL2249@leitl.org>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
User-Agent: Mutt/1.5.9i
X-Converted-To-Plain-Text: from multipart/signed by demime 1.01d
X-Converted-To-Plain-Text: Alternative section used was text/plain
Sender: owner-cypherpunks@jfet.org
Precedence: bulk
X-Loop: al-qaeda.net
Status: O
Content-Length: 4298
Lines: 106

----- Forwarded message from Kerry Bonin <kerry@vscape.com> -----

From: Kerry Bonin <kerry@vscape.com>
Date: Mon, 31 Oct 2005 07:25:20 -0800
To: "Peer-to-peer development." <p2p-hackers@zgp.org>
Subject: Re: [p2p-hackers] P2P Authentication
User-Agent: Mozilla Thunderbird 1.0.6 (Windows/20050716)
Reply-To: "Peer-to-peer development." <p2p-hackers@zgp.org>

Frank,

In my experience w/ pretty hardcore authentication and security domains,
it is pretty much impossible to guarantee that a remote node connecting
over an untrusted network is running trusted code.  For every clever way
to try and detect a compromised client, there are even more clever ways
to subvert the detection process.  The simplest model - simply reverse
engineer the network traffic via packet capture, and write a client that
looks identical from the network traffic.  One example of a common
client validation approach is requesting a strong checksum of some
random range of the client or its dataset, but this is pretty trivial to
circumvent once you have a complete copy of the client and have reverse
engineered its checksum algorithm.

In my experience, if you really care about what your node are doing,
then NEVER trust ANY node - validate every bit of every packet.

If you are trying to catch compromised nodes, there are clever ways to
do that - build heuristic models that examine what nodes are doing, and
forward captures to admin nodes for human analysis for heuristic
refinement and analysis of what your attackers are up to.  While it is
in theory impossible to allow users to do "anything" and still catch a
user "doing something they're not supposed to", it may be possible to
specify terms in your EULA that define constraints users would not
typically violate, and respond with penalties that are not too strong
for the corner cases where a user triggers a false positive by crossing
the line.  An example of this in the file sharing domain would be
temporary bans on nodes that initiated too many searches in some time
frame, suggesting spidering.  On the other hand, clever
counter-heuristics and large numbers of zombies can defeat most
heuristics - see SPAM for many examples...

Kerry

Frank Moore wrote:

>Matthew Kaufman wrote:
>
>>I think what you're asking here is "is it possible to design a p2p
>>network
>>such that the peers must be running the official code that does the
>>right
>>thing, instead of running some subverted code that does something
>>'wrong'?"
>>
>>
>Matthew,
>
>Very eloquently put. Yes, this is exactly what I was asking.
>We supply the client as well as the server and we just need to make
>sure that any client that joins the
>network is our client and not a 'rogue'.
>
>>The one exception is that you *can* in some cases design the network
>>such
>>that peers that don't behave "properly" are shunned or dropped by the
>>rest
>>of the network, assuming that such behavior is detectable. For
>>instance, in
>>a distributed file store, you could store test data and see if it sticks
>>around... If it doesn't, that peer is "cheating".
>>
>>
>We have a way (we think) of authenticating the stream put out by a
>peer, so we can catch a 'rogue' client this
>way, but it seems more logical to prevent someone from logging into
>the network in the first place.
>
>Thanks for your help,
>Frank.
>_______________________________________________
>p2p-hackers mailing list
>p2p-hackers@zgp.org
>http://zgp.org/mailman/listinfo/p2p-hackers
>_______________________________________________
>Here is a web page listing P2P Conferences:
>http://www.neurogrid.net/twiki/bin/view/Main/PeerToPeerConferences
>
>


_______________________________________________
p2p-hackers mailing list
p2p-hackers@zgp.org
http://zgp.org/mailman/listinfo/p2p-hackers
_______________________________________________
Here is a web page listing P2P Conferences:
http://www.neurogrid.net/twiki/bin/view/Main/PeerToPeerConferences

----- End forwarded message -----
--
Eugen* Leitl <a href="http://leitl.org">leitl</a>
______________________________________________________________
ICBM: 48.07100, 11.36820            http://www.leitl.org
8B29F6BE: 099D 78BA 2FD3 B014 B08A  7779 75B0 2443 8B29 F6BE

[demime 1.01d removed an attachment of type application/pgp-signature which had a name of signature.asc]

