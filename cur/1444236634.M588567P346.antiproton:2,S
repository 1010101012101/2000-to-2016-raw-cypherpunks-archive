Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t97GmwBs000318;
	Wed, 7 Oct 2015 12:49:04 -0400
Authentication-Results: antiproton.jfet.org; dkim=pass
	reason="2048-bit key; unprotected key"
	header.d=yahoo.com header.i=@yahoo.com header.b=jw0N0vLh;
	dkim-adsp=pass; dkim-atps=neutral
Received: from nm21-vm7.bullet.mail.gq1.yahoo.com
 (nm21-vm7.bullet.mail.gq1.yahoo.com [98.136.217.54])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t97GmtTU000314
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Wed, 7 Oct 2015 12:48:57 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=yahoo.com; s=s2048;
 t=1444236530; bh=t+SQodfcNjVXEK1Z69gljDQBlDN3QHqk0vY0SWT82N8=;
 h=Date:From:Reply-To:To:In-Reply-To:References:Subject:From:Subject;
 b=jw0N0vLh/j1LRcLmOLg4/em/haz22iXD14K2d82tTOkWXazst4FACCmUbzhsNSTI6mrB2AYh50K5DyQvqDrr2TGsq0KQqXTv96GkUN5Zu+DFsrwygl7NKUjT0lMxneMX7tjeXX7Pg5In71iaV2lWv+6ed4v9ULjpPmwwk6XzG32PiLEKGs9+m295H0zKEDc008So4sDgePefTylD4vF0DspH2LuqFBZNxkUcLJ5TbaPCqJzMpSutpodqN6Ik1eOjvuVgwkb/DDxI4lkV0O4AMbMxkJMw/sCBGaNYhVUWujpL+rx+6E2cHgmbT960wlQZ5V/X3ZcKpMLXiD4dahVDiQ==
Received: from [98.137.12.63] by nm21.bullet.mail.gq1.yahoo.com with NNFMP;
 07 Oct 2015 16:48:50 -0000
Received: from [98.137.12.236] by tm8.bullet.mail.gq1.yahoo.com with NNFMP;
 07 Oct 2015 16:48:50 -0000
Received: from [127.0.0.1] by omp1044.mail.gq1.yahoo.com with NNFMP;
 07 Oct 2015 16:48:50 -0000
X-Yahoo-Newman-Property: ymail-3
X-Yahoo-Newman-Id: 220278.38255.bm@omp1044.mail.gq1.yahoo.com
X-YMail-OSG: FL7MY_AVM1mjr1PLhDAovvu.p0RpTOH43nxvV4xiSW_sZkT_a3x1E0A6DnK1Rwu
 GvFeivhIsQOZeRZoZ9FojEXvf56KyJxTCQoUVVbKH6LbqhkDDdrDRxXni8LLWYabfmiNgelL0l3E
 oLgNUSNZ7afnMhz5xRLqojEITMGNMQn3nd0YYJe7TmzGlGC3FpGi2SypUsgKN8bXHEk6Pi33tPCy
 Xj6jqOETxrE9adV2uYszSWqiBcU6PvWuBZ.VocSXz4K3NewCi892rbwkDzseILkTGT1j1wb5Rrsc
 MWT60rv4LXUeT.nNRDwuG9VykYsE9JiFCZ0oCCrSfcbuKzs5JuR6WOAaMu1ZlOHEZqhrJuWv39_h
 StAZyxrMqR3_TdSzYcOSHwc4H2zxGvrN3CsF4mbPUzXYbZs7RPlTigQZi_KAfUTD8vH4JJYrzaLD
 QvTezIpfQ._8.9QGTP0ju2pLjO15SQuKlj3OEVIpw.gpupyapCQul78QkxVB9TejSFGiaJKcMxAI
 KfvIH.AwfIsMzxAY-
Received: by 216.39.60.198; Wed, 07 Oct 2015 16:48:49 +0000 
Date: Wed, 7 Oct 2015 16:48:49 +0000 (UTC)
From: Michael Nelson <nelson_mikel@yahoo.com>
To: "cypherpunks@cpunks.org" <cypherpunks@cpunks.org>
Message-ID: <1840602720.226067.1444236529423.JavaMail.yahoo@mail.yahoo.com>
In-Reply-To: <1394632190.1340809.1444180572869.JavaMail.yahoo@mail.yahoo.com>
References: <1394632190.1340809.1444180572869.JavaMail.yahoo@mail.yahoo.com>
Subject: Introduce randommess in keypress timings
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Reply-To: Michael Nelson <nelson_mikel@yahoo.com>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Lines: 32




> It is surprising to know that Javascript is fast enough not to have an impact on system performance when monitoring the keystroke timing!

Well it does have an impact, but not enough to ruin things.  Of course it's not just js itself, but the browser, which swaps things in and out to do lots of things whenever it feels like it.

As requested, here are some details.  This is more technical than political, but may be of interest.  This concerns keystroke dynamics on a phrase known by the auth server, not the general background stuff. So we are not really talking about the passive spying/monitoring here, but rather a potential product. So after I wrote my keystroke dynamics proof-of-concept I discovered that the statistical technique had been patented 25 years before (the patent had expired), which validated my approach... Mine had some extra twizzlers though.


At Web browser-based initialization, the user sets a reference challenge word, say, "foobar". She must then enter some samples.  For each sample, a vector of 12 time values is created, one for each keyDown and keyUp event.  Some subtlety is needed in the programming, as keyUp on F might occur before keyDown on O on one sample, but after on the next.  We would like to compare apples to apples.

So we have a sample from the population of vectors as generated by the human.  When authentication is checked, we must measure the distance of our trial vector, from the population.  For this I used the Mahalanobis distance.  Mahalanobis was a well-known Indian statistician who in the 1930s designed a test in order to help anthropologists decide whether skull fragments found in caves matched each other.  This test measures the distance between each pair of entries in a vector.  So F-down and F-up are compared, and also F-down and A-down are compared.  Crucially, the distributions for each pair are normalized.  The vectors can have any numerical data in the components.  It can be used in botany with leaf area, weight, rainfall, etc.  It works beautifully for typing patterns.  Notice that we don't need to extract "dwell" times for keys, but all the same info is there in the more primitive array.

I set a configurable threshold of 20 for the distance triggering secondary authentication.  If I typed with proper focus, I would get distance of say around 4.  If someone else typed they would get say 70 or 150.  These are just typical examples.  It worked fine.  Here are some things I learned.

1. It's very hard to test objectively to make a business case.  Why?  Well if you go around the cubicles asking people to try it, you might get some people testing it on a laptop they don't normally use, or using some sort of random typing, on a string that they don't have an established pattern for.  I realized that KD is not magic.  Just as you would not expect to type a normal password "123456" by mashing the keys randomly, you have to consciously type in your official pattern for KD to work.  It is well-known that the best words for KD are things like your own name, for which you have a well-established pattern.  Now you see one of the reasons that this stuff has not taken off.  You might assiduously set the samples (or have passive background capturing working) on your usual desktop.  Then it will fail when you hunt-and-peck on your laptop.

2. I had a mobile developer add in touchscreen events for an iPhone test.  This uses character and time, and also x and y co-ordinates for both press and release (there is some drag).   The future will bring force.  The beauty of Mahalanobis is that these just go right in and work immediately.  Well, the stats does.  Dealing with these big fat vectors is not trivial.  I proved that it would work (actually it could not fail), but did not complete the mobile version.


3. I hacked the stats out in C.  Interestingly, for me it was harder getting the online demo going with the Web page, jQuery, PHP, and MySQL, than implementing the actual Mahalanobis test.  Maybe I should set the demo up for folks to try.

4. Twizzlers.  One is that I allowed arbitrary shifty characters in my phrase.  So in fact our user could simply tap her favorite rhythm on the Ctrl key, for her authentication factor.  Worked fine.

5. Hope the above was of interest...



mn

