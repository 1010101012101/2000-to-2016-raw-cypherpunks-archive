From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Tue Jul  8 15:55:16 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pd0-f174.google.com (mail-pd0-f174.google.com [209.85.192.174])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68JtFCo026868
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Tue, 8 Jul 2014 15:55:16 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=pE2D3IoF;
	dkim-adsp=none (unprotected policy); dkim-atps=neutral
Received: by mail-pd0-f174.google.com with SMTP id y10so7745824pdj.33
        for <rsw@jfet.org>; Tue, 08 Jul 2014 12:55:09 -0700 (PDT)
X-Received: by 10.67.23.227 with SMTP id id3mr36206277pad.45.1404849309217;
        Tue, 08 Jul 2014 12:55:09 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.25.164 with SMTP id d4csp366080pdg;
        Tue, 8 Jul 2014 12:55:08 -0700 (PDT)
X-Received: by 10.68.234.2 with SMTP id ua2mr26601012pbc.81.1404849308093;
        Tue, 08 Jul 2014 12:55:08 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id of2si32162021pbb.156.2014.07.08.12.55.07
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Tue, 08 Jul 2014 12:55:08 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net;
       dkim=fail header.i=@gmail.com;
       dmarc=fail (p=NONE dis=NONE) header.from=gmail.com
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68JrI7w026829;
	Tue, 8 Jul 2014 15:53:24 -0400
Received: from mail-qc0-f170.google.com (mail-qc0-f170.google.com
 [209.85.216.170])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68JrFIv026825
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Tue, 8 Jul 2014 15:53:16 -0400
Received: by mail-qc0-f170.google.com with SMTP id l6so5821417qcy.15
 for <cypherpunks@cpunks.org>; Tue, 08 Jul 2014 12:53:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=kfI3fzu1KcZCVjMSnDeE1wRtgGYatCHpBrAjbtuqurE=;
 b=pE2D3IoF+8q4apmrhppSjPWYnhg/5q11zTUneMQtv5gYnSnXm61g8OJRvlZeg8RfG7
 3LWwbGNS94eFNnOYnmjtlN9YerprAHHoqtZBSeU6QVPWY3UHnY/etu0tfZmV1z7KtP0k
 WpZAXJkFHsiFtUYU0kmA+mJDoS9rOucvxnZd4YvCHQXnROZJ33lX1g3mJA8EOXZJWBfC
 7cTGgczsJB83z5wiSZQYs7qmwFPqnaQgj1Si3fLSqOWkN1JTmyf+74oRloXF2RpXleXe
 FTc5zh2YvIelYRtg+NJS4AXqTki4Z2WbppTysNW4gpjmTSuwpPzII/NI6yX2xu/MN5hp
 +hQg==
MIME-Version: 1.0
X-Received: by 10.140.87.99 with SMTP id q90mr1600917qgd.43.1404849186378;
 Tue, 08 Jul 2014 12:53:06 -0700 (PDT)
Received: by 10.229.11.197 with HTTP; Tue, 8 Jul 2014 12:53:06 -0700 (PDT)
In-Reply-To: <969fa7d4-d6b4-4d5c-bbbf-c5d7b6482746@email.android.com>
References: <53B84037.7030406@cathalgarvey.me> <20140707084122.GQ6997@ctrlc.hu>
 <CAOE4rSwC55WuYLNRtV5ihZOoVakcaFeV6Z4_a--2nV3d7nOk-g@mail.gmail.com>
 <1997735.1n1TTR1eli@lapuntu> <53BB899A.40408@gmail.com>
 <CAOsGNSS1H87C666NJKNi7SQaftkxZkRhq6JOoS6NwyZsS5vaKg@mail.gmail.com>
 <CAOE4rSzEMCjRo57VQfP2gQ4xrCpKLxKd23XvH0YxH7ZE7jCnmQ@mail.gmail.com>
 <969fa7d4-d6b4-4d5c-bbbf-c5d7b6482746@email.android.com>
Date: Tue, 8 Jul 2014 22:53:06 +0300
Message-ID: <CAOE4rSziWQxm-3W6UP_hCAJN1u3stPbqn-nSXEu7oxcKYjVf_w@mail.gmail.com>
Subject: Re: Tox.im
To: "Cathal (Phone)" <cathalgarvey@cathalgarvey.me>
Content-Type: multipart/alternative; boundary=001a113a60b4b79c9104fdb3f0bc
Cc: cypherpunks@cpunks.org
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: =?UTF-8?B?RMSBdmlzIE1vc8SBbnM=?= <davispuh@gmail.com>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 13076
Lines: 285

--001a113a60b4b79c9104fdb3f0bc
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

I think it's unreal/unpractical and not worth going for and there's just no
benefits for it (just use proper binary serialization), JSON was meant as
human-readable serialization format and introducing binary format there,
then what was the point of using JSON in first place? Why not just some
proper binary serialization? (eg. Protobuf). It just really seems that
people throw a lot of stuff on JSON, XML and others even if it was never
intended to be used for those purposes. There are different tools each for
it's own specific purpose and people should not abuse them.

Current JSON parsers treat " as special token to separate strings, so if
you want to include " in JSON you've to escape, so it will be "\"" and now
with any binary encoding you're complicating this because either you've to
escape " or track whether you're inside binary data or not and it will
crash for non-binary aware parsers. Also what about NUL bytes? I bet most
parsers are implemented in C/C++ using typical char * null-terminated
string, how'll pass this JSON to someone? because well NUL...



2014-07-08 22:22 GMT+03:00 Cathal (Phone) <cathalgarvey@cathalgarvey.me>:

> Biggest FAIL in json is lack of binary. I think a quick extension to
> bencoding is in order: "u<len>" prefix for utf8, "b<len>" for binary. Oth=
er
> types are pretty generally useful as-is. Replace "d", "l" and "e" with
> curly and square braces for readability.
>
> Bencoding's structure and basic idea is nice as it's terse and
> understandable, but also easy to make security guarantees about: length
> prefix, and on parse errors just dump the input and error out. Minimal
> overhead for raw binary, which is what you want for crypto, file transfer=
s,
> and VoiP streams. Trivial to write in any language so rapidly portable, a=
nd
> can be coded recursively with relative ease without sacrificing
> understandability or security (much).
>
> Thoughts? Bencoding 2.0?
>
>
> On 8 July 2014 17:05:22 GMT+01:00, "D=C4=81vis Mos=C4=81ns" <davispuh@gma=
il.com>
> wrote:
>>
>> yeah I agree that using XML was bad idea in XMPP design, there's no good
>> reason to use it, but XMPP is already thought out unlike any new protoco=
l.
>> But actually I think could use same XMPP protocol and just map on differ=
ent
>> encoding. What is XML?  basically it's just a language for data mapping =
(an
>> encoding) and it would be perfectly possible to use same XMPP protocol
>> concepts and map them on different data structure. And this is the thing=
 I
>> think should be pursued for. Which encoding to use is debatable. I would
>> say using Google Protocol Buffers
>> <https://developers.google.com/protocol-buffers/> are perfect for
>> network protocols. I haven't investigated how good is MessagePack, but i=
t
>> could be usable too. Only about JSON and similar I don't like that they'=
re
>> "type-less", they have just some basic data types like String, Number et=
c
>> and you loose information that way, say you've uint32 and you store and
>> transmit that with JSON and on other end it will be probably int64 becau=
se
>> that CPU is 64bit, of course you could find shortest fitting type, but
>> that's not practical because you don't know limits of this field, maybe
>> next message it will be bigger. In Protobuf there's types for everything
>> int32, unit64 and so on.
>>
>>
>>
>>
>> 2014-07-08 11:25 GMT+03:00 Zenaan Harkness <zen@freedbms.net>:
>>
>>> On 7/8/14, "=C5=81ukasz \"Cyber Killer\" Korpalski" <cyberkiller8@gmail=
.com>
>>> wrote:
>>> > W dniu 07.07.2014 16:55, rysiek pisze:
>>> >> Dnia poniedzia=C5=82ek, 7 lipca 2014 16:06:47 D=C4=81vis Mos=C4=81ns=
 pisze:
>>> >>> I don't agree, I think XMPP could be good solution, while yes attac=
k
>>> >>> surface is quite large but it will be in any case, because even if
>>> you
>>> >>> create the very minimalist chat protocol possible (let's say
>>> basically
>>> >>> use
>>> >>> asymmetric cryptography for messages which are plaintext without an=
y
>>> >>> features) you still can have bugs in cryptography library, network
>>> >>> stack,
>>> >>> OS/kernel. This part will be same no matter what messaging protocol
>>> you
>>> >>> use.
>>> >>
>>> >> Exactly. And that's an argument for NOT minimizing the attack surfac=
e
>>> >> beyond
>>> >> these problems... how exactly?
>>> >>
>>> >> I mean, your argument is basically: "don't wash your hands, as there
>>> might
>>> >> be
>>> >> salmonella in the eggs anyway". Dafuq?
>>> >
>>> > I'm going to defend XMPP too, but on the grounds that it's an already
>>> > established and widely used protocol, the overhead is minimal looking
>>> > from a modern point of view (even when not using the potentially
>>> > privacy-risky elements) and it was designed to be extendable. These a=
re
>>> > imo good arguments to use xmpp instead of creating something new (aga=
in
>>> > :-P ).
>>>
>>> As has been said over the decades: start correct, 'good' easy
>>> to maintain code, secure of course, and optimize later,
>>> eg 1-1 mapping from XMPP (XML I assume?) to say msgpack:
>>> MessagePack: http://msgpack.org/ - a fast, binary replacement for JSON
>>>
>>> Such optimizations ought be behind a library anyway!
>>> (From user app point of view.)
>>>
>>> As someone else said, think of the stack, separate the concerns:
>>> IP, user addressing, persistence of ids, persistence of addresses,
>>> crypting, dht, distributed storage, libs, user apps.
>>>
>>> For impatient programmers wanting instant gratification,
>>> work on one layer in the stack.
>>>
>>>
>>
> --
> Sent from my Android device with K-9 Mail. Please excuse my brevity.
>

--001a113a60b4b79c9104fdb3f0bc
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I think it&#39;s unreal/unpractical and not worth going fo=
r and there&#39;s just no benefits for it (just use proper binary serializa=
tion), JSON was meant as human-readable serialization format and introducin=
g binary format there, then what was the point of using JSON in first place=
? Why not just some proper binary serialization? (eg. Protobuf). It just re=
ally seems that people throw a lot of stuff on JSON, XML and others even if=
 it was never intended to be used for those purposes. There are different t=
ools each for it&#39;s own specific purpose and people should not abuse the=
m.<br>
<br>Current JSON parsers treat &quot; as special token to separate strings,=
 so if you want to include &quot; in JSON you&#39;ve to escape, so it will =
be &quot;\&quot;&quot; and now with any binary encoding you&#39;re complica=
ting this because either you&#39;ve to escape &quot; or track whether you&#=
39;re inside binary data or not and it will crash for non-binary aware pars=
ers. Also what about NUL bytes? I bet most parsers are implemented in C/C++=
 using typical char * null-terminated string, how&#39;ll pass this JSON to =
someone? because well NUL...<br>
<br><div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">2014=
-07-08 22:22 GMT+03:00 Cathal (Phone) <span dir=3D"ltr">&lt;<a href=3D"mail=
to:cathalgarvey@cathalgarvey.me" target=3D"_blank">cathalgarvey@cathalgarve=
y.me</a>&gt;</span>:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div>Biggest FAIL in json is lack of binary.=
 I think a quick extension to bencoding is in order: &quot;u&lt;len&gt;&quo=
t; prefix for utf8, &quot;b&lt;len&gt;&quot; for binary. Other types are pr=
etty generally useful as-is. Replace &quot;d&quot;, &quot;l&quot; and &quot=
;e&quot; with curly and square braces for readability. <br>

<br>
Bencoding&#39;s structure and basic idea is nice as it&#39;s terse and unde=
rstandable, but also easy to make security guarantees about: length prefix,=
 and on parse errors just dump the input and error out. Minimal overhead fo=
r raw binary, which is what you want for crypto, file transfers, and VoiP s=
treams. Trivial to write in any language so rapidly portable, and can be co=
ded recursively with relative ease without sacrificing understandability or=
 security (much).<br>

<br>
Thoughts? Bencoding 2.0?<div><div class=3D"h5"><br><br><div class=3D"gmail_=
quote">On 8 July 2014 17:05:22 GMT+01:00, &quot;D=C4=81vis Mos=C4=81ns&quot=
; &lt;<a href=3D"mailto:davispuh@gmail.com" target=3D"_blank">davispuh@gmai=
l.com</a>&gt; wrote:<blockquote class=3D"gmail_quote" style=3D"margin:0pt 0=
pt 0pt 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">

<div dir=3D"ltr">yeah I agree that using XML was bad idea in XMPP design, t=
here&#39;s no good reason to use it, but XMPP is already thought out unlike=
 any new protocol. But actually I think could use same XMPP protocol and ju=
st map on different encoding. What is XML?=C2=A0 basically it&#39;s just a =
language for data mapping (an encoding) and it would be perfectly possible =
to use same XMPP protocol concepts and map them on different data structure=
. And this is the thing I think should be pursued for. Which encoding to us=
e is debatable. I would say using <a href=3D"https://developers.google.com/=
protocol-buffers/" target=3D"_blank">Google Protocol Buffers</a> are perfec=
t for network protocols. I haven&#39;t investigated how good is MessagePack=
, but it could be usable too. Only about JSON and similar I don&#39;t like =
that they&#39;re &quot;type-less&quot;, they have just some basic data type=
s like String, Number etc and you loose information that way, say you&#39;v=
e uint32 and you store and transmit that with
JSON and on other end it will be probably int64 because that CPU is 64bit, =
of course you could find shortest fitting type, but that&#39;s not practica=
l because you don&#39;t know limits of this field, maybe next message it wi=
ll be bigger. In Protobuf there&#39;s types for everything int32, unit64 an=
d so on.<br>

<br><br></div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote"=
>2014-07-08 11:25 GMT+03:00 Zenaan Harkness <span dir=3D"ltr">&lt;<a href=
=3D"mailto:zen@freedbms.net" target=3D"_blank">zen@freedbms.net</a>&gt;</sp=
an>:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div>On 7/8/14, &quot;=C5=81ukasz \&quot;Cyb=
er Killer\&quot; Korpalski&quot; &lt;<a href=3D"mailto:cyberkiller8@gmail.c=
om" target=3D"_blank">cyberkiller8@gmail.com</a>&gt; wrote:<br>


&gt; W dniu 07.07.2014 16:55, rysiek pisze:<br>
&gt;&gt; Dnia poniedzia=C5=82ek, 7 lipca 2014 16:06:47 D=C4=81vis Mos=C4=81=
ns pisze:<br>
&gt;&gt;&gt; I don&#39;t agree, I think XMPP could be good solution, while =
yes attack<br>
&gt;&gt;&gt; surface is quite large but it will be in any case, because eve=
n if you<br>
&gt;&gt;&gt; create the very minimalist chat protocol possible (let&#39;s s=
ay basically<br>
&gt;&gt;&gt; use<br>
&gt;&gt;&gt; asymmetric cryptography for messages which are plaintext witho=
ut any<br>
&gt;&gt;&gt; features) you still can have bugs in cryptography library, net=
work<br>
&gt;&gt;&gt; stack,<br>
&gt;&gt;&gt; OS/kernel. This part will be same no matter what messaging pro=
tocol you<br>
&gt;&gt;&gt; use.<br>
&gt;&gt;<br>
&gt;&gt; Exactly. And that&#39;s an argument for NOT minimizing the attack =
surface<br>
&gt;&gt; beyond<br>
&gt;&gt; these problems... how exactly?<br>
&gt;&gt;<br>
&gt;&gt; I mean, your argument is basically: &quot;don&#39;t wash your hand=
s, as there might<br>
&gt;&gt; be<br>
&gt;&gt; salmonella in the eggs anyway&quot;. Dafuq?<br>
&gt;<br>
&gt; I&#39;m going to defend XMPP too, but on the grounds that it&#39;s an =
already<br>
&gt; established and widely used protocol, the overhead is minimal looking<=
br>
&gt; from a modern point of view (even when not using the potentially<br>
&gt; privacy-risky elements) and it was designed to be extendable. These ar=
e<br>
&gt; imo good arguments to use xmpp instead of creating something new (agai=
n<br>
&gt; :-P ).<br>
<br>
</div>As has been said over the decades: start correct, &#39;good&#39; easy=
<br>
to maintain code, secure of course, and optimize later,<br>
eg 1-1 mapping from XMPP (XML I assume?) to say msgpack:<br>
MessagePack: <a href=3D"http://msgpack.org/" target=3D"_blank">http://msgpa=
ck.org/</a> - a fast, binary replacement for JSON<br>
<br>
Such optimizations ought be behind a library anyway!<br>
(From user app point of view.)<br>
<br>
As someone else said, think of the stack, separate the concerns:<br>
IP, user addressing, persistence of ids, persistence of addresses,<br>
crypting, dht, distributed storage, libs, user apps.<br>
<br>
For impatient programmers wanting instant gratification,<br>
work on one layer in the stack.<br>
<br>
</blockquote></div><br></div>
</blockquote></div><br></div></div><span class=3D"HOEnZb"><font color=3D"#8=
88888">
-- <br>
Sent from my Android device with K-9 Mail. Please excuse my brevity.</font>=
</span></div></blockquote></div><br></div></div></div>

--001a113a60b4b79c9104fdb3f0bc--

