From cypherpunks-bounces@cpunks.org  Fri Sep 20 08:16:11 2013
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id r8KCG9xW004418;
	Fri, 20 Sep 2013 08:16:09 -0400
Received: from leitl.org (v8.ativel.com [164.177.174.8])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id r8KCG5iv004414
 (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT)
 for <cypherpunks@al-qaeda.net>; Fri, 20 Sep 2013 08:16:07 -0400
Received: by leitl.org (Postfix, from userid 1000)
 id EA9EE543E45; Fri, 20 Sep 2013 14:16:04 +0200 (CEST)
Date: Fri, 20 Sep 2013 14:16:04 +0200
From: Eugen Leitl <eugen@leitl.org>
To: cypherpunks@al-qaeda.net, info@postbiota.org, zs-p2p@zerostate.is
Subject: Re: [Cryptography] The paranoid approach to crypto-plumbing
Message-ID: <20130920121604.GE10405@leitl.org>
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha1;
 protocol="application/pgp-signature"; boundary="SsUnFlT2ZYWLdgmP"
Content-Disposition: inline
User-Agent: Mutt/1.5.21 (2010-09-15)
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 5040
Lines: 106


--SsUnFlT2ZYWLdgmP
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

----- Forwarded message from John Kelsey <crypto.jmk@gmail.com> -----

Date: Wed, 18 Sep 2013 00:42:47 -0400
=46rom: John Kelsey <crypto.jmk@gmail.com>
To: Sandy Harris <sandyinchina@gmail.com>
Cc: Cryptography <cryptography@metzdowd.com>
Subject: Re: [Cryptography] The paranoid approach to crypto-plumbing
X-Mailer: iPad Mail (10B329)

For hash functions, MACs, and signature schemes, simply concatenating hashe=
s/MACs/signatures gives you at least the security of the stronger one.  Jou=
x multicollisions simply tell us that concatenating two or more hashes of t=
he same size doesn't improve their resistance to brute force collsion searc=
h much.  The only thing you have to be sure of there is that the MAC and si=
gnature functions aren't allowed access to each others' secret keys or inte=
rnal random numbers.  Otherwise, MAC#1 can always take the value of MAC#2's=
 key.  This is just

message, signature 1, signature 2

where the signatures are over the message only. =20

For encryption algorithms, superencryption works fine.  You can first encry=
pt with AES-CBC, then encrypt with Twofish-CFB, then with CAST5 in CFB mode=
=2E  Again, assuming you are not letting the algorithms know each others' i=
nternal state or keys, if any of these algorithms are resistant to chosen p=
laintext attacks, then the combination will be.  This doesn't guarantee tha=
t the combination will be any stronger than the strongest of these, but it =
will be no weaker.  (Biham and later Wagner had some clever attacks against=
 some chaining modes using single-DES that showed that you wouldn't always =
get anything stronger than one of the ciphers, but if any of these layers i=
s strong, then the whole encryption is strong. =20

An alternative approach is to construct a single super-block-cipher, say AE=
S*Twofish*SERPENT, and use it in a standard chaining mode.  However, then y=
ou are still vulnerable to problems with your chaining mode--the CBC reacti=
on attacks could still defeat a system that used AES*Twofish*SERPENT in CBC=
 mode, but not AES-CBC followed by Twofish-CFB followed by SERPENT-CTR. =20

For key-encryption or transport, I think it's a little more complicated.  I=
f I need six symmetric keys and want to use three public key methods (say E=
CDH, NTRU, RSA) to transport the key, I've got to figure out a way to get t=
he benefit from all these key exchange mechanisms to all six symmetric keys=
, in a way that I'm sure will not leak any information about any of them.  =
Normally we would use a KDF for this, but we don't want to trust any one cr=
ypto algorithm not to screw us over. =20

I think we can get this if we assume that we can have multiple KDFs that ha=
ve secrets from one another.  That is, I compute=20

KDF1( key1, combined key exchange input) XOR KDF2( key2, combined key excha=
nge input)

The reason the two KDFs need keys that are secret from each other is becaus=
e otherwise, KDF1 could just duplicate KDF2 and we'd get an all-zero set of=
 keys.  If KDF2 is strong, then KDF1 can't generate an output string with a=
ny relationship to KDF2's string when it doesn't know all the input KDF2 is=
 getting. =20

I agree with Perry that this is probably padlocking a screen door.  On the =
other hand, if we want to do it, we want to make sure we guard against as m=
any bad things as possible.  In particular, it would be easy to do this in =
such a way that we missed chaining mode/reaction type attacks. =20

--John
_______________________________________________
The cryptography mailing list
cryptography@metzdowd.com
http://www.metzdowd.com/mailman/listinfo/cryptography

----- End forwarded message -----
--=20
Eugen* Leitl <a href=3D"http://leitl.org">leitl</a> http://leitl.org
______________________________________________________________
ICBM: 48.07100, 11.36820 http://ativel.com http://postbiota.org
AC894EC5: 38A5 5F46 A4FF 59B8 336B  47EE F46E 3489 AC89 4EC5

--SsUnFlT2ZYWLdgmP
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: Digital signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)

iQIcBAEBAgAGBQJSPDyEAAoJEPRuNImsiU7FLpYQAI0Q3Hn3AF5IwaVcwLEokSGO
yjKrvkajfWGYMKbRYvjnBMGwKr2aVAvfhOq3qjIb3MPoPPdqxJ7XXfiQbYOux7EB
WGFTI8s3nHim5vpfD5XD1hsz07b6hoZFNkqzF7lMKNVPNl0au6pJyoU0KuDYQKre
7fkOUyNLAsTEaZvUBOxAdr5QaMvN3ju/EbSoUXVEphEVwjgKcRXyhgwvX1njv20H
wobp6peTpScHC1qahfqz2LJsiPD4dHvK+CYDnEAt4A6NkIq0AoxPOBLktvAqssSk
h/mB6imYd5aesffVwEpArRex9oNYyWimvnE07JJmYuUR4FF8MDixs1UYesdZx5Qf
9wZIk6CThzy73ebngqORwqKdD2rwjp/ZM8eNY3XTPGbw8/lxIWwGmOGjMxiWBv9K
NOIHa8Wrbf1AZBdRUpr/bt2F+A1CvH+SjE4DpnmgQR3qA3hxSFfSJEx+Qdncr060
jIPFI2LQCA+OfMDtk6PCsZETyrT4Ct8Nrt1xS7VCoJfeZMFzagdCPWR6VmsTFSii
Fjq6tNcV7f93YNBwtqzwdPc6FyETqIzjEWF7L1naAyG8/rjN+O5H4lgYwsASURJq
GWESZ/h/8IW1buosByRTm2ZKpwR7p+sHlIGd84g5FtQziJFGrfCK89XTwG5iXPnp
QqmzVjti2hzRpxxmCt5q
=Y/Ui
-----END PGP SIGNATURE-----

--SsUnFlT2ZYWLdgmP--

