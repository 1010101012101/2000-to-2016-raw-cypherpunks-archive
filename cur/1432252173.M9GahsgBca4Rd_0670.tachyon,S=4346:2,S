From owner-cypherpunks-outgoing@ssz.com  Wed Sep 27 19:54:10 2000
Received: from MIT.EDU (SOUTH-STATION-ANNEX.MIT.EDU [18.72.1.2])
	by positron.mit.edu (8.9.3/8.9.3) with SMTP id TAA05743
	for <kwantam@positron.mit.edu>; Wed, 27 Sep 2000 19:54:10 -0400
Received: from einstein.ssz.com by MIT.EDU with SMTP
	id AA08650; Wed, 27 Sep 00 19:53:20 EDT
Received: (from mdom@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id SAA18040
	for cypherpunks-outgoing; Wed, 27 Sep 2000 18:56:28 -0500
Received: (from cpunks@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id SAA18014
	for cypherpunks@ssz.com; Wed, 27 Sep 2000 18:56:22 -0500
Received: from koeln.ccc.de (koeln.ccc.de [62.159.58.138])
	by einstein.ssz.com (8.8.8/8.8.8) with SMTP id SAA18004
	for <cpunks@ssz.com>; Wed, 27 Sep 2000 18:56:17 -0500
Received: (qmail 15439 invoked by uid 1015); 27 Sep 2000 23:32:31 -0000
X-Mailsort: cypherpunks
Received: (qmail 15432 invoked by uid 0); 27 Sep 2000 23:32:31 -0000
Received: from malcolm.ailis.de (62.159.58.30)
  by koeln.ccc.de with SMTP; 27 Sep 2000 23:32:31 -0000
Received: (qmail 7266 invoked by uid 1002); 27 Sep 2000 23:33:32 -0000
Received: (qmail 7261 invoked by uid 1007); 27 Sep 2000 23:33:32 -0000
Delivered-To: ailis_de-drt@ailis.de
Received: (qmail 7256 invoked by uid 10); 27 Sep 2000 23:33:32 -0000
Received: from UNKNOWN(198.182.196.32), claiming to be "domains.invweb.net"
 via SMTP by malcolm, id smtpdYSkLsa; Thu Sep 28 01:33:27 2000
Received: (from openpgp@localhost)
	by domains.invweb.net (8.9.3/8.9.3) id TAA06213;
	Wed, 27 Sep 2000 19:33:47 -0400
Date: Wed, 27 Sep 2000 19:33:47 -0400
Message-Id: <3.0.6.32.20000927162645.0086b650@pop.sprynet.com>
Originator: cypherpunks@openpgp.net
From: David Honig <honig@sprynet.com>
To: Multiple recipients of list <cypherpunks@openpgp.net>
Subject: CDR: Re: Lions and Tigers and Backdoors, oh, my...
X-Listprocessor-Version: 6.0 -- ListProcessor by Anastasios Kotsikonas
X-Comment: All list traffic is being monitored by the FEDS!!
Content-Type: text/plain; charset="us-ascii"
References: <970093245.39d272bd4ec4a@webmail.cotse.com>
In-Reply-To: <a0431010ab5f82845c510@[207.111.242.117]>
X-Loop: openpgp.net
Sender: owner-cypherpunks@ssz.com
Precedence: bulk
Reply-To: cypherpunks@ssz.com
X-Mailing-List: cypherpunks@ssz.com
X-List-Admin: list@ssz.com
X-Loop: ssz.com
X-Language: English, Russian, German
Status: O
Content-Length: 1938
Lines: 59

At 06:48 PM 9/27/00 -0400, Tim May wrote:
>
>There is no real reason for crypto to be built into complex products, 
>at least not when those products are well-suited for handling text 
>(and even files).
...
>To wit, who really cares whether Netscape 4.08 or 4.07 has crypto 
>built in so long as a robust, non-trapdoored crypto program is 
>available/
>
>We lose a lot of the advantages of orthogonality (independent 
>programs, modules) when we seek "all in one" solutions. And we make 
>the job of the NSA and SDECE and GCHQ spooks a lot easier when we 
>adopt all-in-one solutions.

Yes but many potential users of crypto will not put up with too many
extra actions, e.g., going to a command prompt, running pgp, opening the
ciphered file, cutting and pasting.  You can argue that, e.g., they should
all be shot :-), but isn't the goal to get more traffic (even uninteresting
traffic) encrypted? 

Modularity *is* useful for keeping things simple enough to analyze, but
isn't a library with a well-defined API sufficient?  [If your OS supports it, 
there might be slightly more decoupled ways (vs. linking) to talk to the
crypto process, e.g., pipes, clipboards, rpc.  Is this more in line with what
you're thinking?]

How would you modularize SSL?  Distribute a proxylike program that an app
talks to when it wants to go secure?   How do you modularize PGPfone?
PGPdisk?

Even in a bloated integrated app, clean modular design can keep the 
analysis tractable.  If the app talks to the crypto module, you'll likely
have to trust the app whether the crypto is linked-in or whether it is an
secure isolated process (after all, the app is capturing/rendering the
plaintext..)

It does create a single-point-of-failure if everyone uses the same 
library (or other independent 'module'), but on the other hand, everyone
rolling their own is likely to introduce more fatal flaws.  

Curious what the alternatives are,
dh











  





