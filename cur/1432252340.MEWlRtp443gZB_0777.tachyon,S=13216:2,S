From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Tue Jul 29 12:11:30 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pa0-f45.google.com (mail-pa0-f45.google.com [209.85.220.45])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s6TGBTvK023688
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Tue, 29 Jul 2014 12:11:30 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=GH4HToGe;
	dkim-adsp=none (unprotected policy); dkim-atps=neutral
Received: by mail-pa0-f45.google.com with SMTP id eu11so12567475pac.18
        for <rsw@jfet.org>; Tue, 29 Jul 2014 09:10:58 -0700 (PDT)
X-Received: by 10.66.251.132 with SMTP id zk4mr3043553pac.47.1406650257965;
        Tue, 29 Jul 2014 09:10:57 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.3.197 with SMTP id e5csp302411pde;
        Tue, 29 Jul 2014 09:10:57 -0700 (PDT)
X-Received: by 10.66.117.38 with SMTP id kb6mr2998103pab.37.1406650257133;
        Tue, 29 Jul 2014 09:10:57 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id eb4si21537324pbb.113.2014.07.29.09.10.55
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Tue, 29 Jul 2014 09:10:55 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net;
       dkim=fail header.i=@gmail.com
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s6TG91vs023667;
	Tue, 29 Jul 2014 12:09:17 -0400
Received: from mail-oi0-f52.google.com (mail-oi0-f52.google.com
 [209.85.218.52])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s6TG8tfU023663
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Tue, 29 Jul 2014 12:08:57 -0400
Received: by mail-oi0-f52.google.com with SMTP id h136so7473689oig.25
 for <cypherpunks@cpunks.org>; Tue, 29 Jul 2014 09:08:24 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:sender:in-reply-to:references:from:date:message-id
 :subject:to:cc:content-type;
 bh=0ZEeeMAerM0ujbc7NSxJRBiTQRepFnQvhWH750J2GJI=;
 b=GH4HToGeZqUUbhWHpB4D5mYLt/yLFunjM4tM+qh/hMAVNT+FzjQu+PcX7VlWF3Swj7
 4CZ74ILTI+02xjl/GF6XsEwwmePCljvbi6e9yQ/fHtdWAPn3Ssh8DTtd+m6/QS8t4P+2
 hdkrttOhaOVr8K3pWtwYPdB/mh6VCmCUD6RlQisb/sTQFwCcuJ/boB85DbhBwyZ1QbOw
 yNA8e2xO/EQ3Q6v3//7BIxa+9ey4P9YgIENJxOOivsXe1OIBd0I6zHgv8rXvs5TjzmKH
 SneS4WbwSuf1V4mccWgv8kCZYQ47+HU7ZMOaxt4t7qNWP6RG/qJFDofuqRN1iGXXK+D/
 WjrQ==
X-Received: by 10.182.47.195 with SMTP id f3mr4761105obn.61.1406650104104;
 Tue, 29 Jul 2014 09:08:24 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.76.73.3 with HTTP; Tue, 29 Jul 2014 09:08:04 -0700 (PDT)
In-Reply-To: <20140729141413.GB2848@sivokote.iziade.m$>
References: <20140728152650.GA2531@sivokote.iziade.m$>
 <CAHWD2r+c0dA7oxysb69oZEcxcADUPfGLpLd2X0Q3hU1iTxcCHg@mail.gmail.com>
 <20140728163527.GC2531@sivokote.iziade.m$>
 <CAHWD2rKrwACtitw3CegHehWpbRETHpQN-DABUC59jAYzf20O_w@mail.gmail.com>
 <20140729141413.GB2848@sivokote.iziade.m$>
Date: Tue, 29 Jul 2014 18:08:04 +0200
X-Google-Sender-Auth: mTBoYKRnhkw86tsfGFa4RmmzjlU
Message-ID: <CAHWD2rKH-DzbJGxj8-yr+0zWc68gvtC=uDVXvBL_tGxzfuMxCw@mail.gmail.com>
Subject: Re: Alleged "microkernel mathematically proven to be bug free"
To: Georgi Guninski <guninski@guninski.com>
Content-Type: multipart/alternative; boundary=089e0158afcac74ce704ff573fd6
Cc: "cypherpunks@cpunks.org" <cypherpunks@cpunks.org>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: =?UTF-8?Q?Lodewijk_andr=C3=A9_de_la_porte?= <l@odewijk.nl>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 8307
Lines: 187

--089e0158afcac74ce704ff573fd6
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

>
> Care to elaborate? I can mathematically prove any theorem, then
> implement it in C and segfault the kernel. How is this different?


These proofs tie a meta-specification to the actual code. Look into the
sort of proofs they use. Basically they're saying "the code does what we
said it has to. Only if we accidentally told it to go skynet on us, it will
work perfectly". Things like segfaults would be pretty clearly not as
specified.

But of course the specification may also contain bugs as opposed to the
human-intended specification. But this is also something they explain, just
read about their proofs and proof system.

(This is all IIRC from last time I checked it, which is a pretty while ago)




2014-07-29 16:14 GMT+02:00 Georgi Guninski <guninski@guninski.com>:

> On Mon, Jul 28, 2014 at 07:04:05PM +0200, Lodewijk andr=C3=A9 de la porte=
 wrote:
> > 2014-07-28 18:35 GMT+02:00 Georgi Guninski <guninski@guninski.com>:
> >
> > > > I have a rough outline for a "cloud computing grid" that verifiably=
:
> > >
> > > verifiably? _really_ provable stuff is a very scarce resource IMHO
> > > (especially in crypto. do you need crypto? Do you need P \ne NP?).
> > >
> >
> > Yes, it needs crypto. I said verifably because "proving" an untamperabl=
e
> > hardware box (IOW: you can only plug it in, nothing else) is what the
> spec
> > says it is, is, well, impossible.
> >
>
> Don't think what you wish is possible, but
> don't mind you dreaming :)
>

Aha, but it is possible :)

Dream along if you like!

IIRC _theoretically_ it is possible to run
> trusted program on untrusted hardware
> with the catch that you need some additional
> "proof" - this was a paper can't find at the
> moment.
>

I think you're talking about trusted computing, and I'm not talking about
trusted computing :). I've seen some examples of trusted computing but the
operation set was always not Turing complete. It might work, actually, but
I don't see how.

The system I'm talking about it not just a software system. It also
involves hardware. The hardware will be created centrally, in batches.
Probably by a third party and certainly checked by several independent
observers to make sure it goes according to an open sourced specification.

The devices from those batches can be plugged in and maintained by
untrusted parties. IOW: they're shipped off to individuals who'll plug them
in anywhere. The devices are tamper-proofed to such an extend that that is
possible without exposing the sensitive data kept on them. The software
that (as verified by the third parties present in manufacture) runs on the
devices cannot snoop on the programs running on the system.

The devices network together, likely over the Internet but maybe also
radio. They Onion route all traffic. Etc. etc. Programs run on them but
they cannot know what the program is doing.

They're not updateable. They will all slowly fail and to make sure there's
still places you can run your software there is generations. So a next
batch forms a different computing grid.

I'm repeating bits and peaces, but I want to be sure that you can see that
it's a hardware design made useful by a software solution to fault
proofness and program "location".

--089e0158afcac74ce704ff573fd6
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><blockquote class=3D"gmail_quote" style=3D"margin:0px 0px =
0px 0.8ex;border-left-width:1px;border-left-color:rgb(204,204,204);border-l=
eft-style:solid;padding-left:1ex"><span style=3D"font-family:arial,sans-ser=
if;font-size:13px">Care to elaborate? I can mathematically prove any theore=
m, then<br>

</span><span style=3D"font-family:arial,sans-serif;font-size:13px">implemen=
t it in C and segfault the kernel. How is this different?</span></blockquot=
e><div><br></div><div>These proofs tie a meta-specification to the actual c=
ode. Look into the sort of proofs they use. Basically they&#39;re saying &q=
uot;the code does what we said it has to. Only if we accidentally told it t=
o go skynet on us, it will work perfectly&quot;. Things like segfaults woul=
d be pretty clearly not as specified.</div>

<div><br></div><div>But of course the specification may also contain bugs a=
s opposed to the human-intended specification. But this is also something t=
hey explain, just read about their proofs and proof system.</div><div>
<br>
</div><div>(This is all IIRC from last time I checked it, which is a pretty=
 while ago)</div><div><br></div><div><br></div><div class=3D"gmail_extra"><=
br><br><div class=3D"gmail_quote">2014-07-29 16:14 GMT+02:00 Georgi Guninsk=
i <span dir=3D"ltr">&lt;<a href=3D"mailto:guninski@guninski.com" target=3D"=
_blank">guninski@guninski.com</a>&gt;</span>:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"><div class=3D"">On Mon, Jul 28, 2014 at 07:0=
4:05PM +0200, Lodewijk andr=C3=A9 de la porte wrote:<br>
&gt; 2014-07-28 18:35 GMT+02:00 Georgi Guninski &lt;<a href=3D"mailto:gunin=
ski@guninski.com">guninski@guninski.com</a>&gt;:<br>
&gt;<br>
&gt; &gt; &gt; I have a rough outline for a &quot;cloud computing grid&quot=
; that verifiably:<br>
&gt; &gt;<br>
&gt; &gt; verifiably? _really_ provable stuff is a very scarce resource IMH=
O<br>
&gt; &gt; (especially in crypto. do you need crypto? Do you need P \ne NP?)=
.<br>
&gt; &gt;<br>
&gt;<br>
&gt; Yes, it needs crypto. I said verifably because &quot;proving&quot; an =
untamperable<br>
&gt; hardware box (IOW: you can only plug it in, nothing else) is what the =
spec<br>
&gt; says it is, is, well, impossible.<br>
&gt;<br>
<br>
</div>Don&#39;t think what you wish is possible, but<br>
don&#39;t mind you dreaming :)<br></blockquote><div><br></div><div>Aha, but=
 it is possible :)</div><div>=C2=A0</div><div>Dream along if you like!</div=
><div><br></div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8e=
x;border-left:1px #ccc solid;padding-left:1ex">


IIRC _theoretically_ it is possible to run<br>
trusted program on untrusted hardware<br>
with the catch that you need some additional<br>
&quot;proof&quot; - this was a paper can&#39;t find at the<br>
moment.<br></blockquote><div><br></div><div>I think you&#39;re talking abou=
t trusted computing, and I&#39;m not talking about trusted computing :). I&=
#39;ve seen some examples of trusted computing but the operation set was al=
ways not Turing complete. It might work, actually, but I don&#39;t see how.=
</div>

<div>=C2=A0</div></div>The system I&#39;m talking about it not just a softw=
are system. It also involves hardware. The hardware will be created central=
ly, in batches. Probably by a third party and certainly checked by several =
independent observers to make sure it goes according to an open sourced spe=
cification.=C2=A0</div>

<div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">The devices=
 from those batches can be plugged in and maintained by untrusted parties. =
IOW: they&#39;re shipped off to individuals who&#39;ll plug them in anywher=
e. The devices are tamper-proofed to such an extend that that is possible w=
ithout exposing the sensitive data kept on them. The software that (as veri=
fied by the third parties present in manufacture) runs on the devices canno=
t snoop on the programs running on the system.</div>

<div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">The devices=
 network together, likely over the Internet but maybe also radio. They Onio=
n route all traffic. Etc. etc. Programs run on them but they cannot know wh=
at the program is doing.=C2=A0</div>

<div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">They&#39;re=
 not updateable. They will all slowly fail and to make sure there&#39;s sti=
ll places you can run your software there is generations. So a next batch f=
orms a different computing grid.</div>

<div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">I&#39;m rep=
eating bits and peaces, but I want to be sure that you can see that it&#39;=
s a hardware design made useful by a software solution to fault proofness a=
nd program &quot;location&quot;.</div>

</div>

--089e0158afcac74ce704ff573fd6--

