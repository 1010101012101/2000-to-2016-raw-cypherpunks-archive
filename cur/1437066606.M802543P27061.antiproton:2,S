Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t6GH9Ujn027046;
	Thu, 16 Jul 2015 13:09:33 -0400
Received: from ligemail.lig.net (lig.net [64.69.38.223])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t6GH9RTo027042
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Thu, 16 Jul 2015 13:09:28 -0400
Received: from localhost (localhost [127.0.0.1])
 by ligemail.lig.net (Postfix) with ESMTP id 0035B12DDBCD
 for <cypherpunks@cpunks.org>; Thu, 16 Jul 2015 10:09:27 -0700 (PDT)
X-Virus-Scanned: Debian amavisd-new at lig.net
Received: from ligemail.lig.net ([127.0.0.1])
 by localhost (lig.lig.net [127.0.0.1]) (amavisd-new, port 10024)
 with ESMTP id fwIqH5ius9s4 for <cypherpunks@cpunks.org>;
 Thu, 16 Jul 2015 10:09:25 -0700 (PDT)
Received: from imac.local (c-73-170-87-105.hsd1.ca.comcast.net [73.170.87.105])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested) (Authenticated sender: sdw)
 by ligemail.lig.net (Postfix) with ESMTPSA id D3FBB12DDBC1
 for <cypherpunks@cpunks.org>; Thu, 16 Jul 2015 10:09:24 -0700 (PDT)
Message-ID: <55A7E543.7010505@lig.net>
Date: Thu, 16 Jul 2015 10:09:23 -0700
From: "Stephen D. Williams" <sdw@lig.net>
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10;
 rv:31.0) Gecko/20100101 Thunderbird/31.7.0
MIME-Version: 1.0
To: cypherpunks@cpunks.org
Subject: Re: an ominous comment
References: <20150714155203.826F52282E2@palinka.tinho.net>
 <55A540A7.6080808@lig.net> <55A567F3.1000006@m-o-o-t.org>
In-Reply-To: <55A567F3.1000006@m-o-o-t.org>
Content-Type: multipart/alternative;
 boundary="------------080308080900080308070600"
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Lines: 124

This is a multi-part message in MIME format.
--------------080308080900080308070600
Content-Type: text/plain; charset=windows-1252; format=flowed
Content-Transfer-Encoding: 7bit

On 7/14/15 12:50 PM, Peter Fairbrother wrote:
> On 14/07/15 18:02, Stephen D. Williams wrote:
>> Everything will be run in the cloud and browser because it is, overall,
>> a better computation model.
>
>
>
> It is? Why?

The browser provides a super feature / security / quality / portable baseline that is rapidly improving.  Only a few alternatives 
come close and they all fall short in major ways: Qt (which greatly relies on browser tech now), Java & C#, Unity, UnReal, etc. 
Certain things are still better in those alternatives, but less and less.  With Javascript optimization, ASM.js, SIMD.js, WebGL, 
etc., browsers have, for most purposes, resolved the computational gap while having massively better security stance.  
WebComponents, the new binary Javascript format, along with WebRTC, WebUSB, and other features, we're getting the cleanest app and 
platform model we've seen so far.

The key architectural questions about remote communication involve security, efficiency, stability, portability, etc.  While it 
isn't perfect, web tech provides a nice enough model for expressing the highest level logical communication needed in secure (enough 
for most purposes), flexible, efficient enough, and low latency enough for most purposes ways.  Solutions like Swagger, Go, and 
other modern techniques are much cleaner and simpler than previous clunky solutions.

Most of the most interesting web apps now run almost completely in the browser.  The server side sends the original page and code, 
manages authentication, then acts mostly as a database with minimal logic.  As long as the API doesn't rely solely on client-side 
validation and other things that could be gamed, it can still be secure.  Because it's now easy to run the same code on the front 
and back, complex validation could be done on the front-end for low latency and the backend for actual security, for instance.

There are plenty of things that could be better and will get better, but regardless the power & ease gap between web app 
development, for most situations, is only increasing.  Emulating any substantial subset of browser-level UI and other features in a 
non-browser desktop app is nearly impossible now.

>
>
>
> -- Peter Fairbrother

sdw


--------------080308080900080308070600
Content-Type: text/html; charset=windows-1252
Content-Transfer-Encoding: 8bit

<html>
  <head>
    <meta content="text/html; charset=windows-1252"
      http-equiv="Content-Type">
  </head>
  <body bgcolor="#FFFFFF" text="#000066">
    <div class="moz-cite-prefix">On 7/14/15 12:50 PM, Peter Fairbrother
      wrote:<br>
    </div>
    <blockquote cite="mid:55A567F3.1000006@m-o-o-t.org" type="cite">On
      14/07/15 18:02, Stephen D. Williams wrote:
      <br>
      <blockquote type="cite">Everything will be run in the cloud and
        browser because it is, overall,
        <br>
        a better computation model.
        <br>
      </blockquote>
      <br>
      <br>
      <br>
      It is? Why?
      <br>
    </blockquote>
    <br>
    The browser provides a super feature / security / quality / portable
    baseline that is rapidly improving.  Only a few alternatives come
    close and they all fall short in major ways: Qt (which greatly
    relies on browser tech now), Java &amp; C#, Unity, UnReal, etc. 
    Certain things are still better in those alternatives, but less and
    less.  With Javascript optimization, ASM.js, SIMD.js, WebGL, etc.,
    browsers have, for most purposes, resolved the computational gap
    while having massively better security stance.  WebComponents, the
    new binary Javascript format, along with WebRTC, WebUSB, and other
    features, we're getting the cleanest app and platform model we've
    seen so far.<br>
    <br>
    The key architectural questions about remote communication involve
    security, efficiency, stability, portability, etc.  While it isn't
    perfect, web tech provides a nice enough model for expressing the
    highest level logical communication needed in secure (enough for
    most purposes), flexible, efficient enough, and low latency enough
    for most purposes ways.  Solutions like Swagger, Go, and other
    modern techniques are much cleaner and simpler than previous clunky
    solutions.<br>
    <br>
    Most of the most interesting web apps now run almost completely in
    the browser.  The server side sends the original page and code,
    manages authentication, then acts mostly as a database with minimal
    logic.  As long as the API doesn't rely solely on client-side
    validation and other things that could be gamed, it can still be
    secure.  Because it's now easy to run the same code on the front and
    back, complex validation could be done on the front-end for low
    latency and the backend for actual security, for instance.<br>
    <br>
    There are plenty of things that could be better and will get better,
    but regardless the power &amp; ease gap between web app development,
    for most situations, is only increasing.  Emulating any substantial
    subset of browser-level UI and other features in a non-browser
    desktop app is nearly impossible now.<br>
    <br>
    <blockquote cite="mid:55A567F3.1000006@m-o-o-t.org" type="cite">
      <br>
      <br>
      <br>
      -- Peter Fairbrother
      <br>
    </blockquote>
    <br>
    sdw<br>
    <br>
  </body>
</html>

--------------080308080900080308070600--

