From owner-cryptography+rsw=mit.edu@wasabisystems.com  Mon Mar 24 10:31:52 2003
Return-Path: <owner-cryptography+rsw=mit.edu@wasabisystems.com>
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.7.7.76])
	by positron.jfet.org (8.11.6/8.11.6) with ESMTP id h2OFVlN26188
	for <rsw@opamp.org>; Mon, 24 Mar 2003 10:31:47 -0500
Received: from mononoke.wasabisystems.com (mononoke.wasabisystems.com [166.84.0.13])
	by fort-point-station.mit.edu (8.12.4/8.9.2) with ESMTP id h2OFVlQt023896
	for <rsw@mit.edu>; Mon, 24 Mar 2003 10:31:47 -0500 (EST)
Received: by mononoke.wasabisystems.com (Postfix, from userid 96)
	id 82EA45E487; Mon, 24 Mar 2003 10:23:54 -0500 (EST)
X-Original-To: cryptography@wasabisystems.com
Delivered-To: cryptography@wasabisystems.com
Received: from snark.piermont.com (snark.piermont.com [166.84.151.72])
	by mononoke.wasabisystems.com (Postfix) with ESMTP id DD6495E440
	for <cryptography@wasabisystems.com>; Mon, 24 Mar 2003 10:23:53 -0500 (EST)
Received: by snark.piermont.com (Postfix, from userid 1000)
	id 7BDC6D97CE; Mon, 24 Mar 2003 10:23:53 -0500 (EST)
X-Original-To: cryptography@wasabisystems.com
Received: from venus.phpwebhosting.com (venus.phpwebhosting.com [64.29.16.27])
	by mononoke.wasabisystems.com (Postfix) with SMTP id 2FD155E3F5
	for <cryptography@wasabisystems.com>; Sat, 22 Mar 2003 03:43:43 -0500 (EST)
Received: (qmail 20153 invoked from network); 22 Mar 2003 08:43:21 -0000
Received: from unknown (HELO hydrogen.leitl.org) (217.80.40.25)
  by venus.phpwebhosting.com with SMTP; 22 Mar 2003 08:43:21 -0000
Received: by hydrogen.leitl.org (Postfix, from userid 501)
	id 8A297126804; Sat, 22 Mar 2003 03:51:22 -0500 (EST)
Received: from localhost (localhost [127.0.0.1])
	by hydrogen.leitl.org (Postfix) with ESMTP
	id 86D04126803; Sat, 22 Mar 2003 09:51:22 +0100 (CET)
Date: Sat, 22 Mar 2003 09:51:22 +0100 (CET)
From: Eugen Leitl <eugen@leitl.org>
To: Cryptography List <cryptography@wasabisystems.com>
Cc: cypherpunks@lne.com
Subject: Re: Brumley & Boneh timing attack on OpenSSL (fwd)
Message-ID: <Pine.LNX.4.44.0303220947570.15394-100000@hydrogen.leitl.org>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-cryptography@wasabisystems.com
Precedence: bulk
Status: O
Content-Length: 2903
Lines: 50


Some clarification by Peter Gutmann <pgut001@cs.auckland.ac.nz> on why 
cryptlib doesn't do timing attack resistance default:

Peter Gutmann <pgut001@cs.auckland.ac.nz>:
 
cryptlib was never intended to be a high-performance SSL server (the docs are
fairly clear on this), and I don't think anyone is using it to replace Apache
or IIS.  OTOH it is used in a number of specialised environments such as closed
environments, embedded systems and mainframes.  For example two real-world uses
of the cryptlib SSL server are in embedded environment A and mainframe
environment B.

  In A, the processing is handled by a low-power embedded processor.  It takes
  10-15s to perform an SSL handshake, and that's after the code has been
  optimised to death to squeeze every possible bit of performance out of it.
  Performing the necessary 1.5M queries at 15s each would take approximately 8
  1/2 months at 100% CPU load (meaning that the device is unable to perform any
  other operations in that entire time).  This is unlikely to go unnoticed,
  given that it's polled from other devices for status updates.

  In B, CPU resources are so scarce that the implementation uses null cipher
  suites because it can't afford the overhead of even RC4 for encryption
  (admittedly this required a custom code hack, cryptlib doesn't normally
  support null encryption suites).  After about 100 or so attempts at a full
  SSL handshake, klaxons would sound and blue-suited troops would deploy onto
  the raised flooring to determine where all the CPU time is going.

In neither of these environments (and various similar ones) would a side-
channel attack requiring 1M or so queries (e.g. this one, or the Bleichenbacher
attack, or the Klima-Pokorny-Rosa attack, which cryptlib shouldn't be
vulnerable to since I'm paranoid about error reporting) be terribly feasible.
OTOH blinding does produce a noticeable slowdown for a process that's already
regarded by its users as unacceptably slow and/or CPU-intensive (I have some
users who've hacked the key-exchange process to use fixed shared keys because
they just can't spare the CPU time to do a real handshake, e.g. by injecting
the shared key into the SSL session cache so you just do a pseudo-resume for
each new connection).  For this reason, cryptlib makes the use of sidechannel-
attack-protection an optional item, which must be selected by the user (via use
of the blinding code, now admittedly I should probably make this a bit easier
to do in future releases than having to hack the source :-).  This is not to
downplay the seriousness of the attack, merely to say that in some cases the
slowdown/CPU consumption vs.attack risk doesn't make it worthwhile to defend
against.



---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending "unsubscribe cryptography" to majordomo@wasabisystems.com

