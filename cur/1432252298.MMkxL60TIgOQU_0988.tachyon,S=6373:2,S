From cypherpunks-bounces@cpunks.org  Sat Mar 22 21:12:47 2014
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s2N1BCxC027348;
	Sat, 22 Mar 2014 21:11:34 -0400
Authentication-Results: antiproton.jfet.org; dkim=pass
	reason="2048-bit key; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=uPCKMg1F;
	dkim-adsp=pass; dkim-atps=neutral
Received: from mail-qa0-f50.google.com (mail-qa0-f50.google.com
 [209.85.216.50])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s2N1B5rP027341
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Sat, 22 Mar 2014 21:11:07 -0400
Received: by mail-qa0-f50.google.com with SMTP id o15so3962006qap.37
 for <cypherpunks@cpunks.org>; Sat, 22 Mar 2014 18:10:58 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :content-type; bh=7ir8EUkTBhPE5dN5qpn8HU18XmegclOMNJ+oX9wyn90=;
 b=uPCKMg1FVV1AITMuCC+OehdVE2/g+W2MkZ9R0/TLSqUyxYvNsFR7YVJsSfDWAwuZQX
 QSL9sIPS4P2KC15yYNNlwujKx+Lghv2Zt61FI96UXt25qYhNOk4h6ViSZufXFbhYGj8D
 wKpNn3nh036k/fnLhIVaX/qrvrucKSsoZw73kv/kB5uAkgRhfIEjfTbK0SixAoL1//hW
 Z/uairZ1wXnfxXmLSNf7nIBqPJWvjLbo7NVLWAuHrzDD4GZWvWn9MLWSUM872weHAsri
 31AMFENbQtJ1PdOA1pFKfWKWfSh4xDCW6aG0QQZoTcPAShCMp4lHeFcx5qsrn9A1fWlc
 BmQg==
MIME-Version: 1.0
X-Received: by 10.140.30.98 with SMTP id c89mr62607472qgc.13.1395537058116;
 Sat, 22 Mar 2014 18:10:58 -0700 (PDT)
Received: by 10.96.109.102 with HTTP; Sat, 22 Mar 2014 18:10:58 -0700 (PDT)
In-Reply-To: <CAJVRA1SW7V+jzROgjJuzLzX_VE4M_noOk3O62iUSaY7kBru=5w@mail.gmail.com>
References: <20140322193813.GP29711@subspacefield.org>
 <CAOOXFKmxAfbJfp83kM1FavHWpP8Kcn9VVmT1k9y0vYo8QgR+yg@mail.gmail.com>
 <CAJVRA1R9sxO-P9q1_bsWs+pwW-wsN1ZyeLALnAKmS6zO+f4sTg@mail.gmail.com>
 <CAOOXFKk545hVYg+t9Jg06HjVMFpGEfiB=h6Bipcu_vn6WOcX0w@mail.gmail.com>
 <CAJVRA1SW7V+jzROgjJuzLzX_VE4M_noOk3O62iUSaY7kBru=5w@mail.gmail.com>
Date: Sat, 22 Mar 2014 18:10:58 -0700
Message-ID: <CAJVRA1T0=UX_2x8DB47NrDL1bXxmTtcGvp7hYXSdJjP-KqOTfQ@mail.gmail.com>
Subject: Fwd: [RNG] Haveged - A Simple Entropy Daemon
From: coderman <coderman@gmail.com>
To: "rng@lists.bitrot.info" <rng@lists.bitrot.info>,
        cpunks <cypherpunks@cpunks.org>
Content-Type: text/plain; charset=ISO-8859-1
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 3223
Lines: 71

fwd, and added comment at end about a "upstream distribution" of repute.


---------- Forwarded message ----------
From: coderman <coderman@gmail.com>
Date: Sat, Mar 22, 2014 at 6:06 PM
Subject: Re: [RNG] Haveged - A Simple Entropy Daemon
To: Brad Martin <yabrad@gmail.com>


On Sat, Mar 22, 2014 at 5:44 PM, Brad Martin <yabrad@gmail.com> wrote:
> ...
> When great HWRNG is working, it can be damned difficult to find the
> signatures - but they're always there. Even in the best case, cryptographers
> must whiten, if only to scramble those signatures. But the magic is in that
> underlying raw data - so unpredictable!

this too, a much longer discussion.  we are in agreement, though one point:

when FreeBSD decided against direct use of _both_ RDRAND and XSTORE,
it was not an equal dismissal.  RDRAND is specifically, and
intentionally designed without direct access to the physical entropy
sources, while XSTORE allows direct access to a userspace entropy
daemon through the MSR configuration bits.

XSTORE in raw mode, to userspace entropy daemon (rngd) that
continously monitors for catastrophic failure (as above), and then
_conservatively_ digests and folds the entropy before adding to OS
kernel entropy pool is a robust configuration.

RDRAND and RDSEED inherently crippled - if you had to pick a design,
you would pick raw access with open and independent validation of
run-time behavior with configurable conservative'ness as you so chose.

instead, NIST and FIPS push _hard_ on opaque designs without raw
access.  in turn, US Gov pushes vendors hard for NIST/FIPS compliance.
 this is just one stream of influence working against the interest of
users and strong privacy.


if you really want to do entropy without repute:
 1.: it starts with development and distribution, where every host and
runtime is seeded with distinct mastering entropy that is mixed on
first boot.**
 2.: every physical host contains two (redundant) physical entropy
sources run in continuous verification with immediate halt/panic on
dual physical source failure.
 3.: opportunistic entropy gathering daemons also running on host
including haveged, dakarand, and kernel interrupt and activity
scavenging.
 4.: virtio-random device support feed into guest OSes from host
entropy pool. (Qemu, KVM, Vbox, etc.)
 5.: at shutdown of physical host entropy state is saved to FDE
protected root volume for re-incorporation into entropy state on next
start.
 6.: as signal of care, in all mastering images and runtime ensure
that /dev/urandom links to /dev/random special device.
 7.: use the strace to confirm in every application that appropriate
entropy from /dev/*random is read when generating keys or nonces.
  [post to HN when confused about key length equivalences and
application level entropy pools...]



**  your distribution in turn is fully reproducible, and the builder
of your images provides you an installation image signed by them,
including all the other public sigs, and including the per-instance
entropy, the entirety of which is then also signed again.  you
exchanged keys in person at some point in the past, to get your first
copy of $secure_distro, and have been using meatspace authenticated
keys ever since...

