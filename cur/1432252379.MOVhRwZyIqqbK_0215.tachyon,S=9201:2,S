From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Fri Sep 26 22:07:42 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pa0-f50.google.com (mail-pa0-f50.google.com [209.85.220.50])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s8R27f4g021328
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Fri, 26 Sep 2014 22:07:42 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=FZvCWfgh;
	dkim-adsp=none (unprotected policy); dkim-atps=neutral
Received: by mail-pa0-f50.google.com with SMTP id lj1so5875138pab.23
        for <rsw@jfet.org>; Fri, 26 Sep 2014 19:07:13 -0700 (PDT)
X-Received: by 10.66.124.202 with SMTP id mk10mr36661554pab.1.1411783633372;
        Fri, 26 Sep 2014 19:07:13 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.92.9 with SMTP id ci9csp1035037pdb;
        Fri, 26 Sep 2014 19:07:12 -0700 (PDT)
X-Received: by 10.66.66.163 with SMTP id g3mr35972599pat.150.1411783632140;
        Fri, 26 Sep 2014 19:07:12 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id yo5si11859258pbb.166.2014.09.26.19.07.11
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Fri, 26 Sep 2014 19:07:12 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net;
       dkim=fail header.i=@gmail.com;
       dmarc=fail (p=NONE dis=NONE) header.from=gmail.com
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s8R261Bj021308;
	Fri, 26 Sep 2014 22:06:09 -0400
Received: from mail-oi0-f53.google.com (mail-oi0-f53.google.com
 [209.85.218.53])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s8R25wKC021304
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Fri, 26 Sep 2014 22:05:59 -0400
Received: by mail-oi0-f53.google.com with SMTP id a3so84042oib.40
 for <cypherpunks@cpunks.org>; Fri, 26 Sep 2014 19:05:30 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:from:date:message-id:subject:to:content-type;
 bh=GNO8mDxCHd3iQ2LBK0be85WI+y2qHa2gFzFhToyiJxQ=;
 b=FZvCWfghdcvfX6/sCOQwcE0+g7sLCOGVfarZwnW+QiTfR0xdjR00I8juY2XfGSchbH
 68OyB+mV0ba1iyPGvksjHwTeKxGrx9FQeCuh8ihD/f7DNF6rNpgPbCqZ1BPYFdKb3FVe
 M6jYGfaFA0NJNCJyLSi0BXUgni5GhpToGzLRY5/MquXEmFYZfDhZ8XeFWlIrM0oKBnIw
 mGRLYdnQmJ+oARjKFHCR1PohpApawS6uGdgmHol1S29sgaecthFpmnvZJzga7uV0e3DU
 9Ys3ZNAU1D1D/eUnAHdjnwMVrXm3kSZwENR0edGpKvKLYo9MN5AqYoImFhSbQgl2V8Ao
 bacw==
X-Received: by 10.60.35.6 with SMTP id d6mr14906oej.77.1411783530150; Fri, 26
 Sep 2014 19:05:30 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.60.59.8 with HTTP; Fri, 26 Sep 2014 19:05:10 -0700 (PDT)
Date: Fri, 26 Sep 2014 19:05:10 -0700
Message-ID: <CAHOTMVLTD27CCgUZOipr1+ERjpuYz2vX=ymP5rh6GXUucgm7Rw@mail.gmail.com>
Subject: Informing the user they have the wrong key
To: messaging <messaging@moderncrypto.org>, therightkey@ietf.org,
        Crypto <cryptography@metzdowd.com>, cpunks <cypherpunks@cpunks.org>,
        liberationtech <liberationtech@mailman.stanford.edu>
Content-Type: multipart/alternative; boundary=089e01228b1ad083d3050402771b
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: Tony Arcieri <bascule@gmail.com>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 4606
Lines: 81

--089e01228b1ad083d3050402771b
Content-Type: text/plain; charset=UTF-8

If we build fancy systems to detect things like misadvertised keys or MitM
attacks, how can we reasonably inform an end user what is amiss in an
actionable way that won't confuse them with too many false positives to
avoid taking action when something bad actually happens?

I recently went to SOUPS and saw a number of presentations on the general
difficulty of communicating security-actionable information to users. From
what I saw I'd say the problem is twofold:

1) How does the system provide a high confidence level that when it tries
to communicate a security-actionable event, it's fairly certain it's not a
false positive? False positives condition users to ignore security warnings

2) How do you express what's happening to the user in such a way that they
will actually take action on it and not just click-through dismiss it?

Given the wide-ranging number of scenarios, the answer will of course be
contextual, and I'd be curious to hear any replies about how systems try to
solve the "right key" user experience problem in general.

That said, the messaging use-case (in conjunction with a "key directory"
system) is particularly interesting to me.

If an end-to-end encrypted messaging system which relies on a
centrally-managed key directory (e.g. iMessage) were to by coersion or
compromise publish a poison key to their directory to facilitate a MitM
attack, but the system creators wanted to make such action obvious to their
users, how can the systems reasonably detect and reflect this in such a way
that such users aren't conditioned to ignore such alerts for routine events
(e.g. the SSH "SOMETHING NASTY" message) and actually feel compelled to
take action on that knowledge?

And then what? How can we help someone who is a victim of an attack like
this actually compile all of the necessary information for someone to
figure out what actually happened? How can encryption tools compile
incident reports that experts can scrutinize to determine what happened?

-- 
Tony Arcieri

--089e01228b1ad083d3050402771b
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div>If we build fancy systems to detect things =
like misadvertised keys or MitM attacks, how can we reasonably inform an en=
d user what is amiss in an actionable way that won&#39;t confuse them with =
too many false positives to avoid taking action when something bad actually=
 happens?</div><div><br></div><div>I recently went to SOUPS and saw a numbe=
r of presentations on the general difficulty of communicating security-acti=
onable information to users. From what I saw I&#39;d say the problem is two=
fold:</div><div><br></div><div>1) How does the system provide a high confid=
ence level that when it tries to communicate a security-actionable event, i=
t&#39;s fairly certain it&#39;s not a false positive? False positives condi=
tion users to ignore security warnings</div><div><br></div><div>2) How do y=
ou express what&#39;s happening to the user in such a way that they will ac=
tually take action on it and not just click-through dismiss it?</div><div><=
br></div><div>Given the wide-ranging number of scenarios, the answer will o=
f course be contextual, and I&#39;d be curious to hear any replies about ho=
w systems try to solve the &quot;right key&quot; user experience problem in=
 general.</div><div><br></div><div>That said, the messaging use-case (in co=
njunction with a &quot;key directory&quot; system) is particularly interest=
ing to me.</div><div><br></div><div>If an end-to-end encrypted messaging sy=
stem which relies on a centrally-managed key directory (e.g. iMessage) were=
 to by coersion or compromise publish a poison key to their directory to fa=
cilitate a MitM attack, but the system creators wanted to make such action =
obvious to their users, how can the systems reasonably detect and reflect t=
his in such a way that such users aren&#39;t conditioned to ignore such ale=
rts for routine events (e.g. the SSH &quot;SOMETHING NASTY&quot; message) a=
nd actually feel compelled to take action on that knowledge?</div><div><br>=
</div><div>And then what? How can we help someone who is a victim of an att=
ack like this actually compile all of the necessary information for someone=
 to figure out what actually happened? How can encryption tools compile inc=
ident reports that experts can scrutinize to determine what happened?</div>=
<div><br></div><div>-- <br>Tony Arcieri<br>
</div></div></div></div>

--089e01228b1ad083d3050402771b--

