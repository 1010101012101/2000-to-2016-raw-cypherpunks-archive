Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t5U9FZG8019481;
	Tue, 30 Jun 2015 05:15:40 -0400
Received: from mail-pa0-f42.google.com (mail-pa0-f42.google.com
 [209.85.220.42])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t5U9FWtb019477
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Tue, 30 Jun 2015 05:15:33 -0400
Received: by pacws9 with SMTP id ws9so2699679pac.0
 for <cypherpunks@cpunks.org>; Tue, 30 Jun 2015 02:15:25 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:sender:subject:mime-version:content-type:from
 :in-reply-to:date:cc:content-transfer-encoding:message-id:references
 :to; bh=nwHiJVxYXQOrcesZnWiyYG4KeAr7JVNVfjvbgee6xqg=;
 b=I2tzzKjlKj2drnAy9lVQxoAy92pTB6f2W0ZJM1VhlTl+e23c6UrLuY3C3WVaUqM23F
 A4y9RHa1SKTylgS+sU8/OPxgW9vHRf5iBJ3LL9Qb0+aCyB7sjeJvnN0ewSYKGfZbA2kC
 ZmXWbJR++vZMnAymhFcMx4Vi2y0xGNscMptgnHKinkS+DcDZiYnzFF0od9vGjW8dqFfd
 iixsyZttgPg8TjRMrcsJY47YWXLSv3gvVfECrknUNOITF4BXWIE+4H5mK0qZ51H7T5uq
 ZJnyBaxUKlG+9wrXoFh1iX6Y0WDqQ6f9h6IgyXkRN7UAho+TWT9QB6ngPl3bIuRm/G5R
 hOHg==
X-Gm-Message-State: ALoCoQn6ggmL7LigVDiqaHkJZBOMQD6GP01M2eep7JhE+p4PX5ZGDoFOB7ALE1Fsq4lhM0E1C0Hr
X-Received: by 10.70.22.131 with SMTP id d3mr41504866pdf.67.1435655725770;
 Tue, 30 Jun 2015 02:15:25 -0700 (PDT)
Received: from ?IPv6:2602:304:b25c:1a70:c8e6:d6ba:9510:1f41?
 ([2602:304:b25c:1a70:c8e6:d6ba:9510:1f41])
 by mx.google.com with ESMTPSA id c6sm45191565pas.39.2015.06.30.02.15.24
 (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
 Tue, 30 Jun 2015 02:15:24 -0700 (PDT)
Subject: Re: Fixing the broken GPG and HTTPS (X509) trust models with Simple
 Public Key Infrastructure (SPKI)
Mime-Version: 1.0 (Mac OS X Mail 8.2 \(2098\))
Content-Type: text/plain; charset=utf-8
From: "nymble@gmail.com" <nymble@gmail.com>
In-Reply-To: <op.x0z0u0p2bgbjo9@work-pc.lan>
Date: Tue, 30 Jun 2015 02:15:22 -0700
Message-Id: <9E24BE0A-1B1F-4CAD-9649-47F79E5F1F71@gmail.com>
References: <op.x0z0u0p2bgbjo9@work-pc.lan>
To: Seth <list@sysfu.com>
X-Mailer: Apple Mail (2.2098)
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by antiproton.jfet.org id
 t5U9FWtb019477
Cc: cypherpunks@cpunks.org
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Lines: 60

> 
> Telehash
> Enter Telehash, an encrypted network stack in which you route messages directly to a public key. The code is pretty simple
Interesting, not seen this before … currently working on something similar with hashing keys for identifiers.  This is largely for the ‘bootstraping’ of devices.

> 
> expect(mesh).to.be.an('object');
> mesh.receive(new Buffer("208cb2d0532f74acae82","hex"), pipe);
> 
> The cryptographic key is the routing address. So now we only have to accomplish one level of indirection: person to key.
> 
> Something old, something new, something borrowed, something blue. Enter SPKI and our old friend, the Granovetter diagram.
> 
> SPKI and trust in networks, not webs
> Simple Public Key Infrastructure is what we should have deployed instead of X509/HTTPS and the GPG web of trust. There are two critical differences between SPKI and X509/GPG. They are:
> 
> 1) SPKI gives users the ability to certify facts about other users, for example “bob is allowed to use my computer” can be expressed in a machine-readable fashion (s-expressions.) This lets users build their own trust architectures on an ad-hoc basis.
Glad to see SPKI brought up … but I’m partial to it’s partner SDSI intro text.  SDSI/SPKI are a very good solution that gets over the notion of ‘names’ as identity and defines a ‘key centric’ naming.  It inverts the model that a naming authority binds a unique name to a key, to a unique key being bound to possible non-unique names.

That said - SDSI/SPKI has not been adopted for some good reasons … it has some issues.  The delegation lacks adiquate constraint limitations. S-expressions really are not stylisitically a viable protocol in this decade.  These are fixable issues and worthy of more exploration …

> 
> 2) SPKI allows anybody to chain certificates of this type (“fred says that bob says that vinay says that bob is allowed to use his computer.”) This ability removes the centrality of the CA: anybody that I trust can give me a certificate stating “this is the key for amazon.com” and because of certificate chaining, I can see the line of authority down which that key passed.
> ...
> 
> For ease, let’s consider realtime chat in the first instance – just pushing messages down telehash sockets. The only question we have to answer is which telehash socket corresponds to which person.
> 
> 1) person = key
> there’s no way to break the binding between a person and a key, because a person is a key, or multiple keys.
Wrong abstraction … a key may or may not be controlled by a person.

> 
> 2) delivery = key
> this is what we get from telehash – I don’t need to worry about how I’m sending you the message, it’s right there.
Privacy issues here …  discovey and identity need to be separate.

> 
> So I obtain a key for a friend of mine by, say, email. Once I’ve connected to them, I can then ask them to send me keys for our mutual friends.
> 
> 3) keys carry the chain of referrers
> “alice says this is her key”
> “bob says that alice says that this is her key”
Names are not the optimal construct… what does this mean to someone who does not know alice or perhaps knows several alice’s.  The names are a cute handle in SPKI, but lack notions of binding to other attributes (like a person or device).

> “fred says that bob says that alice says that this is her key”
> 
> 
...
> 
> Basically you get a decentralized social network with secure chat pretty much out of the box, where “friending” somebody acquires their key, and the referral network through which keys propagate is a key social dynamic. This can work.

Yes … it could.

> 
> 

Paul


