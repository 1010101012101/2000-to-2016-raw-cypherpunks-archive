From cypherpunks-bounces@cpunks.org  Sat Jan 11 16:12:15 2014
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0BLBe2D030054;
	Sat, 11 Jan 2014 16:11:42 -0500
Authentication-Results: antiproton.jfet.org; dkim=pass
	reason="1024-bit key; insecure key"
	header.d=pobox.com header.i=@pobox.com header.b=HmlcWBUV;
	dkim-adsp=pass; dkim-atps=neutral
Received: from sasl.smtp.pobox.com (a-pb-sasl-quonix.pobox.com [208.72.237.25])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0BLBbGY030050
 for <cypherpunks@cpunks.org>; Sat, 11 Jan 2014 16:11:38 -0500
Received: from sasl.smtp.pobox.com (unknown [127.0.0.1])
 by a-pb-sasl-quonix.pobox.com (Postfix) with ESMTP id E22E3F8B3
 for <cypherpunks@cpunks.org>; Sat, 11 Jan 2014 16:11:32 -0500 (EST)
DKIM-Signature: v=1; a=rsa-sha1; c=relaxed; d=pobox.com; h=date:to:from
 :subject:in-reply-to:references:mime-version:content-type
 :message-id; s=sasl; bh=+roeNcNUN1WsiewBSsyzunqROJo=; b=HmlcWBUV
 bT+r78077vGICrOAZP2iXFoyvRC1SjOPAgFhyM/wUVuwSPc8dTWeo3M9MLNuI3Ky
 DETZQi8vprq4U4LB4DSM+KWUMR9JKGwT82kdpI6UNM18sE9rsbHLry1BPGaZRpah
 i5WWV7CnLDFrfJqfba5jFkbkZEif7dRkNiY=
DomainKey-Signature: a=rsa-sha1; c=nofws; d=pobox.com; h=date:to:from
 :subject:in-reply-to:references:mime-version:content-type
 :message-id; q=dns; s=sasl; b=iiHyrk6m7Bkg4kEaFNUcGKa96VfPgw1EB8
 W5HQGMyzAcJBctSN1qfQ2Ol4IvD7NrzSLiIvB4j0JIqxrijGfioeaKQdc4uSqq0i
 A7EYHZPAtYcf415bGcWEV6HYCtDBKAbIZPcim88CQXZHuW2gEGVVqrElUNCizzyp
 oD+wjLVyQ=
Received: from a-pb-sasl-quonix.pobox.com (unknown [127.0.0.1])
 by a-pb-sasl-quonix.pobox.com (Postfix) with ESMTP id D3761F8B2
 for <cypherpunks@cpunks.org>; Sat, 11 Jan 2014 16:11:32 -0500 (EST)
Received: from CACDTL10WS5832.bill.stewart.pobox.com (unknown [208.201.253.90])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by a-pb-sasl-quonix.pobox.com (Postfix) with ESMTPSA id 9D8DCF8B1
 for <cypherpunks@cpunks.org>; Sat, 11 Jan 2014 16:11:31 -0500 (EST)
X-Mailer: QUALCOMM Windows Eudora Version 7.1.0.9
Date: Sat, 11 Jan 2014 13:11:20 -0800
To: cypherpunks@cpunks.org
From: Bill Stewart <bill.stewart@pobox.com>
Subject: Re: Curve p25519 Replacements for GnuPG?(x2 now) Re: Pretty
 Curved Privacy.. ECC Curve p25519 util(Bernstein approved curve)
In-Reply-To: <A946555C-7420-4EF8-B5F6-F841C7EC5621@gmail.com>
References: <52CFE3E9.5040400@cypherpunks.to> <20140110122133.GG7008@ctrlc.hu>
 <52CFEC67.9090706@cypherpunks.to> <3153198.N6KqkV6bkD@lap>
 <52D00724.1030302@cypherpunks.to> <20140110150209.GO7008@ctrlc.hu>
 <52D02F64.3010006@cypherpunks.to>
 <A946555C-7420-4EF8-B5F6-F841C7EC5621@gmail.com>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
Message-Id: <20140111211131.9D8DCF8B1@a-pb-sasl-quonix.pobox.com>
X-Pobox-Relay-ID: F1D87F06-7B04-11E3-BD57-873F0E5B5709-48178100!a-pb-sasl-quonix.pobox.com
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>

At 10:27 PM 1/10/2014, nymble wrote:
>one of several possible text encodings
>Others might include:
>- base 29
>- base 59
>- base 4096 (for UTF8 channels)

The primary reasons for text encoding were that people wanted to 
transmit data through channels that might modify content or had 
limitations on the size and type of content, such as 7-bit ASCII, 
special interpretations of control characters, especially \r, \n, \0, 
\t, conversion to/from EBCDIC or other character sets, line length 
limitations, case-folding, multiple space compaction, parity bits, 
etc.  A secondary goal is to support transcription by humans or 
optical character readers that are likely to make mistakes on some 
similar-looking characters, but that's much less common.  A tertiary 
goal is that some programmers like to "improve" programs or make them 
"more efficient" by twiddling bits in ways that lead to software 
bugs, security holes, and the wrong kinds of chaos and anarchy, and 
yes I'm particularly including Phil Zimmerman and the standards 
committees who designed ASN.1 and DNS. To give those guys some slack, 
most of us started programming before the 8-bit byte was really 
universal and saving bytes here and there was *really* *important*.*

The most common encodings out there encode most of the characters in 
base-16 (or octal, for old DEC applications) or base-64 (uuencode and 
MIME), with various wrappers around them to handle line-length 
limitations and sometimes checksums.  Sadly, base-85 didn't catch on 
- it used 5 characters to hold 4 bytes, vs. base-64's 6 characters 
for 4 bytes, but it was late to the game and required doing 
multiplication and division instead of just bit-shifting.
I've never seen base-29 or base-59 encodings - is base-29 some 
attempt to fit into 5-level Baudot coding now that the deaf community 
have pretty much all moved off Model-28 TTY emulators to ASCII or 
mobile phone texting?
Base-4096 in UTF-8 would be silly - it gets you 12 bits per 
variable-width character, requiring at least two bytes, so you could 
just as well use two bytes of base-64 and not risk munging by systems 
that don't understand UTF-8.

(* My first programming environment had a printer with 132 
48-character type bars and Model 026 keypunches doing Hollerith 
cards, which could print 56 different characters; I don't think we 
did any hacks using non-printer-supported punchcard fields and the 
card sorter, but it was possible.)

