From owner-cypherpunks@jfet.org  Tue Mar 28 04:49:26 2006
Return-Path: <owner-cypherpunks@jfet.org>
Received: from proton.jfet.org (localhost [127.0.0.1])
	by proton.jfet.org (8.13.5/8.13.5/Debian-3) with ESMTP id k2S9nLEN003813
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <cypherpunks-outgoing@proton.jfet.org>; Tue, 28 Mar 2006 04:49:21 -0500
Received: (from majordomo@localhost)
	by proton.jfet.org (8.13.5/8.13.5/Submit) id k2S9nLmc003812
	for cypherpunks-outgoing; Tue, 28 Mar 2006 04:49:21 -0500
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;         s=beta;
  d=gmail.com;        
  h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
  b=r/0rsQ5599PVPl1xcVoQD+cZODLe6gII7QEOp6NCsqqGoV/RpsY8/xuJclEYEsxe8rwi4Y9COJK3aUkrJRURGng7JjEIUE6THrEZnq/sjtlr5ig6RFCaqfxL8CZUXwhDgLJmaEIGVMtAp2VkmMVtLG0L+bVrbT4Dgr7/DKIHAHM=
Message-ID: <4ef5fec60603280149s1ca73327j639244acb4d11032@mail.gmail.com>
Date: Tue, 28 Mar 2006 01:49:17 -0800
From: coderman <coderman@gmail.com>
To: "=?GB2312?B?1cW9+A==?=" <jinz@mail.ustc.edu.cn>,
        "Peer-to-peer development." <p2p-hackers@zgp.org>
Subject: Re: [p2p-hackers] lockstep synchronization protocol problem
Cc: cypherpunks@jfet.org
In-Reply-To: <343538103.05175@ustc.edu.cn>
MIME-Version: 1.0
Content-Type: text/plain; charset=GB2312
References: <343538103.05175@ustc.edu.cn>
Content-Transfer-Encoding: 7bit
X-MIME-Autoconverted: from base64 to 8bit by proton.jfet.org id
  k2S9nH55003770
Sender: owner-cypherpunks@jfet.org
Precedence: bulk
X-Loop: al-qaeda.net
Status: O
Content-Length: 942
Lines: 17

On 3/28/06, UE=x <jinz@mail.ustc.edu.cn> wrote:
> I'm doing research about synchronization problem in P2P system,and the basic
> synchronization protocol is the lockstep protocol,and it use rounds to synchronize
> all the peer's movements,the problem is lockstep only synchronize peer's
> movements?what about the event created by all the peers?can it use rounds to
> synchronize them?and how to ?

look at using a quorum based key distribution and agreement protocol
(where quorum == a specific subset of group key management) with
regular attestation / rekeying via trusted and strongly authenticated
mechanisms.  session timeout (for failure / lack of consensus /
malicious attack) should be detected within an appropriate time frame
for the user to respond securely.  (i tend to think 60 seconds is an
acceptable window)

doing this in a user friendly manner is very difficult and probably
the reason prior work in this domain is scarce.

