From owner-cypherpunks@lne.com  Tue Aug 12 15:28:28 2003
Return-Path: <owner-cypherpunks@lne.com>
Received: from gw.lne.com (gw.lne.com [209.157.136.81])
	by positron.jfet.org (8.11.6p2/8.11.6-03-31-03) with ESMTP id h7CJSQt01809
	for <rsw@jfet.org>; Tue, 12 Aug 2003 15:28:27 -0400
Received: (from majordom@localhost)
	by gw.lne.com (8.12.5/8.12.5) id h7CJCZLw028464
	for cypherpunks-goingout345; Tue, 12 Aug 2003 12:12:35 -0700
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
Date: Tue, 12 Aug 2003 15:04:41 -0400
From: BillyGOTO <billy@dadadada.net>
To: Sarad AV <jtrjtrjtr2001@yahoo.com>
Cc: cypherpunks@lne.com
Subject: Re: Q on associative binary operation
Message-ID: <20030812190441.GA15253@mail.dadadada.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20030812090643.16469.qmail@web21208.mail.yahoo.com>
User-Agent: Mutt/1.3.28i
Sender: owner-cypherpunks@lne.com
Precedence: bulk
X-Loop: cypherpunks@lne.com
Status: O
Content-Length: 1246
Lines: 75

"For my ally is Perl, and a powerful ally it is."

On Tue, Aug 12, 2003 at 02:06:43AM -0700, Sarad AV wrote:
> hi,
> 
> how do we complete this table
> 
> Table shown may be completed to define 'associative'
> binary operation * on S={a,b,c,d}. Assume this is
> possible and compute the missing entries

> *|a|b|c|d
> ---------
> a|a|b|c|d
> ---------
> b|b|a|c|d
> ---------
> c|c|d|c|d
> ---------
> d| | | |


Lucky you!  There are only 256 possibilities.

There are four solutions:

The last row can be any of:

   d c c a 

   d c c b 

   d c c c 

   d c c d 

...

#!/usr/bin/perl -w
use strict;

my $optbl = [
    [0,1,2,3],
    [1,0,2,3],
    [2,3,2,3],
];

for(my $i=0; $i<0x100; $i++){
    $optbl->[3] = [
        ($i>>0)&0x3,
        ($i>>2)&0x3,
        ($i>>4)&0x3,
        ($i>>6)&0x3,
    ];
    if(&check_assoc($optbl)){
        for(join(',',@{$optbl->[3]})){
            tr/0123/abcd/;
            print "$_\n";
        }
    }
}

sub check_assoc {
    my $op = shift;
    for(my $i=0;$i<3;$i++){
    for(my $j=0;$j<3;$j++){
    for(my $k=0;$k<3;$k++){
        if( $op->[ $op->[$i][$j]] [ $k            ]
         != $op->[ $i           ] [ $op->[$j][$k] ] )
        {
            return 0;
        }
    } } }
    return 1;
}

