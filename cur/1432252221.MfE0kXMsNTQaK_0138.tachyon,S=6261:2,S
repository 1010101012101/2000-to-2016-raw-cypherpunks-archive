From owner-cypherpunks@Algebra.COM  Tue Dec 19 20:20:08 2000
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.72.0.53])
	by positron.mit.edu (8.9.3/8.9.3) with ESMTP id UAA02629
	for <kwantam@positron.mit.edu>; Tue, 19 Dec 2000 20:20:08 -0500
Received: from ak47.algebra.com (root@[208.233.99.160])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id UAA03661
	for <rsw@mit.edu>; Tue, 19 Dec 2000 20:20:07 -0500 (EST)
Received: (from majordom@localhost)
	by ak47.algebra.com (8.11.1/8.11.1) id eBK0wtC31091
	for cypherpunks-outgoing; Tue, 19 Dec 2000 18:58:55 -0600
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from sirius.infonex.com (sirius.infonex.com [216.34.245.2])
	by ak47.algebra.com (8.11.1/8.11.1) with ESMTP id eBK0wn631067
	for <cypherpunks@algebra.com>; Tue, 19 Dec 2000 18:58:49 -0600
X-Relay-IP: 216.34.245.2
Received: (from cpunks@localhost) by sirius.infonex.com (8.8.8/8.8.8) id QAA18916; Tue, 19 Dec 2000 16:58:46 -0800 (PST)
Received: from cyberpass.net (cyberpass.net [216.34.245.3]) by sirius.infonex.com (8.8.8/8.8.8) with ESMTP id QAA18904 for <cpunks@sirius.infonex.com>; Tue, 19 Dec 2000 16:58:35 -0800 (PST)
Received: from toad.com (toad.com [140.174.2.1]) by cyberpass.net (8.8.8/8.7.3) with ESMTP id RAA27327 for <cypherpunks@cyberpass.net>; Tue, 19 Dec 2000 17:01:06 -0800 (PST)
Received: (from majordom@localhost) by toad.com (8.7.5/8.7.3) id QAA09856 for cypherpunks-unedited-outgoing; Tue, 19 Dec 2000 16:52:43 -0800 (PST)
Received: from smile.idiom.com ([209.209.13.26]) by toad.com (8.7.5/8.7.3) with ESMTP id QAA09851 for <cypherpunks@toad.com>; Tue, 19 Dec 2000 16:52:39 -0800 (PST)
Received: from billstewart (bay-29-b-22.sfo.dsl.cerfnet.com [216.148.82.22])
	by smile.idiom.com (8.9.1/8.8.5) with SMTP id QAA84636;
	Tue, 19 Dec 2000 16:52:28 -0800 (PST)
Message-Id: <3.0.5.32.20001219162542.009e4cd0@idiom.com>
X-Sender: wcs@idiom.com
X-Mailer: QUALCOMM Windows Eudora Light Version 3.0.5 (32)
Date: Tue, 19 Dec 2000 16:25:42 -0800
To: "Scoville, Chad" <CScoville@thrupoint.net>, <cypherpunks@toad.com>
From: Bill Stewart <bill.stewart@pobox.com>
Old-Subject: Re: Crypto questions
Cc: <tech777_2000@yahoo.com>
In-Reply-To: <000601c069d1$62ca7290$a91819ac@NDBCap.com>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Subject:  Re: Crypto questions
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
Status: O
Content-Length: 3654
Lines: 71


At 10:35 AM 12/19/00 -0500, Scoville, Chad wrote:
>I've been actively reading posts on this list for about two years now, and
>I'm in he process of actually trying to design/implement a data network
>where security is of the utmost priority. Where is a good starting point to
>find out about packages using algorithms which are unbreakable as of yet.
>All of the traffic will remain domestically within the US. The traffic will
>be SMTP.
>
>It would be illmatic if someone could reccomend a good reading list
>(current) on the bleeding edge of cryptography.

You don't want to be on the bleeding edge of cryptography;
you want to be on the calm, boring and stuffy edge.
The bleeding edge is for academic mathematicians,
not for people with high-importance security problems.
You might want to be on the bleeding edge of firewalling
and implementation - depends on your need for speed, 
number of locations you're supporting, and price-sensitivity.

Unbreakable algorithms are easy, and have been for years.
Triple DES or the newly certified Rijndael AES standard are both 
as strong as you need (if you're paranoid, stick to 3DES; 
Rijndael is newer, and while it's had just about everybody trying 
to crack it and survived, and the US NIST (and hence NSA) 
has certified it, newer isn't better in this business.)
RC4 with 128-bit keys is also strong enough, if it's been 
implemented properly; if applied wrong, it fails badly,
so make sure you're using a competent implementation.
For public-key cryptosystems, either RSA or the Elliptic-Curve systems
are strong enough, given sufficiently long keys, though the definition
of "long enough" has grown by a few bits since then.
1024-bit RSA is fine for anything not involving decades of time
or large numbers of dead bodies, but 2048 isn't hard either.

For implementation, if you don't _really_ know what you're doing,
and since you're asking about a good reading list, you don't,
if this is for your business, you need to *hire* *somebody*
who does know what they're doing, and you probably want them to buy
commercial products backed by businesses with some development capital
that will fix bugs and maintain stuff, and you need to look at the
security of your processes.  Because it doesn't matter how
unbreakable your algorithms are if some insider has access to the
router with the password written on a yellow sticky note,
or if somebody can mail you a Microsoft Loves You virus
that forwards your email inbox to kgb.com.

At first glance, it sounds like your application probably calls for
either Cisco routers using their IPSEC features (if your remote
endpoints are big enough to use a router), or a Nortel or Cisco
IPSEC box at your headquarters location with IPSEC client software
running on your PCs or Linux boxes.  But you haven't talked about
network scale, speeds, sizes, number of locations, etc.,
so those are just generic guesses.   Depending on what you're doing
(user population, turnover, employees vs. customers, etc.),
you may also want some kind of Public Key Infrastructure,
or that may just be a bunch of bogus hype irrelevant to your needs.

Another possible approach is PGP-encrypted email -
PGP Inc. used to do gateway boxes that could forward and encrypt mail
and enforce encryption policies; if they still do this,
that may also be an answer.  You could also see if SSH has anything to offer.


The classic reading list on crypto starts with Bruce Schneier's
Applied Cryptography, plus however much of it's 1000+ item bibliography
makes sense for you.
				Thanks! 
					Bill
Bill Stewart, bill.stewart@pobox.com
PGP Fingerprint D454 E202 CBC8 40BF  3C85 B884 0ABE 4639

