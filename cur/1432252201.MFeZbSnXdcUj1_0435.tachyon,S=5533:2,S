From owner-cryptography+rsw=mit.edu@wasabisystems.com  Fri Aug  9 14:22:26 2002
Return-Path: <owner-cryptography+rsw=mit.edu@wasabisystems.com>
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.7.7.76])
	by positron.jfet.org (8.11.6/8.9.3) with ESMTP id g79IMQv24921
	for <rsw@opamp.org>; Fri, 9 Aug 2002 14:22:26 -0400
Received: from lion.ninthwonder.com (lion.ninthwonder.com [151.199.66.147])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id OAA23940
	for <rsw@mit.edu>; Fri, 9 Aug 2002 14:22:26 -0400 (EDT)
Received: by lion.ninthwonder.com (Postfix, from userid 96)
	id 7D2413071D; Fri,  9 Aug 2002 14:18:30 -0400 (EDT)
Delivered-To: cryptography@wasabisystems.com
Received: from snark.piermont.com (snark.piermont.com [166.84.151.72])
	by lion.ninthwonder.com (Postfix) with ESMTP id 34C283071A
	for <cryptography@wasabisystems.com>; Fri,  9 Aug 2002 14:18:29 -0400 (EDT)
Received: by snark.piermont.com (Postfix, from userid 1000)
	id D2B8DD97C9; Fri,  9 Aug 2002 14:18:28 -0400 (EDT)
Received: from www.aarg.net (www.aarg.net [206.101.74.70])
	by lion.ninthwonder.com (Postfix) with ESMTP id 143AB3070A
	for <cryptography@wasabisystems.com>; Fri,  9 Aug 2002 13:05:21 -0400 (EDT)
Received: from www.aarg.net (IDENT:mix@localhost.localdomain [127.0.0.1])
	by www.aarg.net (8.12.3/8.12.3) with ESMTP id g79H5Grm012776
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NO);
	Fri, 9 Aug 2002 10:05:16 -0700
Received: (from mix@localhost)
	by www.aarg.net (8.12.3/8.12.1/Submit) id g79H5Fde012772;
	Fri, 9 Aug 2002 10:05:15 -0700
Date: Fri, 9 Aug 2002 10:05:15 -0700
From: AARG!Anonymous <remailer@aarg.net>
Comments: This message did not originate from the Sender address above.
	It was remailed automatically by anonymizing remailer software.
	Please report problems or inappropriate use to the
	remailer administrator at <abuse@aarg.net>.
To: cypherpunks@lne.com, cryptography@wasabisystems.com
Subject: Thanks, Lucky, for helping to kill gnutella
Message-ID: <8c25bf764b14de9e2d3d9cd24a6d49fb@aarg.net>
Sender: owner-cryptography@wasabisystems.com
Precedence: bulk
Status: O
Content-Length: 3368
Lines: 58

An article on Salon this morning (also being discussed on slashdot),
http://www.salon.com/tech/feature/2002/08/08/gnutella_developers/print.html,
discusses how the file-trading network Gnutella is being threatened by
misbehaving clients.  In response, the developers are looking at limiting
the network to only authorized clients:

> On Gnutella discussion sites, programmers are discussing a number of
> technical proposals that would make access to the network contingent
> on good behavior: If you write code that hurts Gnutella, in other
> words, you don't get to play. One idea would allow only "clients that
> you can authenticate" to speak on the network, Fisk says. This would
> include the five-or-so most popular Gnutella applications, including
> "Limewire, BearShare, Toadnode, Xolox, Gtk-Gnutella, and Gnucleus." If
> new clients want to join the group, they would need to abide by a certain
> communication specification.

They intend to do this using digital signatures, and there is precedent
for this in past situations where there have been problems:

> Alan Cox, a veteran Linux developer, says that he's seen this sort of
> debate before, and he's not against a system that keeps out malicious
> users using technology. "Years and years ago this came up with a game
> called Xtrek," Cox says. People were building clients with unfair
> capabilities to play the space game -- and the solution, says Cox,
> was to introduce digital signatures. "Unless a client has been signed,
> it can't play. You could build any client you wanted, but what you can't
> do is build an Xtrek client that let you play better."

Not discussed in the article is the technical question of how this can
possibly work.  If you issue a digital certificate on some Gnutella
client, what stops a different client, an unauthorized client, from
pretending to be the legitimate one?  This is especially acute if the
authorized client is open source, as then anyone can see the cert,
see exactly what the client does with it, and merely copy that behavior.

If only there were a technology in which clients could verify and yes,
even trust, each other remotely.  Some way in which a digital certificate
on a program could actually be verified, perhaps by some kind of remote,
trusted hardware device.  This way you could know that a remote system was
actually running a well-behaved client before admitting it to the net.
This would protect Gnutella from not only the kind of opportunistic
misbehavior seen today, but the future floods, attacks and DOSing which
will be launched in earnest once the content companies get serious about
taking this network down.

If only...  Luckily the cypherpunks are doing all they can to make sure
that no such technology ever exists.  They will protect us from being able
to extend trust across the network.  They will make sure that any open
network like Gnutella must forever face the challenge of rogue clients.
They will make sure that open source systems are especially vulnerable
to rogues, helping to drive these projects into closed source form.

Be sure and send a note to the Gnutella people reminding them of all
you're doing for them, okay, Lucky?

---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending "unsubscribe cryptography" to majordomo@wasabisystems.com

