From owner-cypherpunks@al-qaeda.net  Fri Sep  3 10:48:17 2004
Return-Path: <owner-cypherpunks@al-qaeda.net>
Received: from positron.jfet.org (localhost [127.0.0.1])
	by positron.jfet.org (8.12.11/8.12.11/Debian-3) with ESMTP id i83FmG0r025011
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <cypherpunks-outgoing@positron.jfet.org>; Fri, 3 Sep 2004 10:48:16 -0500
Received: (from majordomo@localhost)
	by positron.jfet.org (8.12.11/8.12.11/Debian-3) id i83FmGYT025010
	for cypherpunks-outgoing; Fri, 3 Sep 2004 10:48:16 -0500
Date: Fri, 3 Sep 2004 17:46:18 +0200 (CEST)
From: Thomas Shaddack <shaddack@ns.arachne.cz>
To: Adam Back <adam@cypherspace.org>
cc: Cypherpunks <cypherpunks@al-qaeda.net>
Subject: Re: gmail as a gigabyte of an external filesystem
In-Reply-To: <20040903153703.GA23313@bitchcake.off.net>
Message-ID: <0409031739350.0@somehost.domainz.com>
References: <0408291853030.-1210261228@somehost.domainz.com> 
  <0409030403580.10722@somehost.domainz.com>
  <20040903153703.GA23313@bitchcake.off.net>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-cypherpunks@al-qaeda.net
Precedence: bulk
X-Loop: al-qaeda.net
Status: O
Content-Length: 1069
Lines: 20

On Fri, 3 Sep 2004, Adam Back wrote:

> Don't know anything about EncFS, but you could also use loopback
> encryption on top of gmailfs.  Just make a large file in gmail fs, and
> make a filesystem in it via loopback virtual block device-in-a-file.

According to the shards of knowledge about GmailFS (gained on Slashdot), 
every file write sends the entire file to the Gmail mailbox. So this 
approach would be VERY taxing on the bandwidth. (Besides, even "free" 
resources should be conserved, whenever practical.)

For GmailFS, we need a file-oriented approach, for which the EncFS one is 
perhaps the best of the few ones known to me.

(A workaround could be to modify the loopback driver, so instead of one 
loop file one could use a directory with a suitable number of "clusters" 
of suitable size. Could be useful for the situations where we need a 
filesystem realized on a device allowing file access with coarse 
granularity, without easy random access to file offsets. But I am not sure 
if it is worth the hassle. (Sure is, just find the proper scenario.))

