From owner-cypherpunks-outgoing@ssz.com  Wed Nov 22 23:23:24 2000
Received: from MIT.EDU (PACIFIC-CARRIER-ANNEX.MIT.EDU [18.69.0.28])
	by positron.mit.edu (8.9.3/8.9.3) with SMTP id XAA07023
	for <kwantam@positron.mit.edu>; Wed, 22 Nov 2000 23:23:24 -0500
Received: from einstein.ssz.com by MIT.EDU with SMTP
	id AA28339; Wed, 22 Nov 00 23:24:41 EST
Received: (from mdom@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id WAA26103
	for cypherpunks-outgoing; Wed, 22 Nov 2000 22:18:52 -0600
Received: (from cpunks@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id WAA26095
	for cypherpunks@ssz.com; Wed, 22 Nov 2000 22:18:48 -0600
Received: from mail.virtual-estates.net (cpunks@video-collage.com [160.79.196.177])
	by einstein.ssz.com (8.8.8/8.8.8) with ESMTP id WAA26071
	for <cpunks@ssz.com>; Wed, 22 Nov 2000 22:18:42 -0600
Received: (from cpunks@localhost)
	by mail.virtual-estates.net (8.9.3+3.2W/8.9.1) id XAA05730;
	Wed, 22 Nov 2000 23:10:08 -0500 (EST)
X-Authentication-Warning: video-collage.com: Processed from queue /var/spool/mqueue-majordomo
X-Authentication-Warning: video-collage.com: Processed by cpunks with -C /usr/local/majordomo/sendmail.cf
Received: from sirius.infonex.com (sirius.infonex.com [216.34.245.2])
	by mail.virtual-estates.net (8.9.3+3.2W/8.9.3) with ESMTP id XAA05720
	for <cypherpunks@algebra.com>; Wed, 22 Nov 2000 23:10:06 -0500 (EST)
X-Relay-Ip: 216.34.245.2
Received: (from cpunks@localhost) by sirius.infonex.com (8.8.8/8.8.8) id UAA03633; Wed, 22 Nov 2000 20:09:59 -0800 (PST)
Received: from cyberpass.net (cyberpass.net [216.34.245.3]) by sirius.infonex.com (8.8.8/8.8.8) with ESMTP id UAA03613 for <cpunks@sirius.infonex.com>; Wed, 22 Nov 2000 20:09:42 -0800 (PST)
Received: from cypherspace.org (adam@modemcable010.209-202-24.nowhere.mc.videotron.ca [24.202.209.10]) by cyberpass.net (8.8.8/8.7.3) with ESMTP id UAA15490 for <cypherpunks@cyberpass.net>; Wed, 22 Nov 2000 20:12:02 -0800 (PST)
Received: (from adam@localhost) by cypherspace.org (8.8.3/8.6.12) id XAA01088; Wed, 22 Nov 2000 23:12:19 -0500
Date: Wed, 22 Nov 2000 23:12:19 -0500
Message-Id: <200011230412.XAA01088@cypherspace.org>
From: Adam Back <adam@cypherspace.org>
To: obfuscation@beta.freedom.net
Cc: cypherpunks@cyberpass.net
In-Reply-To: <200011221824.NAA17476@r00t.besiex.org>
	(obfuscation@beta.freedom.net)
Old-Subject: link padding & traffic analysis (Re: ZKS -- the path to world domination)
Subject: CDR: link padding & traffic analysis (Re: ZKS -- the path to world domination)
Sender: owner-cypherpunks@ssz.com
Precedence: bulk
Reply-To: cypherpunks@ssz.com
X-Mailing-List: cypherpunks@ssz.com
X-List-Admin: list@ssz.com
X-Loop: ssz.com
X-Language: English, Russian, German
Status: O
Content-Length: 4632
Lines: 101


Obfuscation writes:
> Adam Back writes:
> > It's as strong as we could make it.  Private interactive
> > communications are a hard problem.  As Wei and I were discussing in
> > the "PipeNet protocol" thread in the last couple of weeks, there are 4
> > main properties you're trying to optimise over:
> >
> > 1. security (resistance to traffic analysis)
> > 2. performance
> > 3. bandwidth efficiency (cost)
> > 4. DoS resistance
> >
> > It appears pretty hard to get more than one of these properties with
> > theoretical optimality.  PipeNet gets the first one with good
> > theoretical security, but none of the others are good.  Freedom makes
> > an engineering tradeoff which does reasonably on all 4.
> 
> What about adding link padding?  Can you say something about why
> this doesn't help, or costs too much?

So the attack you described without link padding involves the attacker
either:

- eavesdropping on all links into and out of the network (untargetted
attack)

- or eavesdropping on a targetted or suspected user

  - and then eavesdropping on all exit nodes
  - or, on selected web sites you think the user visits

- or trying to work backwards from an exit node or web site to a user

  - by eavesdropping on entry nodes

If the attacker can observe those things, he can observe the effects
of network congestion because freedom is not synchronous.  (Making
freedom synchronous would adversely affect performance and make it
much more vulnerable to DoS.)  The attacker therefore already has the
necessary taps to match up congestion patterns between the client to
first hop link and the exit node or web site request.

If congestion is too noisy or uniform to discern anything, he can go
create some selective congestion by ping flooding (or inducing more
plausibly deniable types of congestion) on that link.  And observe the
effects.  He can very easily hide the source of his congestion
attempts by creating it using the freedom network.

The attacker can also substitute the need for extensive network taps
by measuring congestion inside the freedom network to narrow down
where a user is coming from.  Any unpriviledged user can measure
congestion in real time using the freedom protocol by creating routes
over all combinations of hops, pairs of hops and triples of hops.
This may allow a user to work backwards from an exit node to an entry
node with only one network tap.

So the main cost increase for the attacker of link padding is the
complexity of the analysis.  But it doesn't add many bits.  It would
probably be easiest to do what the Onion Routing analysis used: plot
some graphs of the timing data.  You would probably be able to
visually see the traffic analysis patterns.  Automating the analysis
would be a little harder due to the noise.


Next the cost of link padding.  Clearly it costs.  ISPs use "bandwidth
aggregation" figures to estimate their bandwidth requirements based on
online users.  This figure means what percentage of their modem
bandwidth a user uses while online (not 56 kbits on a 56kbaud modem
because the user pauses between downloads etc).  This figure varies
and changes over time.  With a bandwidth aggregation factor of 6:1 it
would cost 6 times as much bandwidth.  On top of that you don't want
to change bandwidth utilisation in response to demand or you leak
information about routes opening and closing.  So you need to have
some surplus padding available for users to use as they open
connections.


So how does one fix it if link padding alone doesn't work?  As I
suggested doing this efficiently and practically is an open problem.
PipeNet style synchronous works, or latency padding (which comes to
the same thing), but as discussed earlier these have pretty severe
performance implications.

So the challenge is, to find a more efficient hybrid or alternate
design which retains as much as possible PipeNet or DCNet security
properties, but improves performance and reduces bandwidth costs, if
such networks exists.

Adam

> Without it, someone monitoring your system can see which ZKS node you are
> talking to.  If they then monitor that node they can see that whenever
> you send an incoming message, there comes an outgoing message, so they
> can see the next node you are talking to, and so on.
> 
> With link padding, they couldn't do this.  They'd have to interrupt
> your data stream and then monitor *all* the outgoing traffic from *all*
> the ZKS nodes and see which one got interrupted.  This sounds like a
> much more expensive attack.  It is an active attack as well, while the
> previous one is passive and could be done by a Carnivore system.

