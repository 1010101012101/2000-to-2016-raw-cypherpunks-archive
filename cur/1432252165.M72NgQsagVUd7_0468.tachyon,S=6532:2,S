From cypherpunks-bounces@cpunks.org  Fri Jan 10 07:21:48 2014
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0ACLjw3015969;
	Fri, 10 Jan 2014 07:21:46 -0500
Received: from x1.ctrlc.hu (x1.ctrlc.hu [195.14.20.232])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0ACLgrT015964
 for <cypherpunks@cpunks.org>; Fri, 10 Jan 2014 07:21:43 -0500
Received: from i.ctrlc.hu (unknown
 [IPv6:fc8c:1767:11aa:2214:2767:6acb:77ab:a45d])
 by x1.ctrlc.hu (Postfix) with ESMTP id 0322935DF6;
 Fri, 10 Jan 2014 13:21:37 +0100 (CET)
Received: by i.ctrlc.hu (Postfix, from userid 1000)
 id 6810315CF7; Fri, 10 Jan 2014 13:21:34 +0100 (CET)
Date: Fri, 10 Jan 2014 13:21:34 +0100
From: stef <s@ctrlc.hu>
To: gwen hastings <gwen@cypherpunks.to>
Subject: Re: Pretty Curved Privacy.. ECC Curve p25519 util(Bernstein approved
 curve)
Message-ID: <20140110122133.GG7008@ctrlc.hu>
References: <52CFE3E9.5040400@cypherpunks.to>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <52CFE3E9.5040400@cypherpunks.to>
User-Agent: Mutt/1.5.21 (2010-09-15)
Cc: "cypherpunks@cpunks.org" <cypherpunks@cpunks.org>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>

On Fri, Jan 10, 2014 at 04:13:29AM -0800, gwen hastings wrote:
> From the README...
> 
> DESCRIPTION
> 
> Pretty Curved Privacy (pcp1) is a commandline utility which can be used
> to encrypt files. pcp1 uses eliptc curve cryptography for encryption
> (CURVE25519 by Dan J. Bernstein). While CURVE25519 is no worldwide
> accepted standard it hasn't been compromised by the NSA - which might be
> better, depending on your point of view.

sounds like my pbp: 
https://github.com/stef/pbp
except with a 'c' and less features, from the readme:

v0.2 - experimental

PBP[0] is a simple python wrapper and a command line interface around
libsodium, to provide basic functionality resembling PGP. It uses
scrypt for a KDF and a much simpler packet format, which should be
much harder to fingerprint, pbp also provides an experimental forward
secrecy mode and a multi-party DH mode.

Installation

pip install pbp

you possibly need to run (or an equivalent command) sudo apt-get install git
python-virtualenv gcc python-dev libffi-dev to satisfy all basic dependencies.

Design goals:

 1. use modern crypto
 2. provide similar functionality to PGP
 3. be extensible
 4. difficult to identify based on fingerprinting
 5. provide extensive testing
 6. strive for security

Crypto

Cryptographic primitives are based on the NaCl library from
http://nacl.cr.yp.to. The KDF used is scrypt.

PGP-like

Provides basic public key encrypt/decrypt, sign/verify and secret key
encrypt/decrypt modes, as well as the ability to sign, verify, list,
generate, export and import keys.

Extensibility

using pbp and the underlying pysodium[1] library it's easy to extend
pbp.  Some examples are the experimental forward secrecy mode (see
description in docs/chaining-dh.txt), the support for ECDH key
exchanges from the command-line and generation of arbitrarily large
random byte streams.

[1] https://github.com/stef/pysodium also available on
    https://pypi.python.org/pypi/pysodium

Fingerprinting

pbp tries to avoid to store any sensitive plaintext info, the
encrypted files all should look like random noise. for a description
of the packet formats see docs/fileformats.txt.

Testing

All py files come with their internal tests, unit tests are in
tests.py, and commandline functionality is tested in test.sh.

Security

pbp locks the process memory, so it cannot be swapped to disk. Also
pbp uses SecureString[2] to overwrite sensitive key material after
usage in memory, so keys have a short window of opportunity to leak.

[2] https://github.com/dnet/pysecstr

Usage

Generate a key

   pbp -g -n alice

sending howdy.txt using public key encryption from alice to bob

   pbp -c -S alice -r bob -i howdy.txt

decrypt an encrypted file using public key crypto

   pbp -d -S bob -i howdy.txt.pbp

sending howdy.txt using secret key encryption

   pbp -c -i howdy.txt

decrypt an encrypted file using secret key crypto

   pbp -d -i howdy.txt.pbp

sign howdy.txt

   pbp -s -S alice -i /howdy.txt

verify howdy.txt

   pbp -v -i howdy.txt.sig

sign bobs key

   pbp -m -S alice -n bob

check sigs on carols key

   pbp -C -n carol

alice encrypts howdy.txt to bob using experimental forward secret mode

   pbp -e -S alice -r bob -i howdy.txt -o ./secret-message

bob decrypts howdy.txt from alice using experimental forward secret mode

   pbp -E -S bob -r alice -i ./secret-message

initiate ECDH key exchange

   pbp -D1

respond to ECDH key exchange

   pbp -D2 -Dp 'public component from D1'

finish ECDH key exchange

  pbp -D3 -Dp 'public component from D2' -De 'secret exponent from D1'

random streaming 23GByte of cryptographic randomness

  pbp -R -Rs 23G -o /mnt/huge_fs/random_data

participate in a 4-way DH exchange, 1st message

  pbp -Ds -Dp 4 -S alice -n 'friends001' -i oldkeychain -o newkeychain

participate in a 4-way DH exchange, 2nd message

  pbp -De -S alice -n 'friends001' -i oldkeychain -o newkeychain

this is one big pipe that creates a 3-way ECDH secret between alice, bob and carol:

  pbp -Ds -S alice -Dp 3 -n 'test-dh' -i /dev/null |
   pbp -Ds -S bob -Dp 3 -n 'test-dh' |
   pbp -Ds -S carol -Dp 3 -n 'test-dh' |
   pbp -De -S alice -Dp 3 -n 'test-dh' |
   pbp -De -S bob -Dp 3 -n 'test-dh'

of course instead of a pipe you could use any kind of transport mechanism

(c) 2013, stf <s@ctrlc.hu>, dnet vsza@vsza.hu, AGPLv3.0+

[0] also it's very funny to say pbp with a mouth full of dry cookies.
don't try this in company!




-- 
pgp: https://www.ctrlc.hu/~stef/stef.gpg
pgp fp: FD52 DABD 5224 7F9C 63C6  3C12 FC97 D29F CA05 57EF
otr fp: https://www.ctrlc.hu/~stef/otr.txt

