Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t7DMEFP4014798;
	Thu, 13 Aug 2015 18:14:15 -0400
Received: from mail-io0-f176.google.com (mail-io0-f176.google.com
 [209.85.223.176])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t7DMEB8j014794
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Thu, 13 Aug 2015 18:14:12 -0400
Received: by iodt126 with SMTP id t126so67531112iod.2
 for <cypherpunks@cpunks.org>; Thu, 13 Aug 2015 15:14:06 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:content-type;
 bh=WhVISTzK+sDUogJUrBWiwT1Zkdf/vs6m9ISgZuPxeUc=;
 b=IPIYjrO56APhhKpxNKPd+0fBKHIRCnz+y0iHK9Hh1pzjoKeDtkl5dkTdTRb3qma7cW
 9XnmLt8KUSw+hTgDjd/rmWcaGj2cH8P4C7zn91dXCC4wOcS+povgwbkyS9wqC1Idoza5
 2PqaxRoKnSugARxB5JYRUesEPpjMN7RJL9sD+j/CHI3SEBtqFvrtAoK5PNMZNZ0gfm2O
 IUC8WSoX0UD8B3DaJWfgeyUdn3hemdcQxkYllKGnOBNobtqsGWkgBSHavcOut4cCQTXU
 8x4480eh9n2rxeV0dVzseO6diJRkIoAVZv4gLq+rqvelkX6fLsvOjGYBhDRB9wWbw6k1
 HhoQ==
X-Gm-Message-State: ALoCoQnjgLnT7iIBjK/YHCi4+67C/rUili0m8niiv43n275vw6p3KeWWbEMMPWnY8C7CE+8gmsr6
X-Received: by 10.107.41.67 with SMTP id p64mr38930890iop.58.1439504045911;
 Thu, 13 Aug 2015 15:14:05 -0700 (PDT)
MIME-Version: 1.0
References: <CAD2Ti29zN7j-1giNsYgHj1__9LMDAs1dobAnAAtR8_Cr+vCZJw@mail.gmail.com>
 <CAD2Ti2-od9OHrLu37osw4Rve1S8s52QpL_DEn-=3+fm9WTZC5g@mail.gmail.com>
 <CAHKdp-==WNiJBoJ5+sfLUut4w4AJ23EYCBq-6rvN8OBcVERkDQ@mail.gmail.com>
 <55B9064E.5010903@virtadpt.net> <20150729180714.GA2509@antiproton.jfet.org>
 <55B91C79.8010203@virtadpt.net> <20150729192528.GA3353@antiproton.jfet.org>
In-Reply-To: <20150729192528.GA3353@antiproton.jfet.org>
From: Sean Lynch <seanl@literati.org>
Date: Thu, 13 Aug 2015 22:13:56 +0000
Message-ID: <CAHKdp-kGPf_QdLSDjACFFdOThN=5mF+T6pzMmV3ev04J61=LWw@mail.gmail.com>
Subject: Re: Open Fabs
To: cypherpunks@cpunks.org
Content-Type: multipart/alternative; boundary=001a1141f9664f4c48051d38a721
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Lines: 203

--001a1141f9664f4c48051d38a721
Content-Type: text/plain; charset=UTF-8

Sorry for the delayed response. I have been falling behind on my personal
email.

On Wed, Jul 29, 2015 at 12:32 PM Riad S. Wahby <rsw@jfet.org> wrote:

> The Doctor <drwho@virtadpt.net> wrote:
> > I thought the point being made in the conversation was (and correct me
> > if I'm wrong) that one could dump an arbitrary FPGA's contents to do a
> > security audit on them.
>
> Ah, I see. I thought the focus was on cold boot or evil maid attacks
> against FPGA-based (thus, nominally trustworthy) CPUs, and how these
> attacks might compare to similar attacks against a commercial CPU.
>

This is what *I* meant. I was assuming an open source CPU design, which
would make dumping the configuration ROM pointless.


>
> As you pointed out before, one may as well just grab the configuration
> out of the ROM itself, and I agree---but my point was that either way,
> what are we getting except some information that's not really secret?
> So I think we're in violent agreement, at least to the extent that
> we're talking about the same thing :)
>
> Also: one assumes that cold boot attacks against the contents of
> RAM are more useful than against the SRAMs that hold the FPGA's
> configuration, and in that case probably it's little different from
> the equivalent attack against a commercial CPU (the DRAM is more
> or less the same whether we're talking about the commercial or the
> FPGA-based CPU---you're using the same DIMMs either way).


> On further reflection, I suppose the contents of the block RAMs inside
> the FPGA (little SRAMs sprinkled through the fabric) might be a prize
> worth chasing, since those are presumably acting as registers and
> cache for our CPU. It *might* be possible to do so by cold booting the
> FPGA with a configuration that dumps the contents of the block RAMs,
> assuming that those contents aren't cleared by power-on reset or the
> configuration process itself.
>

This is what I was thinking of, though the terminology had escaped me for
the moment.


>
> To your point above about auditing the configuration actually running
> on an FPGA: that would be very interesting to prevent against an FPGA
> manufacturer going the reflections-on-trusting-trust route.
>
> Here's one way an evil FPGA manufacturer might proceed: the CAD
> software that the manufacturer provides with the FPGA detects that
> you're synthesizing a CPU. Rather than emit a flawed bitstream
> (which might be detectable just by examining the bitstream itself),
> perhaps the software would hide in the bitstream some instructions
> that direct the FPGA's configuration state machine to introduce flaws
> at config time.


> (FPGA config bitstreams are big, complicated, and proprietary; so
> it's not impossible that they contain enough redundancy that one
> could use stego to hide such commands in the bitstream.)
>
> (This approach also helps to get around the fact that the synthesis
> and fitting process does a randomized search for a configuration
> that meets your criteria (e.g., speed, size, etc.). In other words:
> the best time to detect "this guy is trying to build a CPU" is when
> the software is reading your Verilog, not when it's loading the
> bitstream into an FPGA, because it's really really hard to decide
> "this is a CPU" just by examining the bitstream itself.)



> But I suppose if I were so devious as a manufacturer of FPGAs as to
> detect a CPU design and introduce subtle bugs as a result, I would
> probably also do my best to keep you from detecting it, even if you
> *are* able to read out the config from a running FPGA. It's quite a
> large haystack for hiding such a little needle...
>
>
Sounds possible but much harder to do and with lower impact than
backdooring a widely used CPU, at least until a bunch of people the
government considers threats start using soft cores.


> (And regarding cold booting to read out the config SRAMs: I worry even
> more here than in the case of block RAMs that these have a carefully
> designed power-on reset scheme in place so that the FPGA fabric comes
> up in a known state.)
>

Might it be possible to use a glitch attack to prevent this from happening?
I guess the question is, would you trust an FPGA's block RAM more than you
would TXT and L1 cache on an Intel CPU to protect sensitive data?

--001a1141f9664f4c48051d38a721
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_quote"><div>Sorry for the delayed resp=
onse. I have been falling behind on my personal email.</div><div dir=3D"ltr=
"><br></div><div dir=3D"ltr">On Wed, Jul 29, 2015 at 12:32 PM Riad S. Wahby=
 &lt;<a href=3D"mailto:rsw@jfet.org">rsw@jfet.org</a>&gt; wrote:<br></div><=
blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px=
 #ccc solid;padding-left:1ex">The Doctor &lt;<a href=3D"mailto:drwho@virtad=
pt.net" target=3D"_blank">drwho@virtadpt.net</a>&gt; wrote:<br>
&gt; I thought the point being made in the conversation was (and correct me=
<br>
&gt; if I&#39;m wrong) that one could dump an arbitrary FPGA&#39;s contents=
 to do a<br>
&gt; security audit on them.<br>
<br>
Ah, I see. I thought the focus was on cold boot or evil maid attacks<br>
against FPGA-based (thus, nominally trustworthy) CPUs, and how these<br>
attacks might compare to similar attacks against a commercial CPU.<br></blo=
ckquote><div><br></div><div>This is what *I* meant. I was assuming an open =
source CPU design, which would make dumping the configuration ROM pointless=
.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0=
 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
As you pointed out before, one may as well just grab the configuration<br>
out of the ROM itself, and I agree---but my point was that either way,<br>
what are we getting except some information that&#39;s not really secret?<b=
r>
So I think we&#39;re in violent agreement, at least to the extent that<br>
we&#39;re talking about the same thing :)<br>
<br>
Also: one assumes that cold boot attacks against the contents of<br>
RAM are more useful than against the SRAMs that hold the FPGA&#39;s<br>
configuration, and in that case probably it&#39;s little different from<br>
the equivalent attack against a commercial CPU (the DRAM is more<br>
or less the same whether we&#39;re talking about the commercial or the<br>
FPGA-based CPU---you&#39;re using the same DIMMs either way).</blockquote><=
blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px=
 #ccc solid;padding-left:1ex">
<br>
On further reflection, I suppose the contents of the block RAMs inside<br>
the FPGA (little SRAMs sprinkled through the fabric) might be a prize<br>
worth chasing, since those are presumably acting as registers and<br>
cache for our CPU. It *might* be possible to do so by cold booting the<br>
FPGA with a configuration that dumps the contents of the block RAMs,<br>
assuming that those contents aren&#39;t cleared by power-on reset or the<br=
>
configuration process itself.<br></blockquote><div><br></div><div>This is w=
hat I was thinking of, though the terminology had escaped me for the moment=
.</div><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0=
 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
To your point above about auditing the configuration actually running<br>
on an FPGA: that would be very interesting to prevent against an FPGA<br>
manufacturer going the reflections-on-trusting-trust route.<br>
<br>
Here&#39;s one way an evil FPGA manufacturer might proceed: the CAD<br>
software that the manufacturer provides with the FPGA detects that<br>
you&#39;re synthesizing a CPU. Rather than emit a flawed bitstream<br>
(which might be detectable just by examining the bitstream itself),<br>
perhaps the software would hide in the bitstream some instructions<br>
that direct the FPGA&#39;s configuration state machine to introduce flaws<b=
r>
at config time.=C2=A0</blockquote><blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
<br>
(FPGA config bitstreams are big, complicated, and proprietary; so<br>
it&#39;s not impossible that they contain enough redundancy that one<br>
could use stego to hide such commands in the bitstream.)<br>
<br>
(This approach also helps to get around the fact that the synthesis<br>
and fitting process does a randomized search for a configuration<br>
that meets your criteria (e.g., speed, size, etc.). In other words:<br>
the best time to detect &quot;this guy is trying to build a CPU&quot; is wh=
en<br>
the software is reading your Verilog, not when it&#39;s loading the<br>
bitstream into an FPGA, because it&#39;s really really hard to decide<br>
&quot;this is a CPU&quot; just by examining the bitstream itself.)</blockqu=
ote><div>=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin:0 0 =
0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
But I suppose if I were so devious as a manufacturer of FPGAs as to<br>
detect a CPU design and introduce subtle bugs as a result, I would<br>
probably also do my best to keep you from detecting it, even if you<br>
*are* able to read out the config from a running FPGA. It&#39;s quite a<br>
large haystack for hiding such a little needle...<br>
<br></blockquote><div><br></div><div>Sounds possible but much harder to do =
and with lower impact than backdooring a widely used CPU, at least until a =
bunch of people the government considers threats start using soft cores.</d=
iv><div>=C2=A0=C2=A0</div><blockquote class=3D"gmail_quote" style=3D"margin=
:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">
(And regarding cold booting to read out the config SRAMs: I worry even<br>
more here than in the case of block RAMs that these have a carefully<br>
designed power-on reset scheme in place so that the FPGA fabric comes<br>
up in a known state.)<br></blockquote><div><br></div><div>Might it be possi=
ble to use a glitch attack to prevent this from happening? I guess the ques=
tion is, would you trust an FPGA&#39;s block RAM more than you would TXT an=
d L1 cache on an Intel CPU to protect sensitive data?=C2=A0</div><div><br><=
/div></div></div>

--001a1141f9664f4c48051d38a721--

