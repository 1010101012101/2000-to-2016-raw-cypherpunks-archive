From owner-cypherpunks@al-qaeda.net  Fri Feb 13 17:31:33 2004
Return-Path: <owner-cypherpunks@al-qaeda.net>
Received: (from majordomo@localhost)
	by POSITRON.MIT.EDU (8.11.6p3/8.11.6-03-31-03) id i1DMVWm10992
	for cypherpunks-outgoing; Fri, 13 Feb 2004 17:31:32 -0500
X-Authentication-Warning: positron.mit.edu: majordomo set sender to owner-cypherpunks@al-qaeda.net using -f
Subject: Re: Windows source leaked?
From: Steve Furlong <sfurlong@acmenet.net>
To: cypherpunks@al-qaeda.net
In-Reply-To: <402D295E.65C6F8C9@cdc.gov>
References: <402D295E.65C6F8C9@cdc.gov>
Content-Type: text/plain
Message-Id: <1076711642.3998.9.camel@daft>
Mime-Version: 1.0
X-Mailer: Ximian Evolution 1.2.2 (1.2.2-4) 
Date: 13 Feb 2004 17:34:02 -0500
Content-Transfer-Encoding: 7bit
Sender: owner-cypherpunks@al-qaeda.net
Precedence: bulk
X-Loop: al-qaeda.net
Status: O
Content-Length: 1421
Lines: 27

On Fri, 2004-02-13 at 14:45, Major Variola (ret) wrote:
> [sent to al-q; does cypherpunks-moderated@minder.net forward there?]
> 
> At 06:25 PM 2/12/04 -0500, Riad S. Wahby wrote:
> >Among others, /. is reporting that Win2k and WinNT source code may
> >have leaked.
...
> If you didn't steal it, its not your problem if you read it.
...
> How would M$ show that you had in fact read the code?
> And if you didn't copy it, why would a court care?

Eric is correct in his reply to MV's article. Joe Programmer isn't
necessarily obligated not to look at leaked trade secrets, but if he
implements anything remotely related to the leaked secret, he and his
employers or customers are subject to being sued for using the secret.
In principle they can prove that the secret didn't have any influence on
the work, but in practice they're stuck having to prove a negative.

Eric is also correct about the "Chinese wall" between the people who
look at or figure out the secret and the implementation group. Back in
the early days of the IBM PC, IBM released the source to the BIOS,
figuring they could use copyright to keep anyone else from implementing
a compatible BIOS. Compaq did the Chinese wall trick, with one group
developing a rigorous spec from the released code, then throwing it over
the wall to the implementation group. If push came to shove, the
implementors could have sworn that they had never seen the IBM code.

