From owner-cypherpunks-outgoing@ssz.com  Mon Nov  6 15:49:50 2000
Received: from MIT.EDU (PACIFIC-CARRIER-ANNEX.MIT.EDU [18.69.0.28])
	by positron.mit.edu (8.9.3/8.9.3) with SMTP id PAA05653
	for <kwantam@positron.mit.edu>; Mon, 6 Nov 2000 15:49:50 -0500
Received: from einstein.ssz.com by MIT.EDU with SMTP
	id AA13315; Mon, 6 Nov 00 15:50:52 EST
Received: (from mdom@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id OAA00361
	for cypherpunks-outgoing; Mon, 6 Nov 2000 14:48:55 -0600
Received: (from cpunks@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id OAA00352
	for cypherpunks@ssz.com; Mon, 6 Nov 2000 14:48:45 -0600
Received: from sirius.infonex.com (sirius.infonex.com [216.34.245.2])
	by einstein.ssz.com (8.8.8/8.8.8) with ESMTP id OAA00321
	for <cpunks@ssz.com>; Mon, 6 Nov 2000 14:48:07 -0600
Received: (from cpunks@localhost) by sirius.infonex.com (8.8.8/8.8.8) id MAA17268; Mon, 6 Nov 2000 12:42:16 -0800 (PST)
Received: from cyberpass.net (cyberpass.net [216.34.245.3]) by sirius.infonex.com (8.8.8/8.8.8) with ESMTP id MAA17264 for <cpunks@sirius.infonex.com>; Mon, 6 Nov 2000 12:42:13 -0800 (PST)
Received: from kcmso1.proxy.att.com (kcmso1.att.com [192.128.133.69]) by cyberpass.net (8.8.8/8.7.3) with ESMTP id MAA10131 for <cypherpunks@cyberpass.net>; Mon, 6 Nov 2000 12:44:24 -0800 (PST)
Received: from attrh1.attrh.att.com ([135.71.27.39])
	by kcmso1.proxy.att.com (AT&T IPNS/MSO-2.3) with ESMTP id PAA29296
	for <cypherpunks@cyberpass.net>; Mon, 6 Nov 2000 15:41:35 -0500 (EST)
Received: from billstewart by attrh1.attrh.att.com (8.8.8+Sun/ATTEMS-1.4.1 sol2)
	id PAA01239 for <cypherpunks@cyberpass.net>; Mon, 6 Nov 2000 15:40:33 -0500 (EST)
Message-Id: <3.0.5.32.20001106124040.0091c5c0@idiom.com>
X-Sender: wcs@idiom.com (Unverified)
X-Mailer: QUALCOMM Windows Eudora Light Version 3.0.5 (32)
Date: Mon, 06 Nov 2000 12:40:40 -0800
To: cypherpunks@cyberpass.net
From: Bill Stewart <bill.stewart@pobox.com>
Subject: Re: CDR: Re: Minesweeper and defeating modern encryption
  technology
In-Reply-To: <Pine.LNX.3.96.1001106071908.295L-100000@einstein.ssz.com>
References: <3.0.5.32.20001105234753.00b10250@idiom.com>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Sender: owner-cypherpunks@ssz.com
Precedence: bulk
Reply-To: cypherpunks@ssz.com
X-Mailing-List: cypherpunks@ssz.com
X-List-Admin: list@ssz.com
X-Loop: ssz.com
X-Language: English, Russian, German
Status: O
Content-Length: 2912
Lines: 63

At 07:34 AM 11/6/00 -0600, Jim Choate wrote:
>Dave's right, you're not. While it is true a NDTM has a guessing module
>before that 'guessed' state causes the NDTM to change to the resultant
>state there is a level of PROOF involved. It is required to prove the
>answer is right.
>
>There is NO magic in an NDTM, it doesn't pull the correct answer out of
>the air.
>
>The distinction at this level between a NDTM and a probabilistic TM is
>that a PTM doesn't check the result at time of selection but after. 
>It's the algorithm that the Turing machine is running that does the checking.
>In a NDTM it is the 'guessing module'.
>
>The real question related to a NDTM is 'if you have a algorithm that
>allows you to guess answers and verify them before submission for
>execution' why are you executing the algorithm? You already know the
>answer is correct.
>
>See:
>
>http://www.hissa.nist.gov/dads/HTML/nondetrmtur.html

It's actually http://hissa.nist.gov/dads/HTML/nondetrmtur.html
with no www.

>"Definition: A turning machine which has more than one next state for some
>combination of contents of the current cell and current state. An input is
>accepted if any move sequence leads to acceptance."
>
>In other words you have to have a 'input verifier' that verifies the data
>is good before the next state(s) are entered. Note this means your
>verification function can't be NP.

You're still not getting what the non-deterministic Turing machine does.
The problem is structured as a decision-making problem, where an input is 
"accepted" if the Turing machine halts in an accept state, meaning the
set of input is a valid solution to the problem (sometimes leading to
ugly convoluted problem definitions if you're really trying to find an optimum
rather than a yes-no problem like a Hamiltonian or 3-SAT), or rejected 
if it halts in a rejection state (where the proposed answer is not a valid
solution), 
or doesn't halt (if it's an annoying problem+input.)
"An input is accepted if any move sequence leads to acceptance" means that
there's some collection of next states (bits of answer) that leads to the 
an accept state.  How do you know _which_ input value leads to acceptance?
That's the magic part.  If there are N bits of input, there are 2**N possible
move sequences, of which the existence of one correct sequence leads to
acceptance.

>It most assuradely has NOTHING to do with the question of how one builds a
>'universal sentence parser' that can return a verifiable yes/no as to
>validity when Godel's says all sentences don't necessarily have a valid
>result (ie they aren't provably consistent).

I don't think anybody's claimed that it has - the Satisfiability problem
and the subset 3-SAT problem don't deal with all Boolean problems,
just ones with a particular form.

				Thanks! 
					Bill
Bill Stewart, bill.stewart@pobox.com
PGP Fingerprint D454 E202 CBC8 40BF  3C85 B884 0ABE 4639

