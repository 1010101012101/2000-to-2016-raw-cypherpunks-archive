From owner-cypherpunks@lne.com  Fri Oct 31 20:38:34 2003
Return-Path: <owner-cypherpunks@lne.com>
Received: from slack.lne.com (gw.lne.com [209.157.136.81])
	by positron.jfet.org (8.11.6p3/8.11.6-03-31-03) with ESMTP id hA11cWR26861
	for <rsw@jfet.org>; Fri, 31 Oct 2003 20:38:32 -0500
Received: from slack.lne.com (slack.lne.com [127.0.0.1])
	by slack.lne.com (8.12.10/8.12.10) with ESMTP id hA11NYaI004731
	(version=TLSv1/SSLv3 cipher=EDH-DSS-DES-CBC3-SHA bits=168 verify=NO)
	for <cypherpunks-goingout345@slack.lne.com>; Fri, 31 Oct 2003 17:23:34 -0800
Received: (from majordom@localhost)
	by slack.lne.com (8.12.10/8.12.10/Submit) id hA11NYiS004730
	for cypherpunks-goingout345; Fri, 31 Oct 2003 17:23:34 -0800
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
Date: Fri, 31 Oct 2003 19:23:28 -0600 (CST)
From: "J.A. Terranson" <measl@mfn.org>
To: cypherpunks@lne.com
Subject: Cisco LEAP (fwd)
Message-ID: <Pine.BSF.4.21.0310311922310.24171-100000@greeves.mfn.org>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-cypherpunks@lne.com
Precedence: bulk
X-Loop: cypherpunks@lne.com
Status: O
Content-Length: 2536
Lines: 74

I thought this forum would be able to provide the good gentleman with more
accurate data that the typical that is to be found on the below mentioned
mailing list.

-- 
Yours, 
J.A. Terranson
sysadmin@mfn.org

	"Every living thing dies alone."
	Donnie Darko

---------- Forwarded message ----------
Date: Fri, 31 Oct 2003 08:11:59 -0800 (PST)
From: No Man <noman4222@yahoo.com>
To: pen-test@securityfocus.com
Subject: Cisco LEAP

I'm sure everyone is aware of the recent discussion
regarding LEAP and it's suceptiblity to dictionary
attacks. As I understand it, it is basically the
MS-CHAP problem: the 16 byte RC4 hash is padded with 5
nulls, split into three 7 byte chunks, then each chunk
is encrypted with DES. The last chunk, since you know
it has 5 nulls, is pretty easy to get That gives you
the last two bytes of the hash, which you then compare
for matches with the last two bytes in a precompiled
dictionary of hashes.

What about using a very large dictionary of all
possible combinations for a given password length to,
in effect, "brute force" it?

Take for example a 6 character password made of
lowercase letters and numbers. 36^6 works out to about
2.2 billion possibilities. Your dictionary or 2.2B rc4
hashes would take up roughly 40GB. I guess the plain
text that the hash was calculated from would be in
there too, so it would be a little larger, but suffice
it to say that it would fit on a fairly typical hard
drive.

So, I'm wondering several things. Consider typical
newer Intel hardware.

1) what would it take time-wise to create the
dictionary?

2) how long would it take to cycle through 40 gigs of
hashes to find the matches?

3) how many matches on the last two bytes of the hash
are there likely to be?


Thanks in advance for any help in deciding how big of
an issue this really is!

Michael

__________________________________
Do you Yahoo!?
Exclusive Video Premiere - Britney Spears
http://launch.yahoo.com/promos/britneyspears/

---------------------------------------------------------------------------
Network with over 10,000 of the brightest minds in information security
at the largest, most highly-anticipated industry event of the year.
Don't miss RSA Conference 2004! Choose from over 200 class sessions and
see demos from more than 250 industry vendors. If your job touches
security, you need to be here. Learn more or register at
http://www.securityfocus.com/sponsor/RSA_pen-test_031023
and use priority code SF4.
----------------------------------------------------------------------------

