From owner-cypherpunks@Algebra.COM  Mon May 27 04:11:07 2002
Return-Path: <owner-cypherpunks@Algebra.COM>
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.7.7.76])
	by positron.mit.edu (8.11.6/8.9.3) with ESMTP id g4R8B7w13083
	for <rsw@jfet.org>; Mon, 27 May 2002 04:11:07 -0400
Received: from ak47.algebra.com (ak47.algebra.com [208.233.99.160])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id EAA18540
	for <rsw@mit.edu>; Mon, 27 May 2002 04:10:42 -0400 (EDT)
Received: from ak47.algebra.com (majordom@localhost [127.0.0.1])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g4R7htYB032716
	for <cypherpunks-outgoing@ak47.algebra.com>; Mon, 27 May 2002 02:43:55 -0500
Received: (from majordom@localhost)
	by ak47.algebra.com (8.12.1/8.12.1/Submit) id g4R7hto8032714
	for cypherpunks-outgoing; Mon, 27 May 2002 02:43:55 -0500
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from slack.lne.com (dns.lne.com [209.157.136.81])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g4R7hlYB032687
	for <cypherpunks@ak47.algebra.com>; Mon, 27 May 2002 02:43:48 -0500
Received: (from cpunk@localhost)
	by slack.lne.com (8.11.0/8.11.0) id g4R7hk800348
	for cypherpunks@ak47.algebra.com; Mon, 27 May 2002 00:43:46 -0700
Received: (from majordom@localhost)
	by slack.lne.com (8.11.0/8.11.0) id g4R7gfl00341
	for cypherpunks-goingout; Mon, 27 May 2002 00:42:41 -0700
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
From: "Lucky Green" <shamrock@cypherpunks.to>
To: "'Peter Gutmann'" <pgut001@cs.auckland.ac.nz>, <adam@cypherspace.org>
Cc: <cypherpunks@lne.com>
Old-Subject: RE: attack on rfc3211 mode (Re: disk encryption modes)
Date: Mon, 27 May 2002 00:41:25 -0700
Message-ID: <004601c20551$ec5a0e90$c33a080a@LUCKYVAIO>
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Mailer: Microsoft Outlook, Build 10.0.3416
In-Reply-To: <200205101601.EAA381273@ruru.cs.auckland.ac.nz>
X-Loop: cypherpunks@lne.com
X-spam: 0 
Subject:  RE: attack on rfc3211 mode (Re: disk encryption modes)
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
X-spam: 0 
Status: O
Content-Length: 2830
Lines: 60


Peter wrote:
> Yup.  Actually the no-stored-IV encryption was never designed 
> to be a non- malleable cipher mode, the design goal was to 
> allow encryption-with-IV without having to explicitly store 
> an IV.  For PWRI it has the additional nice feature of 
> avoiding collisions when you use a 64-bit block cipher, which 
> is probably going to be the case for some time to come even 
> with AES around.  It was only after all that that I noticed 
> that the first pass was effectively a CBC-MAC, but it didn't 
> seem important enough to mention it in the RFC since it 
> wasn't an essential property (good thing I didn't :-).
> 
> >With a disk mode, unlike with RFC3211 password based 
> encryption for CMS 
> >there is no place to store the structure inside the 
> plaintext which may 
> >to some extent defend against this attack.

Here is a partial list of requirements that I believe apply to drive
encryption cryptographic systems. I am sure that list is incomplete and
may contain errors. The following is what springs to mind:

1) I do not believe that there is a fundamental need to limit the size
of the ciphertext to the size of the plain text. Adding a 1% or even
more space overhead for encryption is acceptable under any day-to-day
scenario that I can think of.

2) The algorithm must be able to decrypt individual sectors without
having to decrypt the entire contents of the drive. Nor must the
algorithm leak any plaintext, even if the attacker were to have
knowledge of all but one byte of the plaintext stored on the drive.

3) The encrypted partition should leak no information about the number,
nature, and size of any files stored on the drive. Unless one has access
to the key, the entire partition should be appear to the observer as a
homogenous block of opaque encrypted data.

4) It would be nice, but is not in the least required, to be able to
convert an existing unencrypted partition to an encrypted partition and
back.

5) It must be possible to pass the encryption key as a parameter to
mount, presumably in the form of a config file containing they key to
prevent the key from showing up in ps.

6) It should be possible to both specify a raw AES key as well as a
passphrase-derived SHA2 generated AES key.

7) Since the key will need to be stored in RAM for extended periods of
time, the key should be protected from forensic recovery by being never
being swapped to disk as well as by periodic bit-flipping.

8) Ideally, and this is definitely a feature for v2.0, each user would
be able to specify a capability that will permit the listing and access
of any files under that user's permissions on the encrypted file system.

9) While steganographic file systems offering multiple levels of
credible distress keys are nice, I don't consider this a feature that
should be included in v1.0.

