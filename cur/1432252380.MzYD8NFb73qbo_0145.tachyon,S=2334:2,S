From owner-cypherpunks@lne.com  Fri Nov  7 13:09:17 2003
Return-Path: <owner-cypherpunks@lne.com>
Received: from slack.lne.com (gw.lne.com [209.157.136.81])
	by positron.jfet.org (8.11.6p3/8.11.6-03-31-03) with ESMTP id hA7I9Fq16116
	for <rsw@jfet.org>; Fri, 7 Nov 2003 13:09:15 -0500
Received: from slack.lne.com (slack.lne.com [127.0.0.1])
	by slack.lne.com (8.12.10/8.12.10) with ESMTP id hA7HpvsB022721
	(version=TLSv1/SSLv3 cipher=EDH-DSS-DES-CBC3-SHA bits=168 verify=NO)
	for <cypherpunks-goingout345@slack.lne.com>; Fri, 7 Nov 2003 09:51:57 -0800
Received: (from majordom@localhost)
	by slack.lne.com (8.12.10/8.12.10/Submit) id hA7HpvCk022720
	for cypherpunks-goingout345; Fri, 7 Nov 2003 09:51:57 -0800
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
Date: Fri, 7 Nov 2003 17:51:45 +0000
From: petard <petard@sdf.lonestar.org>
To: "James A. Donald" <jamesd@echeque.com>
Cc: cypherpunks@lne.com
Subject: Re: Deniable data storage
Message-ID: <20031107175144.GA17242@SDF.LONESTAR.ORG>
References: <3FA94872.14740.DEE36E@localhost>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <3FA94872.14740.DEE36E@localhost>
User-Agent: Mutt/1.4.1i
X-GPG-Key: http://petard.freeshell.org/petard.asc
X-GPG-Fingerprint: 617B 06D9 ABE6 7074 48B6  5622 8248 99E7 D034 9224
X-message-flag: Your email program is defective. Find a real one
  (http://www.mutt.org/)
Sender: owner-cypherpunks@lne.com
Precedence: bulk
X-Loop: cypherpunks@lne.com
Status: O
Content-Length: 754
Lines: 17

On Wed, Nov 05, 2003 at 06:58:58PM -0800, James A. Donald wrote:
>     --
>  I want fully deniable information storage -- information 
>  theoretic deniable, not merely steganographic deniable, for 
>  stenography can never be wholly secure.
> 
> So I would have a fixed sized block of data containing a 
> variable number of smaller secret chunks of data.  A random key 
> would extract a random length of gibberish, a valid key would 
> extract a stream of valid data, and revealing one secret key to 
> the adversary would not give the adversary any evidene that 
> more secrety keys were present or absent.
> 
> Any good known algorithms for this? 
> 
rubberhose probably does what you want. is there some problem with it?
http://www.rubberhose.org/

