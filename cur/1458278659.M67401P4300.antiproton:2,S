Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id u2I5OD8v004283;
	Fri, 18 Mar 2016 01:24:14 -0400
Authentication-Results: antiproton.jfet.org; dkim=pass
	reason="2048-bit key; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=rWTVUe4h;
	dkim-adsp=pass; dkim-atps=neutral
Received: from mail-vk0-f41.google.com (mail-vk0-f41.google.com
 [209.85.213.41])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id u2I5OBmM004279
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Fri, 18 Mar 2016 01:24:12 -0400
Received: by mail-vk0-f41.google.com with SMTP id k1so129150951vkb.0
 for <cypherpunks@cpunks.org>; Thu, 17 Mar 2016 22:24:12 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to;
 bh=gKYrjhuK1IRPfhEQhuTTks3k0nif6rP8QV6KjEnxU6Y=;
 b=rWTVUe4huwb1PQO5HqYokaTVgCz2m1EV1deEjRqTtmQZqrYDaJI0ca6CApQtoYShtR
 qSEx4V7h0djU/bJtDH5iBC/1958bvkNWvmBhEacTBuh3pUNygOTXChEpynC2G328A7WA
 pl9Gv4/6wKOtf821oSVMB3M+dOdRyFB3SR6Q1q4KfpIFirEgrCMiRtU6LmYGnFROE3jj
 QJw07zwkfncnNfqZeV6UDWhtoGJPFbsGS5hrD0tcQF/aVXOfe7IkEruIFb7VSTUWVVGi
 UQxny3sH6EQdP4Rqk3OizlHWLa4ytql0a8UrTI5qfZJsOSP2NHA0wvZkgMYk0wkvR5oS
 +nHw==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20130820;
 h=x-gm-message-state:mime-version:in-reply-to:references:date
 :message-id:subject:from:to;
 bh=gKYrjhuK1IRPfhEQhuTTks3k0nif6rP8QV6KjEnxU6Y=;
 b=VVazvVElSl4UYONU5SchfS3gwMsYN5qGTTgmOBnsGs2Y8gEeKjoH9Uh3NlFBIqYBVH
 hl8HYJN8fmZefLnVFzezwQKR1csuGiR/oze11A1RTYq3JM7PFARNpki7Ch2pEMNi7hql
 wpv4SUS758I+sms5nSqhgpbV6i8BanWID74e0/dk2Ju0cHHUmCWSQEQRJ9d8LGlMS4Hg
 bm0PEuS5TAcVsbtN+b7SDa36OMjknQDmWCiUX+Nb0KO16G9VoI0mGyl6CGyNQ3nUWi/w
 w2T8SZK3g2R78Z8/ddouj/C3mI7GbXoJnJSf4JFdpCbQDB4t1K0bxSkO6jUqY1r6J3v3
 SROg==
X-Gm-Message-State: AD7BkJLr0LKiA9vV0+snf0gOh7ClNjP2I19VYogaAlES+8zH7AhBxxvDJEYLv8MpbQyc//ZvLI+8rT0C21RVyg==
MIME-Version: 1.0
X-Received: by 10.31.108.87 with SMTP id h84mr5043431vkc.156.1458278645920;
 Thu, 17 Mar 2016 22:24:05 -0700 (PDT)
Received: by 10.176.69.5 with HTTP; Thu, 17 Mar 2016 22:24:05 -0700 (PDT)
In-Reply-To: <E1agiRa-00014k-Gm@elasmtp-scoter.atl.sa.earthlink.net>
References: <E1agiRa-00014k-Gm@elasmtp-scoter.atl.sa.earthlink.net>
Date: Fri, 18 Mar 2016 01:24:05 -0400
Message-ID: <CAD2Ti28gNM-8Rob-xRiw=0w4LS9eqPAiiaCV8AByqZJq8LSeNA@mail.gmail.com>
Subject: Apple GovtOS/FBiOS & Proof of Work
From: grarpamp <grarpamp@gmail.com>
To: cypherpunks@cpunks.org
Content-Type: text/plain; charset=UTF-8
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Lines: 78

---------- Forwarded message ----------
From: Henry Baker <hbaker1@pipeline.com>
Date: Thu, 17 Mar 2016 17:39:22 -0700
Subject: [Cryptography] Apple GovtOS/FBiOS & Proof of Work
To: cryptography@metzdowd.com

If Apple is willing to put some serious Proof of Work into
constructing *every* firmware update, then it could achieve some level
of privacy:

When constructing a firmware update, the SHA512 (or better still, some
Apple proprietary) hash of the update has to have some preset number
of '0' bits.  So Apple will have to brute force fiddle with bits in
the firmware load to achieve an appropriate hash.  The work involved
should grow exponentially in the # of '0' bits required.

Most companies operate on a fixed update schedule, so Apple would have
to plan every release far enough in advance to give Apple enough time
to compute such a firmware load.  The reason for an Apple proprietary
hash is so any attacker would have to build their own custom chips to
be able to beat Apple at this Proof of Work game.  Note also, that
Apple can *change* the hash function on every firmware update, so said
custom chip would be useful for only one firmware release.

The firmware loader of course refuses to load any firmware whose hash
doesn't have the appropriate number of '0' bits (along with the
standard Apple signing key checks, etc.).  The hash also incorporates
the previous firmware load a la Merkle, so if your firmware is ever
compromised, your iPhone is forever bricked.

The hardware loading code refuses to load the first block of the new
firmware anywhere but right on top of the user's file encryption key.
So the *default* for the firmware flasher is to always *forget* this
key, unless very special arrangements are made to save this key in
other places.  This key is further encrypted and broken into many
pieces prior to moving it out of the way of the firmware loader
(including into the CPU's volatile register memory, so any power
disruption will destroy some of this key).

Of course, much like a password hashing function, such Apple hash
functions would be designed specifically to be *slow*, so GPU's and
gate-arrays would be of no particular value.

With a proper PoW system, any attacker would have to spend at least as
much time as Apple themselves to create a loadable firmware, and that
time might be as long as 6-12 months.

A scalable way for Apple to dominate any attacker (including most
nation-states) is to utilize the *entire installed base* of Apple
products (estimated by Tim Cook to be >1 billion devices) in a
distributed calculation.  Thus, Apple could use its "herd" itself to
provide for "herd immunity" to firmware update attacks.  iPhone users
would notice if Apple were attempting to compute >1 firmware update
PoW at any given time!

A 6-12 month lead time (during which the PoW for GovtOS is being
computed) would give Apple plenty of time to respond to any legal
issues and warn other Apple customers of an impending breach-of-trust
in the firmware update chain.

If Apple is issued an NSL and can't talk about it, 6-12 months would
still be a long enough delay to deter all but the most persistent of
govts.  Even Napoleon refused to look at any messages until they were
at least 3 days old; he found out that 99% of these messages resolved
themselves without any action on his part -- e.g., "please pardon my
son; he is to be executed in the morning".

If Apple speeded up or slowed down its pre-announced firmware update
schedule, that change itself would provide an excellent "warrant
canary".

<Apple: please reference this public email in your patent
applications.  Thx! -- Henry Baker>

_______________________________________________
http://www.metzdowd.com/mailman/listinfo/cryptography

