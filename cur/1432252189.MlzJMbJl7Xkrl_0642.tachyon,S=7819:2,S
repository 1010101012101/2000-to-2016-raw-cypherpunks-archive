From cypherpunks-bounces@cpunks.org  Wed Aug 21 07:21:31 2013
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id r7LBLMuO000691;
	Wed, 21 Aug 2013 07:21:23 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; insecure key"
	header.d=gmail.com header.i=@gmail.com header.b=pPu3t3cJ;
	dkim-adsp=none (insecure policy); dkim-atps=neutral
Received: from mail-oa0-f54.google.com (mail-oa0-f54.google.com
 [209.85.219.54])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id r7LBLJ6i000685
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Wed, 21 Aug 2013 07:21:20 -0400
Received: by mail-oa0-f54.google.com with SMTP id o6so493289oag.27
 for <cypherpunks@cpunks.org>; Wed, 21 Aug 2013 04:21:13 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:sender:in-reply-to:references:from:date:message-id
 :subject:to:cc:content-type;
 bh=DKHheWzm1ibvyex3A2C8oXq625AdSY+kKN03/sxS4vs=;
 b=pPu3t3cJzM6A/0F3KCOAC0ceUKp7nv/DHxI1S+wHjTRq/TUBsy9/agkerO+uH2Om7+
 SAu4+EzRQx/TWMEtmbtOWxfmkUMOJN9sZ71TCSNMPSbST6BLxmJuR9P99s2pCJn8IuFY
 bpxyqSER126u1pB3Vm92hT0zDwqWd7eyTE10/1BkmsTe6VRmEbi1uLmBJ1tNLx3FkFHl
 KlUk1gxUgGqJudfXcPzB4KaffCSDRSG0ZCxqUHOybtFh9qgeYNFRC3dtRwkQsXBt+vx4
 PCCtIgpaYzmU2L/7U90YYYayG96MXuldd5yCUKR42a6z7fICYsl0SGZVWMVf3gbqkMEb
 Z9Ew==
X-Received: by 10.182.119.229 with SMTP id kx5mr7240474obb.23.1377084073398;
 Wed, 21 Aug 2013 04:21:13 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.76.107.20 with HTTP; Wed, 21 Aug 2013 04:20:53 -0700 (PDT)
In-Reply-To: <20130811101328.GA386@netbook.cypherspace.org>
References: <20130809144310.GA29800@tuzo>
 <CAJVRA1T5N=DF1zZpXZRsbaPFe069vyeR996CchGNVkKAwumnuw@mail.gmail.com>
 <20130811101328.GA386@netbook.cypherspace.org>
From: =?UTF-8?Q?Lodewijk_andr=C3=A9_de_la_porte?= <l@odewijk.nl>
Date: Wed, 21 Aug 2013 13:20:53 +0200
X-Google-Sender-Auth: 2_3ecRpJ7Yi6IXP7CnNdzmHl3EA
Message-ID: <CAHWD2r+uB+7oxAfbawvqRN4k_FXxQd0m+WvA-YZUprYLj5MBCQ@mail.gmail.com>
Subject: Re: NSLs, gag-orders, code-changes, coerced backdoors - any tech
 response? (Re: Lavabit and End-point Security)
To: Adam Back <adam@cypherspace.org>
Content-Type: multipart/alternative; boundary=001a11c2e3520558c504e4735fcd
Cc: "cypherpunks@cpunks.org" <cypherpunks@cpunks.org>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 4664
Lines: 90

--001a11c2e3520558c504e4735fcd
Content-Type: text/plain; charset=UTF-8

Torrents show. Bitcoin shows.

Common protocol, many clients, graceful as possible failures, distributed
everything.

Else you'll always have a centralized something that can get broken.

The alternative answer is that you're dealing with two problems. Political
problems, from gag-order-ish affairs to licenses to prevent you from doing
it, and operational problems, the implanted code, the coerced backdoor.

Political problems call for political solutions. Distributing everything is
an approach to evade them. Just like we can write code we can write a legal
structure for our entities. Mega is  doing just that. Put the right thing
in the right country, evade certain punishable things but deal with their
use cases. Basically you're looking at a system of laws, and you're
programming a way to not be subject to them. You musn't forget that laws
move, however slowly. (like dealing with changing APIs)

Operational problems are historically dealt with by controlling the people
working on the project. You should get those with iron loyalty and
confidence in the greater good you're doing. That's nearly impossible to be
sure about and NSL-type-things make it excruciatingly hard for them. Then
layering, rounds of approval, people approving in different nations, etc.
Which is a combined political and physical means of dealing with the
problem.

I'm pretty sure that ATM it is unfeasible to produce code that doesn't
contain backdoors. Formal proofs are touchy and hard to read. Code gets
complicated and large. Backdoors are elaborate and sneaky. But the
political problems can be dealt with. And minimizing the code that can
contain backdoors is also a good idea.

You could also go for the never-done-in-production testing method where you
have two (or more) distinct implementations of the same thing, and you see
if the results are totally correct. That way someone would have to hide two
backdoors, for two different programs, in the same payload without breaking
the program the backdoor is not meant for.

There's ways. It's a lot of work.

--001a11c2e3520558c504e4735fcd
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Torrents show. Bitcoin shows.<div><br></div><div>Common pr=
otocol, many clients, graceful as possible failures, distributed everything=
.</div><div><br></div><div>Else you&#39;ll always have a centralized someth=
ing that can get broken.</div>

<div><br></div><div>The alternative answer is that you&#39;re dealing with =
two problems. Political problems, from gag-order-ish affairs to licenses to=
 prevent you from doing it, and operational problems, the implanted code, t=
he coerced backdoor.</div>

<div><br></div><div>Political problems call for political solutions. Distri=
buting everything is an approach to evade them. Just like we can write code=
 we can write a legal structure for our entities. Mega is =C2=A0doing just =
that. Put the right thing in the right country, evade certain punishable th=
ings but deal with their use cases. Basically you&#39;re looking at a syste=
m of laws, and you&#39;re programming a way to not be subject to them. You =
musn&#39;t forget that laws move, however slowly. (like dealing with changi=
ng APIs)</div>

<div><br></div><div>Operational problems are historically dealt with by con=
trolling the people working on the project. You should get those with iron =
loyalty and confidence in the greater good you&#39;re doing. That&#39;s nea=
rly impossible to be sure about and NSL-type-things make it excruciatingly =
hard for them. Then layering, rounds of approval, people approving in diffe=
rent nations, etc. Which is a combined political and physical means of deal=
ing with the problem.</div>

<div><br></div><div>I&#39;m pretty sure that ATM it is unfeasible to produc=
e code that doesn&#39;t contain backdoors. Formal proofs are touchy and har=
d to read. Code gets complicated and large. Backdoors are elaborate and sne=
aky. But the political problems can be dealt with. And minimizing the code =
that can contain backdoors is also a good idea.</div>

<div><br></div><div>You could also go for the never-done-in-production test=
ing method where you have two (or more) distinct implementations of the sam=
e thing, and you see if the results are totally correct. That way someone w=
ould have to hide two backdoors, for two different programs, in the same pa=
yload without breaking the program the backdoor is not meant for.</div>

<div><br></div><div>There&#39;s ways. It&#39;s a lot of work.</div></div>

--001a11c2e3520558c504e4735fcd--

