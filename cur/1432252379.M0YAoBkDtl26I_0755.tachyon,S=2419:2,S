From owner-cypherpunks@jfet.org  Sat Oct 29 09:22:06 2005
Return-Path: <owner-cypherpunks@jfet.org>
Received: from proton.jfet.org (localhost [127.0.0.1])
	by proton.jfet.org (8.13.4/8.13.4/Debian-3) with ESMTP id j9TDLBIt004954
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <cypherpunks-outgoing@proton.jfet.org>; Sat, 29 Oct 2005 09:21:11 -0400
Received: (from majordomo@localhost)
	by proton.jfet.org (8.13.4/8.13.4/Submit) id j9TDLBkU004953
	for cypherpunks-outgoing; Sat, 29 Oct 2005 09:21:11 -0400
Message-ID: <19275506.1130592050616.JavaMail.root@elwamui-karabash.atl.sa.earthlink.net>
Date: Sat, 29 Oct 2005 06:20:50 -0700 (GMT-07:00)
From: John Kelsey <kelsey.j@ix.netcom.com>
To: cyphrpunk <cyphrpunk@gmail.com>, "James A. Donald"
  <jamesd@echeque.com>
Subject: Re: On Digital Cash-like Payment Systems
Cc: cryptography@metzdowd.com, cypherpunks@jfet.org
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Mailer: EarthLink Zoo Mail 1.0
Sender: owner-cypherpunks@jfet.org
Precedence: bulk
X-Loop: al-qaeda.net
Status: O
Content-Length: 1283
Lines: 31

>From: cyphrpunk <cyphrpunk@gmail.com>
>Sent: Oct 27, 2005 9:15 PM
>To: "James A. Donald" <jamesd@echeque.com>
>Cc: cryptography@metzdowd.com, cypherpunks@jfet.org
>Subject: Re: On Digital Cash-like Payment Systems

>On 10/26/05, James A. Donald <jamesd@echeque.com> wrote:
>> How does one inflate a key?

>Just make it bigger by adding redundancy and padding, before you
>encrypt it and store it on your disk. That way the attacker who wants
>to steal your keyring sees a 4 GB encrypted file which actually holds
>about a kilobyte of meaningful data. Current trojans can steal files
>and log passwords, but they're not smart enough to decrypt and
>decompress before uploading. They'll take hours to snatch the keyfile
>through the net, and maybe they'll get caught in the act.

Note that there are crypto schemes that use huge keys, and it's
possible to produce simple variants of existing schemes that use
multiple keys.  That would mean that the whole 8GB string was
necessary to do whatever crypto thing you wanted to do.  A simple
example is to redefine CBC-mode encryption as

C[i] = E_K(C[i-1] xor P[i] xor S[C[i-1] mod 2^{29}])

where S is the huge shared string, and we're using AES.  Without
access to the shared string, you could neither encrypt nor decrypt.

>CP

--John

