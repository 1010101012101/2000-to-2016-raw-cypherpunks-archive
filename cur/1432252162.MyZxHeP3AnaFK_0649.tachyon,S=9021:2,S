From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Mon Oct 13 11:47:21 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-lb0-f172.google.com (mail-lb0-f172.google.com [209.85.217.172])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s9DFlIOM027925
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Mon, 13 Oct 2014 11:47:21 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=EIzchhGY;
	dkim-adsp=none (unprotected policy); dkim-atps=neutral
Received: by mail-lb0-f172.google.com with SMTP id b6so6685961lbj.31
        for <rsw@jfet.org>; Mon, 13 Oct 2014 08:47:11 -0700 (PDT)
X-Received: by 10.152.7.145 with SMTP id j17mr24569917laa.67.1413215230806;
        Mon, 13 Oct 2014 08:47:10 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.152.29.36 with SMTP id g4csp238484lah;
        Mon, 13 Oct 2014 08:47:09 -0700 (PDT)
X-Received: by 10.66.249.33 with SMTP id yr1mr12980627pac.92.1413215228961;
        Mon, 13 Oct 2014 08:47:08 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id ge5si10659311pbc.3.2014.10.13.08.47.08
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Mon, 13 Oct 2014 08:47:08 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net;
       dkim=fail header.i=@gmail.com;
       dmarc=fail (p=NONE dis=NONE) header.from=gmail.com
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s9DFjd8s027904;
	Mon, 13 Oct 2014 11:45:46 -0400
Received: from mail-la0-f41.google.com (mail-la0-f41.google.com
 [209.85.215.41])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s9DFjXuQ027900
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Mon, 13 Oct 2014 11:45:35 -0400
Received: by mail-la0-f41.google.com with SMTP id pn19so6962484lab.14
 for <cypherpunks@cpunks.org>; Mon, 13 Oct 2014 08:45:25 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:date:message-id:subject:from:to:cc:content-type;
 bh=opNTrTT35O4o0/gtHCmER7hqJd3jLtnvehPsX/Zh4Xo=;
 b=EIzchhGYC2DJpUc2Xtp6rVfhlT/SDtRz1k+S05RdgFlD4s1tPWo2zljczXTE26+7iH
 6nvYHQD+jQb797Tbo7Fiy7qPr0YV7l7klIrlm3YJj6/6rfEr8qvXsbA5JPIe1U/nLrzz
 kLSvpShIq/RDsTiUyJqlWwO0WdSiEnP+akLEInvliz6+KkUlgfDVmiNMf5ozfejwl9gn
 ay94V+yo5npLA0x25kyK2+2+v7jvdPA1hSUPr0bA735CJISkpHzU8M57UyPmnkYvPYg6
 FtjpPbmqii4Ze1+ZxqIezqRPuEYowGNg1TXhjx6qHJ6oX8DhEiT4VYJf2AhtVbWoNaYr
 KrRQ==
MIME-Version: 1.0
X-Received: by 10.112.12.72 with SMTP id w8mr4038141lbb.87.1413215125505; Mon,
 13 Oct 2014 08:45:25 -0700 (PDT)
Received: by 10.112.156.225 with HTTP; Mon, 13 Oct 2014 08:45:25 -0700 (PDT)
Date: Mon, 13 Oct 2014 08:45:25 -0700
Message-ID: <CAJVRA1R+ESe5C0Rh5z7_8RpVnOEPvhoc4v=3T_6+c+Pt9AvovA@mail.gmail.com>
Subject: Re: caring harder requires solving once for the most demanding threat
 model, to the benefit of all lesser models
To: ianG <iang@iang.org>
Content-Type: text/plain; charset=UTF-8
Cc: cpunks <cypherpunks@cpunks.org>, cryptography@randombit.net
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: coderman <coderman@gmail.com>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 4492
Lines: 122

On 10/13/14, ianG <iang@iang.org> wrote:
> ...
> your welcome ;-)

a considered and insightful response to my saber rattling diatribe.

i owe you a beer, sir!



> Ah well, there is another rule we should always bring remember:
>
>      Do not use known-crap crypto.
>
> Dual_EC_DRBG is an example of a crap RNG.  For which we have data going
> back to 2006 showing it is a bad design.

let's try another example: Intel RDRAND or RDSEED.  depend on it as
the sole source of entropy?

in theory, the only attacks that would allow to manipulate the output
are outside scope. (e.g. the data shows them as nation state level
hypothetical)

is "depending on a single entropy source" the "known-crap" part? or is
it the un-verifiable output of this specific source that is
"known-crap"?

(or am i overreaching, and you advocate direct and sole use of RDRAND
everywhere? :)



> Others in this category include:  RC4, DES, MD5, various wifi junk
> protocols, etc.

if RC4 is known-crap, then how is a downgrade to known-crap not a problem?



>> Q: 'Should I switch away from 1024 bit strength RSA keys?'
>
> I agree with that, and I'm on record for it in the print media.  I am
> not part of the NIST lemmings craze.
>
> So, assuming you think I'm crazy, let's postulate that the NSA has a box
> that can crunch a 1024 key in a day.  What's the risk?
> ...
> WYTM?  The world that is concerned about the NSA is terrified of open
> surveillance.  RSA1024 kills open surveillance dead.

consider a service provider that i use, like Google, with a
hypothetical 1024 bit RSA key to secure TLS. they don't use forward
secrecy, so recovery of their private key can recover content.

what is the risk that a Google-like provider key could be attacked? i
have no idea.  but certainly more than my risk as a single individual.

regarding open surveillance, this is a potential mechanism for it
despite the appearance of privacy.

at what point does an insufficient key length become "known-crap" vs.
needless lemming craziness?

said another way, "the data" is only useful if you or those you trust
is not an outlier.  in addition, "the data" is only retrospective; by
definition class breaks and novel attacks are not worth considering
until they become known and used.  does the difficulty in migrating
away from a new-known-crap mistake factor into how you draw the line?



> Actually, I thought there was data on this which shows that auto-update
> keeps devices more secure, suffer less problems.  I think Microsoft have
> published on this, anyone care to comment?

microsoft updates are not the standard upon which to measure all
application updates. the vast majority don't check certificates or
secure digests at all, hence the hundreds of vectors in evilgrade that
provide a seamless path from MitM at coffee shop to administrator on
your laptop.

is the "not using crypto" or "not using crypto right" parts the
"known-crap" piece of this equation?

is the MitM or DNS poison dependency "low risk" enough per the data
that the "known crap" of the update itself no longer matters?


---


thank you taking the time to address these points in depth so that i
can better understand your reasoning.

this is an interesting discussion because i arrived at the opposite
conclusion: given the reasonableness of long keys and secure designs,
and in view of ever improving attacks, the best course of action is to
solve _once_ for the hardest threat model, so that you don't rely on
past indicators to predict future security and all lesser threat
models can benefit from the protection provided.

i dream of a future where the sudden development of very many qubit
computers does not cause a panic to replace key infrastructure or
generate new keys. where the protocols have only one mode, and it is
secure. where applications don't need to be updated frequently for
security reasons. where entire classes of vulnerabilities don't exist.

in short, i dream of a future where the cooperative solution to the
most demanding threat models is pervasive, to the benefit of all
lesser models, now and into the future.


best regards,


P.S. part of the context for this bias is my perspective as developer
of fully decentralized systems. any peer in such a system is
potentially the highest profile target; the threat model for any peer
the most demanding threat model any one peer may operate under. the
usual "client vs. server", or "casual vs. professional" distinctions
in threat models no longer apply...

