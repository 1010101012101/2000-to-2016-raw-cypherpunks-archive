From cypherpunks-bounces@cpunks.org  Tue Sep 24 17:20:04 2013
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id r8OLJxoi028216;
	Tue, 24 Sep 2013 17:20:00 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; insecure key"
	header.d=gmail.com header.i=@gmail.com header.b=gjqmjRUp;
	dkim-adsp=none (insecure policy); dkim-atps=neutral
Received: from mail-pb0-f45.google.com (mail-pb0-f45.google.com
 [209.85.160.45])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id r8OLJunj028199
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@al-qaeda.net>; Tue, 24 Sep 2013 17:19:58 -0400
Received: by mail-pb0-f45.google.com with SMTP id mc17so5095888pbc.18
 for <cypherpunks@al-qaeda.net>; Tue, 24 Sep 2013 14:19:51 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :cc:content-type;
 bh=qem0K9BBy8tYjAd8PB9ZPeE5Udp1iVFBRRvtpPbmtZQ=;
 b=gjqmjRUpu2B/XBXiFtazfpSApCV5XqngS6tz56YH/YGyfGHoivBiQh+ykaTSnBODDt
 /WhE239uqUdx/WDq2fFxKR0VeU002Gw46uIWtUDNvWq5QKmdmVdq2jooo16ZyZFLHMIl
 GY4QVHcSyVJa/ZtFXtuRnn3f1CiaFHSgNYpgzQrA2TPQv6lOd0d49LvBsEdDT9MynHMU
 Fmuek1zINJf3SvmPPfqGTfYkSTdlNNr5US3Er6l4QB4177jlz3ewaxw+L5pAXllU+XjK
 nVRBv5VOD+M7m4I7b6KmkNWy1tilnSoVnAOJrJpEieDN3GowuXsvwXAftc0rzyi8QzD/
 8N3Q==
MIME-Version: 1.0
X-Received: by 10.66.251.40 with SMTP id zh8mr6865179pac.185.1380057591316;
 Tue, 24 Sep 2013 14:19:51 -0700 (PDT)
Received: by 10.69.26.135 with HTTP; Tue, 24 Sep 2013 14:19:51 -0700 (PDT)
In-Reply-To: <CAJq8BAP1W48UAnCn-GjkpDHSk+jn77uhSyk7GwLxnKGA2Av9Vw@mail.gmail.com>
References: <20130924145250.GU10405@leitl.org>
 <CAJq8BAP1W48UAnCn-GjkpDHSk+jn77uhSyk7GwLxnKGA2Av9Vw@mail.gmail.com>
Date: Tue, 24 Sep 2013 21:19:51 +0000
Message-ID: <CAFVRnyrG9vr1Hb0-0g6_67nqFbWRU1cSEWOme2qb1KZjL9ASDg@mail.gmail.com>
Subject: Re: Dissentr: A High-Latency Overlay Mix Network
From: David Vorick <david.vorick@gmail.com>
To: Lee Azzarello <lee@guardianproject.info>
Content-Type: multipart/alternative; boundary=047d7b15fbf58009a104e727b237
Cc: "cypherpunks@al-qaeda.net" <cypherpunks@al-qaeda.net>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 19882
Lines: 399

--047d7b15fbf58009a104e727b237
Content-Type: text/plain; charset=ISO-8859-1

Tor is a low latency network in the sense that packets are forwarded as
soon as they are received. Outwardly, it may not appear as a low latency
network because ping times can exceed 30 seconds, however from a security
point of view Tor is a low latency network.

A high latency network is one that holds onto traffic until it has a huge
batch to send out. With enough traffic, you could theoretically implement a
high latency network that is faster than Tor, but a high latency network
could also theoretical take days to respond to a request.

With Tor, if you are observing every node in the network you can guess at
people's identities by correlating traffic. If one node sends exactly X
bytes to a node that sends the same number of bytes to the next node, you
can assume that the two nodes are connected in a circuit.

In a high latency network, you would wait to send data to the next node
until you have many different requests to send to the next node. This makes
traffic correlation a lot harder because you can't distinguish a particular
request of X bytes from the other requests that are being sent over the
network.


On Tue, Sep 24, 2013 at 9:05 PM, Lee Azzarello <lee@guardianproject.info>wrote:

> Woah woah woah. When did the message go out about changing Tor to a "low
> latency" network? High latency is the number one criticism of Tor from
> users.
>
> In addition UDP traffic won't even pass through Tor. This results
> in low-latency real time applications like VoIP impossible over that network
> .
>
> Perhaps the author is not aware of these properties of Internet protocols?
>
> -lee
>
> On Tuesday, September 24, 2013, Eugen Leitl wrote:
>
>>
>> https://github.com/ShaneWilton/dissentr
>>
>> Note: This project was created as part of a 36-hour hackathon - and
>> primarily as a proof of concept. While the ideas may be sound, and the
>> prototype may work as designed, the protocols involved in this specific
>> project have not been peer-reviewed, and so I cannot recommend that the
>> network be used for anything requiring serious privacy.
>>
>> Dissentr
>> A High-Latency Overlay Mix Network
>>
>> Essentially, Dissentr is a security-minded network, inspired by Tor, with
>> a few important characteristics which serve to differentiate it.
>>
>> High-Latency
>>
>> Tor is a low-latency network. This makes it ideal for real time
>> activities like web browsing, but as a result, opens it up to attacks
>> involving large-scale traffic analysis methods known as end-to-end
>> correlation. In these attacks, an adversary with the ability to analyze
>> massive amounts of traffic in a short period of time is able to match up
>> traffic entering the network with the corresponding traffic which will
>> inevitably soon exit it.
>>
>> Dissentr manages to protect against these sorts of attacks by being
>> engineered as a high-latency network. Assuming any given node has not been
>> compromised, that node will intentionally hold off on forwarding its
>> traffic to the next node in the network until it is able to forward a large
>> amount of data in bulk, rendering the aforementioned end-to-end correlation
>> far less feasible. For an excellent discussion on this attack, and possible
>> countermeasures, see Practical Traffic Analysis: Extending and Resisting
>> Statistical Disclosure.
>>
>> Cascades
>>
>> Much like any mix network, Dissentr models its network as a graph of
>> nodes, each responsible for handling the relay of traffic as it moves along
>> some path through the network. Where Dissentr differs from a network such
>> as Tor is in how this path is constructed. In Dissentr, the network is
>> constructed out of cascades (A term I first heard described by Ian
>> Goldberg, but I've been unable to pin down an original source for):
>> essentially directed, acyclic sub-graphs, in which a node defines a set of
>> "trusted" nodes, through which they are willing to relay traffic through.
>> Dissentr simplifies this model by only allowing for nodes of out-degree 1,
>> at this time. This construction brings about a number of useful results:
>>
>> In the event that a node is known to be compromised, individual nodes are
>> allowed the ability to either remove themselves from a cascade, or bypass
>> untrusted nodes entirely, without the necessity of a trusted third-party.
>> The network is protected from "supernode invasions," in which an attacker
>> floods the network with compromised nodes, in the hopes of either
>> endangering the network's health, or placing the security of users passing
>> through their nodes at risk of traffic interception, and subsequent
>> analysis. This can be guaranteed because cascades are constructed by virtue
>> of a measure of trust between node-operators, and so long as there exists
>> some non-zero subset of trusted operators, they retain the ability to form
>> a cascade of their own, effectively shutting out the efforts of such an
>> attacker.
>> Use-Cases
>>
>> As mentioned previously, the high-latency nature of the network causes a
>> shift in the sorts of activities best facilitated by its use, however,
>> there do exist some unique opportunities which I have neither seen
>> implemented in the context of a mix network, nor discussed in the
>> literature.
>>
>> A personal favourite idea revolves around creating a platform for
>> political blogging, which, assuming a noisy enough network, would offer
>> political dissidents the ability to freely write about issues of corruption
>> or government abuse, without many of the risks associated with using a
>> lower-latency network like Tor. If it takes a week for a blog post to
>> appear in circulation after the author posts it to the network, it becomes
>> magnitudes more difficult for any assailant to trace the authorship of that
>> blog post - especially if that author never visited the website which hosts
>> their content in the first place!
>>
>> It also becomes a fairly trivial exercise to adapt the network to act as
>> a mixing service for digital currency such as Bitcoin. Furthermore, by
>> breaking the network into a number of smaller, disjoint networks for that
>> purpose, one is be able to counter many of the current attacks which target
>> existing mixing services.
>>
>> Cryptosystem
>>
>> I again emphasize that the cryptosystem in place is the result of a
>> rather rushed 48-hour hackathon - in a production system, I would recommend
>> implementing a peer-reviewed cryptosystem, such as the very lightweight
>> Sphinx, or, pending their coming proof of security, the recently proposed
>> Ibis. That being said, Dissentr works as follows:
>>
>> Every node in the network maintains an RSA-keypair, with the public key
>> being exposed to every node in a given cascade.
>> When a client wishes to send a message M through the network, they choose
>> some cascade C.
>> For each node in the cascade, beginning with the exit node, and
>> continuing through to the entrance node, the client generates an AES CFB128
>> key, which it uses to encrypt M. The key is then encrypted using that
>> node's public RSA key.
>> M, now encrypted with AES CFB128 for every node in the cascade, is then
>> passed to the entrance node along with the encrypted AES keys. The entrance
>> node then uses its private RSA key to decrypt the AES key, so that it can
>> subsequently decrypt M, yielding yet another cipher text.
>> This process is repeated for every node in the cascade, until the final
>> node decrypts M to a plaintext, which it then handles accordingly.
>> Building and Running it
>>
>> If, after all of my warnings, you still want to see it in action, it's
>> dead-easy to get setup. All you'll need is Erlang installed (Tested on
>> R16B02), along with Elixir. From there, you'll want to invoke the following
>> from within Dissentr's directory, on every machine you want to host a node:
>>
>> iex --sname {Any name, different per machine} --cookie {Any string,
>> common between all machines} -S mix
>> This will stick you into a REPL, loaded with Dissentr's namespaces and
>> dependencies. Sorry, there's no interface yet. From there, if you're using
>> more than one machine, you'll want to link them all together, by running
>> the following on every machine you want to host a node on. Since Erlang
>> node connections are transitive, you won't have to do this for every pair
>> of nodes.:
>>
>> :net_adm.ping(binary_to_atom(hostname))
>> The hostname in question can be found in the iex prompt. Most likely it
>> will be something@domain.
>>
>> Now, just spawn a few nodes to create a network. I've got some temporary
>> methods in place for making this easy, using some hardcoded keys stored in
>> example_data/ for testing. Ideally, each node will be hosted on a different
>> machine, but for testing purposes it doesn't matter. Within your prompt,
>> execute the following:
>>
>> Dissentr.Cascade.add_node(:node1, nil, 1)
>> Dissentr.Cascade.add_node(:node2, :node1, 2)
>> Dissentr.Cascade.add_node(:node3, :node2, 3)
>> Dissentr.Cascade.add_node(:node4, :node3, 4)
>> Dissentr.Cascade.add_node(:node5, :node4, 5)
>> Finally, to send an encrypted message, run the following, substituting
>> the node and message as desired:
>>
>> Dissentr.Cascade.mix(:node3, "Something, something, NSA")
>> If all went well, you should see a debug statement print out the
>> plaintext message, on the machine which is hosting :node1
>>
>

--047d7b15fbf58009a104e727b237
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div><div><div>Tor is a low latency network in the sense t=
hat packets are forwarded as soon as they are received. Outwardly, it may n=
ot appear as a low latency network because ping times can exceed 30 seconds=
, however from a security point of view Tor is a low latency network.<br>
<br></div>A high latency network is one that holds onto traffic until it ha=
s a huge batch to send out. With enough traffic, you could theoretically im=
plement a high latency network that is faster than Tor, but a high latency =
network could also theoretical take days to respond to a request.<br>
<br></div>With Tor, if you are observing every node in the network you can =
guess at people&#39;s identities by correlating traffic. If one node sends =
exactly X bytes to a node that sends the same number of bytes to the next n=
ode, you can assume that the two nodes are connected in a circuit.<br>
<br></div>In a high latency network, you would wait to send data to the nex=
t node until you have many different requests to send to the next node. Thi=
s makes traffic correlation a lot harder because you can&#39;t distinguish =
a particular request of X bytes from the other requests that are being sent=
 over the network.<br>
</div><div class=3D"gmail_extra"><br><br><div class=3D"gmail_quote">On Tue,=
 Sep 24, 2013 at 9:05 PM, Lee Azzarello <span dir=3D"ltr">&lt;<a href=3D"ma=
ilto:lee@guardianproject.info" target=3D"_blank">lee@guardianproject.info</=
a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">Woah woah woah. When did the message go out =
about changing Tor to a &quot;low latency&quot; network? High latency is th=
e number one criticism of Tor from users.<div>
<br></div><div>In addition UDP traffic won&#39;t even pass through Tor. Thi=
s results in=A0low-latency real time applications like VoIP impossible over=
 that network<span></span>.=A0</div>
<div><br></div><div>Perhaps the author is not aware of these properties of =
Internet protocols?</div><div><br></div><div>-lee<br><br>On Tuesday, Septem=
ber 24, 2013, Eugen Leitl  wrote:<br><blockquote class=3D"gmail_quote" styl=
e=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex">

<br>
<a href=3D"https://github.com/ShaneWilton/dissentr" target=3D"_blank">https=
://github.com/ShaneWilton/dissentr</a><br>
<br>
Note: This project was created as part of a 36-hour hackathon - and primari=
ly as a proof of concept. While the ideas may be sound, and the prototype m=
ay work as designed, the protocols involved in this specific project have n=
ot been peer-reviewed, and so I cannot recommend that the network be used f=
or anything requiring serious privacy.<br>


<br>
Dissentr<br>
A High-Latency Overlay Mix Network<br>
<br>
Essentially, Dissentr is a security-minded network, inspired by Tor, with a=
 few important characteristics which serve to differentiate it.<br>
<br>
High-Latency<br>
<br>
Tor is a low-latency network. This makes it ideal for real time activities =
like web browsing, but as a result, opens it up to attacks involving large-=
scale traffic analysis methods known as end-to-end correlation. In these at=
tacks, an adversary with the ability to analyze massive amounts of traffic =
in a short period of time is able to match up traffic entering the network =
with the corresponding traffic which will inevitably soon exit it.<br>


<br>
Dissentr manages to protect against these sorts of attacks by being enginee=
red as a high-latency network. Assuming any given node has not been comprom=
ised, that node will intentionally hold off on forwarding its traffic to th=
e next node in the network until it is able to forward a large amount of da=
ta in bulk, rendering the aforementioned end-to-end correlation far less fe=
asible. For an excellent discussion on this attack, and possible countermea=
sures, see Practical Traffic Analysis: Extending and Resisting Statistical =
Disclosure.<br>


<br>
Cascades<br>
<br>
Much like any mix network, Dissentr models its network as a graph of nodes,=
 each responsible for handling the relay of traffic as it moves along some =
path through the network. Where Dissentr differs from a network such as Tor=
 is in how this path is constructed. In Dissentr, the network is constructe=
d out of cascades (A term I first heard described by Ian Goldberg, but I&#3=
9;ve been unable to pin down an original source for): essentially directed,=
 acyclic sub-graphs, in which a node defines a set of &quot;trusted&quot; n=
odes, through which they are willing to relay traffic through. Dissentr sim=
plifies this model by only allowing for nodes of out-degree 1, at this time=
. This construction brings about a number of useful results:<br>


<br>
In the event that a node is known to be compromised, individual nodes are a=
llowed the ability to either remove themselves from a cascade, or bypass un=
trusted nodes entirely, without the necessity of a trusted third-party.<br>


The network is protected from &quot;supernode invasions,&quot; in which an =
attacker floods the network with compromised nodes, in the hopes of either =
endangering the network&#39;s health, or placing the security of users pass=
ing through their nodes at risk of traffic interception, and subsequent ana=
lysis. This can be guaranteed because cascades are constructed by virtue of=
 a measure of trust between node-operators, and so long as there exists som=
e non-zero subset of trusted operators, they retain the ability to form a c=
ascade of their own, effectively shutting out the efforts of such an attack=
er.<br>


Use-Cases<br>
<br>
As mentioned previously, the high-latency nature of the network causes a sh=
ift in the sorts of activities best facilitated by its use, however, there =
do exist some unique opportunities which I have neither seen implemented in=
 the context of a mix network, nor discussed in the literature.<br>


<br>
A personal favourite idea revolves around creating a platform for political=
 blogging, which, assuming a noisy enough network, would offer political di=
ssidents the ability to freely write about issues of corruption or governme=
nt abuse, without many of the risks associated with using a lower-latency n=
etwork like Tor. If it takes a week for a blog post to appear in circulatio=
n after the author posts it to the network, it becomes magnitudes more diff=
icult for any assailant to trace the authorship of that blog post - especia=
lly if that author never visited the website which hosts their content in t=
he first place!<br>


<br>
It also becomes a fairly trivial exercise to adapt the network to act as a =
mixing service for digital currency such as Bitcoin. Furthermore, by breaki=
ng the network into a number of smaller, disjoint networks for that purpose=
, one is be able to counter many of the current attacks which target existi=
ng mixing services.<br>


<br>
Cryptosystem<br>
<br>
I again emphasize that the cryptosystem in place is the result of a rather =
rushed 48-hour hackathon - in a production system, I would recommend implem=
enting a peer-reviewed cryptosystem, such as the very lightweight Sphinx, o=
r, pending their coming proof of security, the recently proposed Ibis. That=
 being said, Dissentr works as follows:<br>


<br>
Every node in the network maintains an RSA-keypair, with the public key bei=
ng exposed to every node in a given cascade.<br>
When a client wishes to send a message M through the network, they choose s=
ome cascade C.<br>
For each node in the cascade, beginning with the exit node, and continuing =
through to the entrance node, the client generates an AES CFB128 key, which=
 it uses to encrypt M. The key is then encrypted using that node&#39;s publ=
ic RSA key.<br>


M, now encrypted with AES CFB128 for every node in the cascade, is then pas=
sed to the entrance node along with the encrypted AES keys. The entrance no=
de then uses its private RSA key to decrypt the AES key, so that it can sub=
sequently decrypt M, yielding yet another cipher text.<br>


This process is repeated for every node in the cascade, until the final nod=
e decrypts M to a plaintext, which it then handles accordingly.<br>
Building and Running it<br>
<br>
If, after all of my warnings, you still want to see it in action, it&#39;s =
dead-easy to get setup. All you&#39;ll need is Erlang installed (Tested on =
R16B02), along with Elixir. From there, you&#39;ll want to invoke the follo=
wing from within Dissentr&#39;s directory, on every machine you want to hos=
t a node:<br>


<br>
iex --sname {Any name, different per machine} --cookie {Any string, common =
between all machines} -S mix<br>
This will stick you into a REPL, loaded with Dissentr&#39;s namespaces and =
dependencies. Sorry, there&#39;s no interface yet. From there, if you&#39;r=
e using more than one machine, you&#39;ll want to link them all together, b=
y running the following on every machine you want to host a node on. Since =
Erlang node connections are transitive, you won&#39;t have to do this for e=
very pair of nodes.:<br>


<br>
:net_adm.ping(binary_to_atom(hostname))<br>
The hostname in question can be found in the iex prompt. Most likely it wil=
l be something@domain.<br>
<br>
Now, just spawn a few nodes to create a network. I&#39;ve got some temporar=
y methods in place for making this easy, using some hardcoded keys stored i=
n example_data/ for testing. Ideally, each node will be hosted on a differe=
nt machine, but for testing purposes it doesn&#39;t matter. Within your pro=
mpt, execute the following:<br>


<br>
Dissentr.Cascade.add_node(:node1, nil, 1)<br>
Dissentr.Cascade.add_node(:node2, :node1, 2)<br>
Dissentr.Cascade.add_node(:node3, :node2, 3)<br>
Dissentr.Cascade.add_node(:node4, :node3, 4)<br>
Dissentr.Cascade.add_node(:node5, :node4, 5)<br>
Finally, to send an encrypted message, run the following, substituting the =
node and message as desired:<br>
<br>
Dissentr.Cascade.mix(:node3, &quot;Something, something, NSA&quot;)<br>
If all went well, you should see a debug statement print out the plaintext =
message, on the machine which is hosting :node1<br>
</blockquote></div>
</blockquote></div><br></div>

--047d7b15fbf58009a104e727b237--

