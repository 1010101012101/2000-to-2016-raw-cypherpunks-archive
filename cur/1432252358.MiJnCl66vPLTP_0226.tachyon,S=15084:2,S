From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Tue Jul  8 15:25:34 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pa0-f49.google.com (mail-pa0-f49.google.com [209.85.220.49])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68JPWD3026517
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Tue, 8 Jul 2014 15:25:33 -0400
Received: by mail-pa0-f49.google.com with SMTP id lj1so7778417pab.22
        for <rsw@jfet.org>; Tue, 08 Jul 2014 12:25:26 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-original-authentication-results:delivered-to:user-agent
         :in-reply-to:references:mime-version:content-type
         :content-transfer-encoding:subject:date:to:message-id:cc:precedence
         :list-id:list-unsubscribe:list-archive:list-post:list-help
         :list-subscribe:errors-to:sender:from;
        bh=trnpiZm9hCFfPgDZVLi2PA7YgadRPoEaKp8tiTU3/F0=;
        b=baR+iDgqO3cw487gJHPXE2oVyZJ5fAI3s7qJSeTUYFZmkIijBV2sMx5FqUpc3j0wk2
         RaoornJLYFMEZqSBCyWcfHgV8zyLUiUaziF5IkU2xigY93xUzZlFHz3cdKxtZZap4GY0
         6BFab+F/Im7JU4C2wxLY9e1ieYw/tEfGcWywuSRFiasByY4kJ+PTRQysvixE01QzbasG
         CsGvfDejCSriOiTkjCuCYO6ApGQJByOhBsoHhyPBqAF6tUtb5jiw268RyMI1SNTxBXqU
         2e1tn7WQmuRB0JaeBgxqktphVwuW1E9kGpDYjDzNMQt2u1S/bUzq81fL1Aj76CzrIh8n
         PPOA==
X-Original-Authentication-Results: mx.google.com;       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net
X-Received: by 10.68.160.163 with SMTP id xl3mr37684003pbb.39.1404847526522;
        Tue, 08 Jul 2014 12:25:26 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.25.164 with SMTP id d4csp364592pdg;
        Tue, 8 Jul 2014 12:25:25 -0700 (PDT)
X-Received: by 10.70.0.48 with SMTP id 16mr7043971pdb.8.1404847525522;
        Tue, 08 Jul 2014 12:25:25 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id a4si6419334pdm.9.2014.07.08.12.25.25
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Tue, 08 Jul 2014 12:25:25 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68JNjZ1026497;
	Tue, 8 Jul 2014 15:23:46 -0400
Received: from mail-02.1984.is (mail-02.1984.is [93.95.224.7])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68JNdjW026492
 (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Tue, 8 Jul 2014 15:23:41 -0400
Received: from [79.97.89.194] (helo=[192.168.0.12])
 by mail-02.1984.is with esmtpsa (TLSv1:DHE-RSA-AES256-SHA:256)
 (Exim 4.80) (envelope-from <cathalgarvey@cathalgarvey.me>)
 id 1X4azL-0004qS-GH; Tue, 08 Jul 2014 19:23:39 +0000
User-Agent: K-9 Mail for Android
In-Reply-To: <CAOE4rSzEMCjRo57VQfP2gQ4xrCpKLxKd23XvH0YxH7ZE7jCnmQ@mail.gmail.com>
References: <53B84037.7030406@cathalgarvey.me> <20140707084122.GQ6997@ctrlc.hu>
 <CAOE4rSwC55WuYLNRtV5ihZOoVakcaFeV6Z4_a--2nV3d7nOk-g@mail.gmail.com>
 <1997735.1n1TTR1eli@lapuntu> <53BB899A.40408@gmail.com>
 <CAOsGNSS1H87C666NJKNi7SQaftkxZkRhq6JOoS6NwyZsS5vaKg@mail.gmail.com>
 <CAOE4rSzEMCjRo57VQfP2gQ4xrCpKLxKd23XvH0YxH7ZE7jCnmQ@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/alternative;
 boundary="----CV9RY1DGGSKHWDE3W9LUQHZ85HCC5L"
Content-Transfer-Encoding: 8bit
Subject: Re: Tox.im
Date: Tue, 08 Jul 2014 20:22:23 +0100
To: =?UTF-8?Q?D=C4=81vis_Mos=C4=81ns?= <davispuh@gmail.com>,
        Zenaan Harkness <zen@freedbms.net>
Message-ID: <969fa7d4-d6b4-4d5c-bbbf-c5d7b6482746@email.android.com>
Cc: cypherpunks@cpunks.org
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: "Cathal (Phone)" <cathalgarvey@cathalgarvey.me>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 9918
Lines: 172

------CV9RY1DGGSKHWDE3W9LUQHZ85HCC5L
Content-Transfer-Encoding: 8bit
Content-Type: text/plain;
 charset=UTF-8

Biggest FAIL in json is lack of binary. I think a quick extension to bencoding is in order: "u<len>" prefix for utf8, "b<len>" for binary. Other types are pretty generally useful as-is. Replace "d", "l" and "e" with curly and square braces for readability. 

Bencoding's structure and basic idea is nice as it's terse and understandable, but also easy to make security guarantees about: length prefix, and on parse errors just dump the input and error out. Minimal overhead for raw binary, which is what you want for crypto, file transfers, and VoiP streams. Trivial to write in any language so rapidly portable, and can be coded recursively with relative ease without sacrificing understandability or security (much).

Thoughts? Bencoding 2.0?

On 8 July 2014 17:05:22 GMT+01:00, "Dāvis Mosāns" <davispuh@gmail.com> wrote:
>yeah I agree that using XML was bad idea in XMPP design, there's no
>good
>reason to use it, but XMPP is already thought out unlike any new
>protocol.
>But actually I think could use same XMPP protocol and just map on
>different
>encoding. What is XML?  basically it's just a language for data mapping
>(an
>encoding) and it would be perfectly possible to use same XMPP protocol
>concepts and map them on different data structure. And this is the
>thing I
>think should be pursued for. Which encoding to use is debatable. I
>would
>say using Google Protocol Buffers
><https://developers.google.com/protocol-buffers/> are perfect for
>network
>protocols. I haven't investigated how good is MessagePack, but it could
>be
>usable too. Only about JSON and similar I don't like that they're
>"type-less", they have just some basic data types like String, Number
>etc
>and you loose information that way, say you've uint32 and you store and
>transmit that with JSON and on other end it will be probably int64
>because
>that CPU is 64bit, of course you could find shortest fitting type, but
>that's not practical because you don't know limits of this field, maybe
>next message it will be bigger. In Protobuf there's types for
>everything
>int32, unit64 and so on.
>
>
>
>
>2014-07-08 11:25 GMT+03:00 Zenaan Harkness <zen@freedbms.net>:
>
>> On 7/8/14, "Łukasz \"Cyber Killer\" Korpalski"
><cyberkiller8@gmail.com>
>> wrote:
>> > W dniu 07.07.2014 16:55, rysiek pisze:
>> >> Dnia poniedziałek, 7 lipca 2014 16:06:47 Dāvis Mosāns pisze:
>> >>> I don't agree, I think XMPP could be good solution, while yes
>attack
>> >>> surface is quite large but it will be in any case, because even
>if you
>> >>> create the very minimalist chat protocol possible (let's say
>basically
>> >>> use
>> >>> asymmetric cryptography for messages which are plaintext without
>any
>> >>> features) you still can have bugs in cryptography library,
>network
>> >>> stack,
>> >>> OS/kernel. This part will be same no matter what messaging
>protocol you
>> >>> use.
>> >>
>> >> Exactly. And that's an argument for NOT minimizing the attack
>surface
>> >> beyond
>> >> these problems... how exactly?
>> >>
>> >> I mean, your argument is basically: "don't wash your hands, as
>there
>> might
>> >> be
>> >> salmonella in the eggs anyway". Dafuq?
>> >
>> > I'm going to defend XMPP too, but on the grounds that it's an
>already
>> > established and widely used protocol, the overhead is minimal
>looking
>> > from a modern point of view (even when not using the potentially
>> > privacy-risky elements) and it was designed to be extendable. These
>are
>> > imo good arguments to use xmpp instead of creating something new
>(again
>> > :-P ).
>>
>> As has been said over the decades: start correct, 'good' easy
>> to maintain code, secure of course, and optimize later,
>> eg 1-1 mapping from XMPP (XML I assume?) to say msgpack:
>> MessagePack: http://msgpack.org/ - a fast, binary replacement for
>JSON
>>
>> Such optimizations ought be behind a library anyway!
>> (From user app point of view.)
>>
>> As someone else said, think of the stack, separate the concerns:
>> IP, user addressing, persistence of ids, persistence of addresses,
>> crypting, dht, distributed storage, libs, user apps.
>>
>> For impatient programmers wanting instant gratification,
>> work on one layer in the stack.
>>
>>

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
------CV9RY1DGGSKHWDE3W9LUQHZ85HCC5L
Content-Type: text/html;
 charset=utf-8
Content-Transfer-Encoding: 8bit

<html><head></head><body>Biggest FAIL in json is lack of binary. I think a quick extension to bencoding is in order: &quot;u&lt;len&gt;&quot; prefix for utf8, &quot;b&lt;len&gt;&quot; for binary. Other types are pretty generally useful as-is. Replace &quot;d&quot;, &quot;l&quot; and &quot;e&quot; with curly and square braces for readability. <br>
<br>
Bencoding&#39;s structure and basic idea is nice as it&#39;s terse and understandable, but also easy to make security guarantees about: length prefix, and on parse errors just dump the input and error out. Minimal overhead for raw binary, which is what you want for crypto, file transfers, and VoiP streams. Trivial to write in any language so rapidly portable, and can be coded recursively with relative ease without sacrificing understandability or security (much).<br>
<br>
Thoughts? Bencoding 2.0?<br><br><div class="gmail_quote">On 8 July 2014 17:05:22 GMT+01:00, &quot;Dāvis Mosāns&quot; &lt;davispuh@gmail.com&gt; wrote:<blockquote class="gmail_quote" style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">
<div dir="ltr">yeah I agree that using XML was bad idea in XMPP design, there&#39;s no good reason to use it, but XMPP is already thought out unlike any new protocol. But actually I think could use same XMPP protocol and just map on different encoding. What is XML?  basically it&#39;s just a language for data mapping (an encoding) and it would be perfectly possible to use same XMPP protocol concepts and map them on different data structure. And this is the thing I think should be pursued for. Which encoding to use is debatable. I would say using <a href="https://developers.google.com/protocol-buffers/">Google Protocol Buffers</a> are perfect for network protocols. I haven&#39;t investigated how good is MessagePack, but it could be usable too. Only about JSON and similar I don&#39;t like that they&#39;re &quot;type-less&quot;, they have just some basic data types like String, Number etc and you loose information that way, say you&#39;ve uint32 and you store and transmit that with
JSON and on other end it will be probably int64 because that CPU is 64bit, of course you could find shortest fitting type, but that&#39;s not practical because you don&#39;t know limits of this field, maybe next message it will be bigger. In Protobuf there&#39;s types for everything int32, unit64 and so on.<br />
<br /><br /></div><div class="gmail_extra"><br /><br /><div class="gmail_quote">2014-07-08 11:25 GMT+03:00 Zenaan Harkness <span dir="ltr">&lt;<a href="mailto:zen@freedbms.net" target="_blank">zen@freedbms.net</a>&gt;</span>:<br />
<blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"><div class="">On 7/8/14, &quot;Łukasz \&quot;Cyber Killer\&quot; Korpalski&quot; &lt;<a href="mailto:cyberkiller8@gmail.com">cyberkiller8@gmail.com</a>&gt; wrote:<br />

&gt; W dniu 07.07.2014 16:55, rysiek pisze:<br />
&gt;&gt; Dnia poniedziałek, 7 lipca 2014 16:06:47 Dāvis Mosāns pisze:<br />
&gt;&gt;&gt; I don&#39;t agree, I think XMPP could be good solution, while yes attack<br />
&gt;&gt;&gt; surface is quite large but it will be in any case, because even if you<br />
&gt;&gt;&gt; create the very minimalist chat protocol possible (let&#39;s say basically<br />
&gt;&gt;&gt; use<br />
&gt;&gt;&gt; asymmetric cryptography for messages which are plaintext without any<br />
&gt;&gt;&gt; features) you still can have bugs in cryptography library, network<br />
&gt;&gt;&gt; stack,<br />
&gt;&gt;&gt; OS/kernel. This part will be same no matter what messaging protocol you<br />
&gt;&gt;&gt; use.<br />
&gt;&gt;<br />
&gt;&gt; Exactly. And that&#39;s an argument for NOT minimizing the attack surface<br />
&gt;&gt; beyond<br />
&gt;&gt; these problems... how exactly?<br />
&gt;&gt;<br />
&gt;&gt; I mean, your argument is basically: &quot;don&#39;t wash your hands, as there might<br />
&gt;&gt; be<br />
&gt;&gt; salmonella in the eggs anyway&quot;. Dafuq?<br />
&gt;<br />
&gt; I&#39;m going to defend XMPP too, but on the grounds that it&#39;s an already<br />
&gt; established and widely used protocol, the overhead is minimal looking<br />
&gt; from a modern point of view (even when not using the potentially<br />
&gt; privacy-risky elements) and it was designed to be extendable. These are<br />
&gt; imo good arguments to use xmpp instead of creating something new (again<br />
&gt; :-P ).<br />
<br />
</div>As has been said over the decades: start correct, &#39;good&#39; easy<br />
to maintain code, secure of course, and optimize later,<br />
eg 1-1 mapping from XMPP (XML I assume?) to say msgpack:<br />
MessagePack: <a href="http://msgpack.org/" target="_blank">http://msgpack.org/</a> - a fast, binary replacement for JSON<br />
<br />
Such optimizations ought be behind a library anyway!<br />
(From user app point of view.)<br />
<br />
As someone else said, think of the stack, separate the concerns:<br />
IP, user addressing, persistence of ids, persistence of addresses,<br />
crypting, dht, distributed storage, libs, user apps.<br />
<br />
For impatient programmers wanting instant gratification,<br />
work on one layer in the stack.<br />
<br />
</blockquote></div><br /></div>
</blockquote></div><br>
-- <br>
Sent from my Android device with K-9 Mail. Please excuse my brevity.</body></html>
------CV9RY1DGGSKHWDE3W9LUQHZ85HCC5L--

