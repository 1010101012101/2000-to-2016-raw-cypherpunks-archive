Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id u5O5IJr5027528;
	Fri, 24 Jun 2016 01:18:21 -0400
Authentication-Results: antiproton.jfet.org; dkim=pass
	reason="1024-bit key; unprotected key"
	header.d=amazonses.com header.i=@amazonses.com header.b=JZ3KNPeb;
	dkim-adsp=none (unprotected policy); dkim-atps=neutral
Received: from a27-29.smtp-out.us-west-2.amazonses.com
 (a27-29.smtp-out.us-west-2.amazonses.com [54.240.27.29])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id u5O5IFRx027524
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES256-SHA bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Fri, 24 Jun 2016 01:18:17 -0400
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/simple;
 s=gdwg2y3kokkkj5a55z2ilkup5wp5hhxx; d=amazonses.com; t=1466745488;
 h=From:Content-Type:Subject:Date:Message-Id:To:Mime-Version:Feedback-ID;
 bh=woBeJmismhf3EVC2k02QKPiEyP7rrfiVOtEF5CwwE4g=;
 b=JZ3KNPebmpmYQJhv6d6B3R9XGTGsVjtEShr2PD71wlhSXi2XZxW72Btq/GqCzcPg
 cxYyksCebVWUruqINXAi9z1qoCNuJlPSUeV5TeWs/O/JmzVzw7cEL8+8T2aQv7rfS79
 LpjTumuU7WDy5f7T5UdSL7o4pvPthET+f5zDVKaQ=
From: Carlos Rodriguez <carlos@s8f.org>
X-Pgp-Agent: GPGMail 2.6b2
Content-Type: multipart/signed;
 boundary="Apple-Mail=_3B1B3B91-00D2-4B49-A644-ACF5ABA778DB";
 protocol="application/pgp-signature"; micalg=pgp-sha256
Subject: Salty 4.0 released 40 years to the day after Diffie-Hellman algorithm
 invented
Date: Fri, 24 Jun 2016 05:18:08 +0000
Message-ID: <0101015580d804ce-f582d1b8-739a-4077-b756-ccfc55fc1021-000000@us-west-2.amazonses.com>
To: cypherpunks@cpunks.org, cryptography@metzdowd.com
Mime-Version: 1.0 (Mac OS X Mail 9.3 \(3124\))
X-Mailer: Apple Mail (2.3124)
X-SES-Outgoing: 2016.06.24-54.240.27.29
Feedback-ID: 1.us-west-2.zR9ZzldyJ/Y8LmPoHrR/tt5DwgtbKhXAnVHkdQlvSoQ=:AmazonSES
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Lines: 153


--Apple-Mail=_3B1B3B91-00D2-4B49-A644-ACF5ABA778DB
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain;
	charset=utf-8

Salty is a nodejs-powered CLI-based alternative to PGP/GPG using NaCl =
instead of RSA/DSA.

There is a GUI in progress.

Commits and tags in the Salty repo (and this announcement) are signed =
with GPG key 5FBB 2F98 3862 1AFF.

Features

	=E2=80=A2 NO 3rd parties (peerio), NO p2p network (PRISM-safe, =
usable on airgapped machines), NO browser js (it=E2=80=99s not safe!), =
NO exotic/compiled deps (goodbye openssl vulns), no Comodo SSL =
(CloudFlare), and NO shady corporations (Virgil Sec). PERIOD.
	=E2=80=A2 general purpose CLI, lightweight library attached
	=E2=80=A2 audited, bundled dependencies - no install scripts or =
backdoors
	=E2=80=A2 supports anonymous-sender or signed/verified messaging
	=E2=80=A2 sharable pubkey string that can fit in a single tweet
	=E2=80=A2 does NOT use your ssh keys, pgp keys, or anything RSA
	=E2=80=A2 encrypt public key is always ephemeral - does NOT leak =
metadata
	=E2=80=A2 sender identity is deniable, unless they explicitly =
commit to sign the message
	=E2=80=A2 file length hidden with padding
	=E2=80=A2 public signing/verifying with detached signatures
	=E2=80=A2 binary or =E2=80=9Cascii armor=E2=80=9D PEM output
	=E2=80=A2 import/export your wallet folder - PEM encoded and =
secretboxed with Scrypt KDF
	=E2=80=A2 (new in 3.1) can use anonymous private Github gists to =
remotely store salty messages
	=E2=80=A2 (new in 3.1) full tar/gz support for =
encrypting/decrypting directories (supports symmetric or asymmetric =
cipher)
	=E2=80=A2 MIT-licensed

=E2=80=94

How is this better than PGP?

This is a step-by-step rebuttal to =
[secushare](http://secushare.org/PGP)'s arguments against the PGP model, =
and how [Salty](https://s8f.org/salty.html) tries to make things right =
again.

### 1. Downgrade Attack: The risk of using it wrong.

Unlike PGP, Salty does not "integrate" into your browser, email client, =
or other sensitive software. Therefore, usability shortcomings of =
integration UIs will not raise security issues. It is up to the user to =
safeguard the connection (i.e. their email account) which Salty can't =
control, and is not interested in controlling. "Doing it wrong" is =
barely possible since there are so few modes of use, and all parameters =
are hard-coded into the software, so no critical choices are necessary =
on the part of the user.

### 2. The OpenPGP Format: You might aswell run around the city naked.

Salty does not include the sender or recipient's public key in =
plaintext. By default it encrypts using an ephemeral key and nonce, =
obscures the message length with padding, encrypts the real message =
length, and encrypts the info for verifying authenticity and integrity =
(hmac, public keys, and signature). Signature is opt-in.

### 3. Transaction Data: Mallory knows who you are talking to.

Fully anonymized traffic seems like a pipe dream, and (despite the =
existence of the Tor project) will probably not be possible in the near =
future. However, for what it's worth:

In theory, the idea of a "mixing service" from Bitcoin for =
psuedo-anonymizing transactions is possible using Salty files. Since a =
Salty file can only be made sense of by one who posesses the receiver's =
private key, a secure "drop box" could be set up where everyone dumps to =
the same folder, and everyone reads every file, trying to decrypt =
everything until decryptable files are found.

### 4. No Forward Secrecy: It makes sense to collect it all.

Salty solves this problem in two ways:

1. With Salty it's easy to refresh keys: just regenerate your decryption =
key, and tweet the resulting pubkey string. Destroying your encryption =
key effectively renders your previously received messages unreadable and =
useless to collect.
2. Recovering the 32-byte key used to encrypt a message will not allow =
decryption of all Alice<->Bob messages, since each message has a unique =
key as the result of Diffie-Hellman with Alice using an ephemeral key.

### 5. Cryptogeddon: Time to upgrade cryptography itself?

Salty throws out RSA and NIST-approved curves entirely, using the =
independently developed, peer-reviewed, battle tested, public domain =
NaCl crypto suite.

### 6. Federation: Get off the inter-server super-highway.

Salty is not a network protocol, but it's recommended to use the most =
secure channel possible to trade Salty messages. The same goes for any =
sensitive information transferred between two parties.

### 7. Discovery: A Web of Trust you can't trust.

Salty does not prescribe a web-of-trust model. Keyservers are optional =
and if one has a Twitter account, not necessary at all. End of story!

### 8. PGP conflates non-repudiation and authentication.

Salty allows the sender to decide whether to sign the message, revealing =
to the receiver (via HMAC) that they in fact constructed it with their =
known identity. By default, only message integrity is ensured, =
protecting the sender's privacy if they desire it.

### 9. Statistical Analysis: Guessing on the size of messages.

Salty does some random-padding to help obscure the message size.

### 10. Workflow: Group messaging with PGP is impractical.

This is still true. Group messaging is better done by a network =
protocol.

=E2=80=94

Code on Github: https://github.com/carlos8f/salty

Cheers,
Carlos

--Apple-Mail=_3B1B3B91-00D2-4B49-A644-ACF5ABA778DB
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
	filename=signature.asc
Content-Type: application/pgp-signature;
	name=signature.asc
Content-Description: Message signed with OpenPGP using GPGMail

-----BEGIN PGP SIGNATURE-----

iF4EAREIAAYFAldswo8ACgkQX7svmDhiGv8gwgD/RoAZIJWTytEDVYaun5g++oRq
wDWDYNz5d2jP37fk8akBAK6lglc9oyjWpO6pmVJDiItP3HVnIO9lr8YuC/EOjlJu
=8Lm6
-----END PGP SIGNATURE-----

--Apple-Mail=_3B1B3B91-00D2-4B49-A644-ACF5ABA778DB--

