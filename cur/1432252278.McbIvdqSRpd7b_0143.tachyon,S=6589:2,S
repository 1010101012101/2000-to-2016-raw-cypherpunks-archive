From cypherpunks-bounces@cpunks.org  Thu Jun  5 03:22:37 2014
Return-Path: <cypherpunks-bounces@cpunks.org>
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on antiproton.jfet.org
X-Spam-Level: 
X-Spam-Status: No, score=-4.2 required=-3.5 tests=BAYES_00,RCVD_IN_DNSWL_MED
	autolearn=no version=3.3.2
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s557MRlB014820;
	Thu, 5 Jun 2014 03:22:27 -0400
Received: from smtp.ee.ethz.ch (smtp.ee.ethz.ch [129.132.2.219])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s557IlQV014726
 (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Thu, 5 Jun 2014 03:18:49 -0400
Received: from localhost (localhost [127.0.0.1])
 by smtp.ee.ethz.ch (Postfix) with ESMTP id 7D2F5D9309;
 Thu,  5 Jun 2014 09:16:26 +0200 (MEST)
X-Virus-Scanned: by amavisd-new on smtp.ee.ethz.ch
Received: from smtp.ee.ethz.ch ([127.0.0.1])
 by localhost (.ee.ethz.ch [127.0.0.1]) (amavisd-new, port 10024)
 with LMTP id aZ2Wj6UhlJVq; Thu,  5 Jun 2014 09:16:26 +0200 (MEST)
Received: from mairac.local (77-56-63-150.dclient.hispeed.ch [77.56.63.150])
 (using TLSv1 with cipher DHE-RSA-AES128-SHA (128/128 bits))
 (No client certificate requested) (Authenticated sender: neuhaust)
 by smtp.ee.ethz.ch (Postfix) with ESMTPSA id 1996AD9304;
 Thu,  5 Jun 2014 09:16:26 +0200 (MEST)
Message-ID: <53901948.5080702@tik.ee.ethz.ch>
Date: Thu, 05 Jun 2014 09:16:24 +0200
From: Stephan Neuhaus <stephan.neuhaus@tik.ee.ethz.ch>
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9;
 rv:24.0) Gecko/20100101 Thunderbird/24.5.0
MIME-Version: 1.0
To: Andy Isaacson <adi@hexapodia.org>, Tom Ritter <tom@ritter.vg>
Subject: Re: "a skilled backdoor-writer can defeat skilled auditors"?
References: <1800350.DuBgtkdSDz@lapuntu>
 <20140603225302.GJ10586@hexapodia.org> <538EB484.7040405@tik.ee.ethz.ch>
 <CA+cU71mDpgRbi8zLV72qwvchN=Vf9JmXudv+=GJc_BaJT3k7kQ@mail.gmail.com>
 <20140604182252.GM10586@hexapodia.org>
In-Reply-To: <20140604182252.GM10586@hexapodia.org>
X-Enigmail-Version: 1.6
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Cc: cpunks <cypherpunks@cpunks.org>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 3635
Lines: 67

On 2014-06-04, 20:22, Andy Isaacson wrote:
> On Wed, Jun 04, 2014 at 08:50:14AM -0400, Tom Ritter wrote:
>> On 4 June 2014 01:54, Stephan Neuhaus <stephan.neuhaus@tik.ee.ethz.ch>
>> wrote:
>>> If you fail the audit, it's your duty as a professional auditor to
>>>  provide evidence that there is something actually wrong with the
>>> software.  It's OK to single out some pieces of code for closer
>>> inspection because of code smells, but if you try your darnedest to find
>>> something wrong with it and can't, then either the code is OK or you're
>>> not good enough an auditor.  In either case, you can flag the code, you
>>> can recommend rewriting it according to what you think is better style,
>>> but you can't in good conscience fail the audit.
> 
> Stephan,
> 
> I strongly disagree.  There are implementations that are Just Too
> Complicated and are Impossible To Audit.  Such implementation choices
> *do*, empirically, provide cover for bugs; and as we as a society build
> more and more software into the fabric of our life-critical systems it's
> imperative that "the implementor liked this complexity and refuses to
> change it" gives way to the larger goals at stake.  The auditor
> absolutely must have leeway to say "no you don't get to write your own
> string processing, you are going to use the standard ones."

I think that we are mostly in agreement, except perhaps in wording. We
both agree that auditors rarely "pass/fail" software in a binary
fashion.  And as I wrote, the auditor absolutely has the leeway to
recommend rewriting.

But my gripe was with the "automatic fail" in the original post, to
which I said that this was "going too far".  If you do go that far
(i.e., don't just recommend changes, but "fail" the audit), your verdict
must be founded on evidence.  For example, if it were actually true that
complexity, "empirically, provides cover for bugs", that would be a
perfectly good argument in favour of failing an audit.  It's just that
I've worked for a few years in precisely this field and all the studies
I saw simply failed to show the necessary correlations. (The best study
I know, by Yonghee Shin and Laurie Williams, shows rho <= 0.3, and that
on the vulnerability-infested Mozilla JavaScript engine. See
http://collaboration.csc.ncsu.edu/laurie/Papers/p47-shin.pdf)  This
shows, I think, that auditors must be extra careful not to confuse
folklore with evidence.

You can say "this code is too complex for me to audit", and you can add
"this should give you food for thought and you should consider rewriting
it in a simpler style", but *as the auditor* you cannot say "I fail the
code because I can't audit it" unless auditability was a design
requirement. (For the *owners* of the code, their options are of course
much greater, but we were talking about this from the auditor's
perspective, and the OP talked about an "automatic fail" if the code
turned out to have certain smells.  If a smell isn't backed up by
evidence, it's just a personal prejudice or folklore.  Which,
incidentally, would be excellent new terms to replace "Best Practice" in
many cases.)

Again, please note that I agree with you that auditability and
simplicity, using braces even for single-line if-statements, library
functions rather than self-made string libraries, and all these other
things, ought to be design requirements, especially for
security-critical software, because they make auditing easier.  It's
just that if it wasn't, then you can fault the design requirements
(though that may be outside your remit as auditor), but you can't
"automatically fail" the implementation.

Fun,

Stephan

