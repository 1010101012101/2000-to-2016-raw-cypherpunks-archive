From owner-cypherpunks@Algebra.COM  Wed Nov 20 19:06:52 2002
Return-Path: <owner-cypherpunks@Algebra.COM>
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.7.7.76])
	by positron.jfet.org (8.11.6/8.9.3) with ESMTP id gAL06qx18136
	for <rsw@opamp.org>; Wed, 20 Nov 2002 19:06:52 -0500
Received: from ak47.algebra.com ([209.120.156.51])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id TAA16369
	for <rsw@mit.edu>; Wed, 20 Nov 2002 19:06:51 -0500 (EST)
Received: from ak47.algebra.com (majordom@localhost [127.0.0.1])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id gAKNT5PI011880
	for <cypherpunks-outgoing@ak47.algebra.com>; Wed, 20 Nov 2002 17:29:05 -0600
Received: (from majordom@localhost)
	by ak47.algebra.com (8.12.1/8.12.1/Submit) id gAKNT58e011863
	for cypherpunks-outgoing; Wed, 20 Nov 2002 17:29:05 -0600
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from slack.lne.com (gw.lne.com [209.157.136.81])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id gAKNSmPI011698
	for <cypherpunks@ak47.algebra.com>; Wed, 20 Nov 2002 17:28:49 -0600
Received: (from cpunk@localhost)
	by slack.lne.com (8.12.5/8.12.5) id gAKNSjtB027078
	for cypherpunks@ak47.algebra.com; Wed, 20 Nov 2002 15:28:45 -0800
Received: (from majordom@localhost)
	by slack.lne.com (8.12.5/8.12.5) id gAKNMdHp026952
	for cypherpunks-goingout345; Wed, 20 Nov 2002 15:22:39 -0800
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
X-Zen-Trace: 62.3.121.225
User-Agent: Microsoft Outlook Express Macintosh Edition - 5.01 (1630)
Date: Wed, 20 Nov 2002 23:22:30 +0000
Old-Subject: Re: Psuedo-Private Key (eJazeera)
From: Peter Fairbrother <zenadsl6186@zen.co.uk>
To: <cypherpunks@lne.com>
Message-ID: <BA01C9B5.2659D%zenadsl6186@zen.co.uk>
In-Reply-To: <F22wi23mZaendQxwZc100003c7e@hotmail.com>
Mime-version: 1.0
Content-type: text/plain; charset="US-ASCII"
Content-transfer-encoding: 7bit
X-Loop: cypherpunks@lne.com
X-spam: 0 
X-Spam-Status: No, hits=-1.7 required=10.0
	tests=FROM_ENDS_IN_NUMS,IN_REP_TO,QUOTED_EMAIL_TEXT,
	      SIGNATURE_SHORT_DENSE,SPAM_PHRASE_00_01,USER_AGENT,
	      USER_AGENT_MACOE,X_AUTH_WARNING,X_LOOP
	version=2.43
Subject:  Re: Psuedo-Private Key (eJazeera)
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
Status: O
Content-Length: 2689
Lines: 59


Tyler Durden wrote:
[...]
> Let's say I've been coerced into revealing the private key to a certain
> encrypted message. And now, of course, the authorities use that key and open
> the message, and see the contents (let's assume they are picture of a
> demonstration or whatever).
> 
> WOULDN'T IT BE NICE...If the original encrypted message actually had TWO
> messages inside it, both very similar. In this example, one of the messages
> is the "incriminating" pictures of the demonstration, the other is pictures
> of Pam Anderson or whatever.
> 
> AND, this double message has two private keys associated with it: one
> corresponds to the Pam Anderson photos, the other corresponds to the
> Demonstration photos. When coerced, I give up the key that opens the Pam
> Anderson photos (while hopefully annhilating the Incriminating photos).
> 
> Of course, there's no way the authorities know that there was another
> message (not if done very cleverly...Pam Anderson photos might be a little
> obvious) that they destroyed when they used the fake Private Key.
> 
> Does this exist? Would it be difficult?

Yes it exists. It's called deniable encryption. Two-level deniable
encryption is not hard, but it usually involves increases in data size.
There is some stuff about this in Crypto and Eurocrypt reports.

Steganography and steganogaphic filing systems can do something similar, but
the increase in message size tends to be larger.


I am developing a form of deniable encryption (as part of m-o-o-t) that
works slightly differently and does not involve message-size increases - in
fact it it decreases message size.

It's grammer-based and works a bit like this: A sentence is parsed, and eg
a noun is encoded as a number relating to one of a publicly shared
dictionary of nouns. This number is then encrypted. Decrypting with a random
key will give a noun in that position in the sentence in all possible
decryptions, and a good proportion of all randomly keyed decryptions will
apparently make sense.

There is a lot more involved, so eg both parties can give out the same false
key, and so eg the same nouns used more than once in a message will decrypt
to identical nouns in decryptions, as well as notions of closeness in the
words used in a typical message, but I have done both the theoretical
unicity calculations and some practical tests, and it works for email-length
messages. 

The main implementation problems I have are coding time and that the only
parser that works well enough is proprietary. If anyone else is working on
something similar I would like to know. I'm probably not a cypherpunk, more
a privacy avocate, but I do write code.

:)

-- 
Peter Fairbrother

