From owner-cypherpunks-outgoing@EINSTEIN.ssz.com  Thu Sep  7 20:11:40 2000
Received: from MIT.EDU (PACIFIC-CARRIER-ANNEX.MIT.EDU [18.69.0.28])
	by positron.mit.edu (8.9.3/8.9.3) with SMTP id UAA21987
	for <kwantam@positron.mit.edu>; Thu, 7 Sep 2000 20:11:40 -0400
Received: from einstein.ssz.com by MIT.EDU with SMTP
	id AA22732; Thu, 7 Sep 00 20:12:07 EDT
Received: (from mdom@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id TAA09049
	for cypherpunks-outgoing; Thu, 7 Sep 2000 19:19:25 -0500
Received: from mail1.wiu.edu (root@[143.43.222.211])
	by einstein.ssz.com (8.8.8/8.8.8) with ESMTP id TAA09045
	for <cypherpunks@einstein.ssz.com>; Thu, 7 Sep 2000 19:19:21 -0500
Received: from [143.43.243.231] (ip243-231.tanner.resnet.wiu.edu [143.43.243.231])
	by mail1.wiu.edu (8.9.3/8.9.3) with ESMTP id TAA18937;
	Thu, 7 Sep 2000 19:01:58 -0500 (CDT)
Mime-Version: 1.0
X-Sender: mukve@pop3.wiu.edu
Message-Id: <p04320400b5dddc1c270b@[143.43.243.231]>
In-Reply-To: 
 <F504A8CEE925D411AF4A00508B8BE90A039312@exna07.securitydynamics.com>
References: 
 <F504A8CEE925D411AF4A00508B8BE90A039312@exna07.securitydynamics.com>
Date: Thu, 7 Sep 2000 19:02:18 -0500
To: "Trei, Peter" <ptrei@rsasecurity.com>, juzam <juzam@cyberspace.org>,
        cypherpunks@einstein.ssz.com
From: Kevin Elliott <k-elliott@wiu.edu>
Subject: RE: CDR: Re: Permutations in DES
Content-Type: text/plain; charset="us-ascii" ; format="flowed"
Sender: owner-cypherpunks@EINSTEIN.ssz.com
Precedence: bulk
Reply-To: cypherpunks@EINSTEIN.ssz.com
X-Mailing-List: cypherpunks@ssz.com
X-List-Admin: list@ssz.com
X-Loop: ssz.com
X-Language: English, Russian, German
Status: O
Content-Length: 1467
Lines: 32

At 10:13 -0400 9/7/00, Trei, Peter wrote:
>	For brute force key search, the initial permution can effectively be
>	factored out, and neither speeds nor impedes the search. This was
>	done by all of the keysearch apps used in the RSA Symmetric DES
>	Challenges.

Do you have a link and/or expanded information on the specifics?

>	I (this was before I worked for RSA) also described an extremely
>fast
>	method to generate and iterate key schedules which was also widely
>	used, reducing key schedule management from 90% of cpu to less
>	than 10%.

Does this method work for apps that are generating and testing lots 
of keys or does the initial key generation step still have to be 
undertaken?  The whole point of the blowfish technique was to 
increase the attackers required effort.  It was basicly assumed that 
valid users would simply store the expanded key.  Is their a link 
somewhere to more information on this technique or could you expand 
on it?
-- 

Kevin "The Cubbie" Elliott 
<mailto:kelliott@mac.com>                             ICQ#23758827
_______________________________________________________________________________
"As nightfall does not come at once, neither does oppression. In both 
instances, there is a twilight when everything remains seemingly 
unchanged.  And it is in such twilight that we all must be most aware 
of change in the air--however slight--lest we become unwitting 
victims of the darkness."
-- Justice William O. Douglas

