From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Sat Sep 27 14:50:21 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pa0-f49.google.com (mail-pa0-f49.google.com [209.85.220.49])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s8RIoKAJ026726
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Sat, 27 Sep 2014 14:50:21 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=IdergHGA;
	dkim-adsp=none (unprotected policy); dkim-atps=neutral
Received: by mail-pa0-f49.google.com with SMTP id lf10so15317548pab.22
        for <rsw@jfet.org>; Sat, 27 Sep 2014 11:50:14 -0700 (PDT)
X-Received: by 10.68.69.109 with SMTP id d13mr39930883pbu.40.1411843814271;
        Sat, 27 Sep 2014 11:50:14 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.92.9 with SMTP id ci9csp1427pdb;
        Sat, 27 Sep 2014 11:50:13 -0700 (PDT)
X-Received: by 10.66.141.165 with SMTP id rp5mr43773293pab.115.1411843812937;
        Sat, 27 Sep 2014 11:50:12 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id b7si6093208pdm.75.2014.09.27.11.50.12
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Sat, 27 Sep 2014 11:50:12 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net;
       dkim=fail header.i=@gmail.com;
       dmarc=fail (p=NONE dis=NONE) header.from=gmail.com
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s8RImukj026706;
	Sat, 27 Sep 2014 14:49:03 -0400
Received: from mail-we0-f182.google.com (mail-we0-f182.google.com
 [74.125.82.182])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s8RImpvJ026702
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Sat, 27 Sep 2014 14:48:53 -0400
Received: by mail-we0-f182.google.com with SMTP id u57so9294905wes.27
 for <cypherpunks@cpunks.org>; Sat, 27 Sep 2014 11:48:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:from:date:message-id:subject:to
 :cc:content-type;
 bh=dm8z8pK3mtWU/u1N+LaZZH0skTYLhj6BWh6Bk7gbnDA=;
 b=IdergHGA1c14FDngqeCixArB+rb73N6A28/q1q6TBybbZ+P2MgRAypTi+8KheciwT7
 Oo5E3u8uRPxLW75w+/x7pF2Qoq4wbctBtUcuSLHR8qmIZPbdtlDnq+deo3flRcXWpQxK
 cckdSqlNBeuJZF2+Aa1vGtJ4Ez8IGBzJ9wkK22p4/3TvzrYcvykxax+WFES8FT2kkj3p
 SeNltw39LXdbxoIyNcNhwgl7HT+LOCN7ErxQhQOyxxrDHxZ31J690w6shDj2uhLjabDv
 Q/tATz0cd51skbzbz1nuxpZr9tRBrJAjZu4g7Cgvjdf73gV6mG93rp1m9WwX+YbxLutf
 2Q6g==
X-Received: by 10.194.209.207 with SMTP id mo15mr31347944wjc.6.1411843725033; 
 Sat, 27 Sep 2014 11:48:45 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.216.80.138 with HTTP; Sat, 27 Sep 2014 11:48:24 -0700 (PDT)
In-Reply-To: <CAHWD2rKUxNKtXgQ8VtvW9_L4XcXKxrRXaCVF+fZiH9_o2jE3Ug@mail.gmail.com>
References: <20140927160304.GC1755@nl.grid.coop>
 <CAHWD2rKUxNKtXgQ8VtvW9_L4XcXKxrRXaCVF+fZiH9_o2jE3Ug@mail.gmail.com>
Date: Sat, 27 Sep 2014 14:48:24 -0400
Message-ID: <CAKtE3zcZ9LuBKvJnFm_RJ3te=MotchXXDioJa17291uHUvFJFg@mail.gmail.com>
Subject: Re: bashing your head against nation-state social engineering
To: =?UTF-8?Q?Lodewijk_andr=C3=A9_de_la_porte?= <l@odewijk.nl>
Content-Type: multipart/alternative; boundary=047d7b3a8314b589e50504107b86
Cc: "cypherpunks@cpunks.org" <cypherpunks@cpunks.org>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: Travis Biehn <tbiehn@gmail.com>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 9116
Lines: 164

--047d7b3a8314b589e50504107b86
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

I'm partial to Joanna Rutkowska's statement that "Security by Isolation" is
the best course followed for -users- of software. [in addition to all the
patching and whatever.]

Developers of that software, ultimately, are responsible for securing their
stuff. As an aside - separating your complex system into multiple trust
zones, from a development standpoint, is de-rigueur for secure design.

Security heads have long been decrying cgi-bin. Most of the reason is that
the threat surface is insane - for binaries you have user input that's not
running in some sort of VM [php,perl,ruby,node.js, etc] and existing in
memory entangled with executable instructions.

Injection attacks, are, of course old-hat. The daemons could have done some
hand-holding in this respect before passing off headers to ENV variables.

The issue is that 'restricted chars' wasn't defined by a standard interface
between daemon and cgi-bin script. The called function has a completely
arbitrary set of restricted chars.
/bin/bash, of course, isn't written to withstand env attacks - since the
calling user controls the env / and bash is executed under that user's
privileges.
So it is, of a matter of course, inevitable to find vulnerability there.
With one process isolating the client from the env, modifying the env as a
result of the user's whims and then passing off to a sub-process that
trusts the env implicitly.

It is very unlikely that any TLA 'created' this vulnerability. The notion
is entirely incredible. The existence of vulnerability in such a design is
immediately obvious from anyone who takes more than a cursory look at it.
That isn't to say that this specific attack was trivial to identify - that
is to say from an architecture standpoint it should be evident that the
handoff between httpd and cgi-bin is a location of extreme vulnerability.

On a related note: Mirage OS looks like it's on a promising tack:
http://www.xenproject.org/developers/teams/mirage-os.html

-Travis

On Sat, Sep 27, 2014 at 12:49 PM, Lodewijk andr=C3=A9 de la porte <l@odewij=
k.nl>
wrote:

> Know what you code, and what you run. Don't be fooled by words and shapes=
,
> code does what code does, that is all.
>
> We seriously need a way to detach code from mental models to expose hidde=
n
> features. Basically, all computer law is rubbish because everything you r=
un
> on your computer, exploits and all, is something you run by choice. But
> there's no way you could validate the sheer bulk of code. If you want to
> really solve security flaws it'll involve somehow validating the
> possibilities of the code run.
>
> It's a discipline that touches on visualization, automated testing and
> simplification. Simplification meaning, reducing possible states and
> "execution paths". And just making code easier to comprehend.
>
> The problem is that there's either no market for "truly secure" computing=
,
> or there's just nobody filling the gap. Banks with their Cobol are laughe=
d
> at, mostly, and accused of lacking innovation. They do lack innovation in
> the technical field. And Cobol is definitely not an ideal language. But
> "truly secure" is worth a lot to them. L4 validated is a step in the righ=
t
> direction, but catches a lot of wind saying it's still imperfect and
> therefore worthless.
>
> I'm utterly bored by code review. Maybe it'd be better if there were some
> nicer tools to help out. I'm really sure someone has great recommendation=
s
> regarding this. (That don't even require Cobol :)
>



--=20
Twitter <https://twitter.com/tbiehn> | LinkedIn
<http://www.linkedin.com/in/travisbiehn> | GitHub <http://github.com/tbiehn=
>
| TravisBiehn.com <http://www.travisbiehn.com> | Google Plus
<https://plus.google.com/+TravisBiehn>

--047d7b3a8314b589e50504107b86
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">I&#39;m partial to Joanna Rutkowska&#39;s statement that &=
quot;Security by Isolation&quot; is the best course followed for -users- of=
 software. [in addition to all the patching and whatever.]=C2=A0<div><div><=
br></div><div>Developers of that software, ultimately, are responsible for =
securing their stuff. As an aside - separating your complex system into mul=
tiple trust zones, from a development standpoint, is de-rigueur for secure =
design.</div><div><br></div><div><div>Security heads have long been decryin=
g cgi-bin. Most of the reason is that the threat surface is insane - for bi=
naries you have user input that&#39;s not running in some sort of VM [php,p=
erl,ruby,node.js, etc] and existing in memory entangled with executable ins=
tructions.=C2=A0</div></div><div><br></div><div>Injection attacks, are, of =
course old-hat. The daemons could have done some hand-holding in this respe=
ct before passing off headers to ENV variables.=C2=A0</div><div><br></div><=
div>The issue is that &#39;restricted chars&#39; wasn&#39;t defined by a st=
andard interface between daemon and cgi-bin script. The called function has=
 a completely arbitrary set of restricted chars.=C2=A0</div><div>/bin/bash,=
 of course, isn&#39;t written to withstand env attacks - since the calling =
user controls the env / and bash is executed under that user&#39;s privileg=
es.</div><div>So it is, of a matter of course, inevitable to find vulnerabi=
lity there. With one process isolating the client from the env, modifying t=
he env as a result of the user&#39;s whims and then passing off to a sub-pr=
ocess that trusts the env implicitly.</div><div><br></div><div>It is very u=
nlikely that any TLA &#39;created&#39; this vulnerability. The notion is en=
tirely incredible. The existence of vulnerability in such a design is immed=
iately obvious from anyone who takes more than a cursory look at it. That i=
sn&#39;t to say that this specific attack was trivial to identify - that is=
 to say from an architecture standpoint it should be evident that the hando=
ff between httpd and cgi-bin is a location of extreme vulnerability.</div><=
div><br></div><div>On a related note: Mirage OS looks like it&#39;s on a pr=
omising tack: <a href=3D"http://www.xenproject.org/developers/teams/mirage-=
os.html">http://www.xenproject.org/developers/teams/mirage-os.html</a>=C2=
=A0</div><div><br></div><div>-Travis</div></div></div><div class=3D"gmail_e=
xtra"><br><div class=3D"gmail_quote">On Sat, Sep 27, 2014 at 12:49 PM, Lode=
wijk andr=C3=A9 de la porte <span dir=3D"ltr">&lt;<a href=3D"mailto:l@odewi=
jk.nl" target=3D"_blank">l@odewijk.nl</a>&gt;</span> wrote:<br><blockquote =
class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid=
;padding-left:1ex"><div dir=3D"ltr"><div class=3D"gmail_extra">Know what yo=
u code, and what you run. Don&#39;t be fooled by words and shapes, code doe=
s what code does, that is all.</div><div class=3D"gmail_extra"><br></div><d=
iv class=3D"gmail_extra">We seriously need a way to detach code from mental=
 models to expose hidden features. Basically, all computer law is rubbish b=
ecause everything you run on your computer, exploits and all, is something =
you run by choice. But there&#39;s no way you could validate the sheer bulk=
 of code. If you want to really solve security flaws it&#39;ll involve some=
how validating the possibilities of the code run.</div><div class=3D"gmail_=
extra"><br></div><div class=3D"gmail_extra">It&#39;s a discipline that touc=
hes on visualization, automated testing and simplification. Simplification =
meaning, reducing possible states and &quot;execution paths&quot;. And just=
 making code easier to comprehend.</div><div class=3D"gmail_extra"><br></di=
v><div class=3D"gmail_extra">The problem is that there&#39;s either no mark=
et for &quot;truly secure&quot; computing, or there&#39;s just nobody filli=
ng the gap. Banks with their Cobol are laughed at, mostly, and accused of l=
acking innovation. They do lack innovation in the technical field. And Cobo=
l is definitely not an ideal language. But &quot;truly secure&quot; is wort=
h a lot to them. L4 validated is a step in the right direction, but catches=
 a lot of wind saying it&#39;s still imperfect and therefore worthless.</di=
v><div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">I&#39;m u=
tterly bored by code review. Maybe it&#39;d be better if there were some ni=
cer tools to help out. I&#39;m really sure someone has great recommendation=
s regarding this. (That don&#39;t even require Cobol :)</div></div>
</blockquote></div><br><br clear=3D"all"><div><br></div>-- <br><div dir=3D"=
ltr"> <a href=3D"https://twitter.com/tbiehn" target=3D"_blank">Twitter</a> =
| <a href=3D"http://www.linkedin.com/in/travisbiehn" target=3D"_blank">Link=
edIn</a> | <a href=3D"http://github.com/tbiehn" target=3D"_blank">GitHub</a=
> | <a href=3D"http://www.travisbiehn.com" target=3D"_blank">TravisBiehn.co=
m</a>=C2=A0| <a href=3D"https://plus.google.com/+TravisBiehn" target=3D"_bl=
ank">Google Plus</a><br></div>
</div>

--047d7b3a8314b589e50504107b86--

