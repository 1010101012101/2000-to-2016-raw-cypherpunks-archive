From cypherpunks-bounces@cpunks.org  Fri Apr 18 14:20:01 2014
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s3IIJcJU028102;
	Fri, 18 Apr 2014 14:19:41 -0400
Received: from mail-02.1984.is (mail-02.1984.is [93.95.224.7])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s3IIJY7J028097
 (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Fri, 18 Apr 2014 14:19:37 -0400
Received: from 178.167.254.13.threembb.ie ([178.167.254.13]
 helo=[10.218.188.16])
 by mail-02.1984.is with esmtpsa (TLSv1:DHE-RSA-AES256-SHA:256)
 (Exim 4.80) (envelope-from <cathalgarvey@cathalgarvey.me>)
 id 1WbDNh-0001zr-TG; Fri, 18 Apr 2014 18:19:23 +0000
User-Agent: K-9 Mail for Android
In-Reply-To: <1397842871.5862.11.camel@anglachel>
References: <5350E1BD.5010304@mpi-sws.org> <1397842871.5862.11.camel@anglachel>
MIME-Version: 1.0
Content-Type: multipart/alternative;
 boundary="----H49Y1VTAKWJ58CZ2CIRHN4NLNSQKK0"
Content-Transfer-Encoding: 8bit
Subject: Re: [tor-talk] Programming language for anonymity network
From: "Cathal Garvey (Phone)" <cathalgarvey@cathalgarvey.me>
Date: Fri, 18 Apr 2014 19:18:13 +0100
To: Ted Smith <tedks@riseup.net>, tor-talk@lists.torproject.org
Message-ID: <83fae3b5-4688-4351-8455-53f9cefe49ab@email.android.com>
Cc: cpunks <cypherpunks@cpunks.org>, Nicholas Merritt <nmerritt@mpi-sws.org>,
        liberationtech@mailman.stanford.edu,
        Peter Druschel <druschel@mpi-sws.org>, p2p-hackers@zim.maski.org,
        wonko@mpi-sws.org, Dave Choffnes <choffnes@ccs.neu.edu>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 8992
Lines: 112

------H49Y1VTAKWJ58CZ2CIRHN4NLNSQKK0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain;
 charset=UTF-8

Actually process-based parallelism is supported in more recent pythons, for the reason that using processes passes management largely to the OS. It's not the only way to do Parallelism but it's recommended by some.

Thanks for suggesting Ocaml: have seen it recommended a lot lately, better check it out.

On 18 April 2014 18:41:11 GMT+01:00, Ted Smith <tedks@riseup.net> wrote:
>OCaml. http://ocaml.org/
>
>     1. OCaml is more obscure than many languages, but it supports
>        programming in imperative, object-oriented, and functional
>        styles (though it's obviously best suited for a functional
>        style). I've seen people write Java in OCaml and produce clean,
>        modular code.
>     2. OCaml is used in industrial environments (it's gotten pretty
>        popular on Wall Street) and in open-source projects; the
>        toolchain is mature and the community is vibrant. 
>     3. OCaml is memory safe, but more importantly, it's type safe, and
>        its type system is capable of encoding a great deal of your
>        program's correctness. It will take some time to get your
>        program to compile, but when it does you have a much stronger
>       assurance that your program is correct than you do in C, C++, or
>        Java.
>     4. OCaml compiles to native code; I'm not sure if deterministic
>        builds have been done but they should be possible. 
>     5. (Performance, the hidden elephant in every language discussion
>        room) The OCaml team takes security seriously, and OCaml is
>        performance-competitive with C. OCaml does tail-call
>        elimination, so you can write programs functionally that are
>        memory-efficient.
>     6. (Weaknesses) OCaml has a global lock due to its garbage
>        collection, so parallel programming has to be done with
>       processes. This is (IMO) cleaner than in similar situations like
>        Python, but is obviously suboptimal. 
>
>I'd highly recommend reading through this blog series, chronicling a
>developer picking OCaml as the language to rewrite a large Python
>open-source project in. It doesn't have the same focus as you, but it
>goes over various reasons why someone might switch to OCaml, and
>introduces some OCaml features:
>http://roscidus.com/blog/blog/categories/ocaml/
>
>
>
>On Fri, 2014-04-18 at 10:26 +0200, Stevens Le Blond wrote:
>> Hello,
>> 
>> We are a team of researchers working on the design and implementation
>of
>> a traffic-analysis resistant anonymity network and we would like to
>> request your opinion regarding the choice of a programming language /
>> environment. Here are the criteria:
>> 
>> 1) Familiarity: The language should be familiar or easy to learn for
>> most potential contributors, as we hope to build a diverse community
>> that builds on and contributes to the code.
>> 
>> 2) Maturity: The language implementation, tool chain and libraries
>> should be mature enough to support a production system.
>> 
>> 3) Language security: The language should minimize the risk of
>security
>> relevant bugs like buffer overflows.
>> 
>> 4) Security of runtime / tool chain: It should be hard to
>> inconspicuously backdoor the tool chain and, if applicable, runtime
>> environments.
>> 
>> To give two concrete examples:
>> 
>> Using the C language + deterministic builds is an attractive option
>with
>> respect to 1), 2) and 4), but doesnâ€™t provide much regarding 3).
>> 
>> Java does better with respect to 3), however, it trades some of 3)
>and
>> 4) as compared to C. Specifically, we are concerned that large
>runtimes
>> may be difficult to audit. A similar argument may apply to other
>> interpreted languages.
>> 
>> Given these criteria, what language would you choose and for what
>> reasons? We would also appreciate feedback regarding our criteria.
>> 
>> All the best,
>> David, Nick, Peter, Stevens, and William
>> 
>
>-- 
>Sent from Ubuntu

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
------H49Y1VTAKWJ58CZ2CIRHN4NLNSQKK0
Content-Type: text/html;
 charset=utf-8
Content-Transfer-Encoding: 8bit

<html><head></head><body>Actually process-based parallelism is supported in more recent pythons, for the reason that using processes passes management largely to the OS. It&#39;s not the only way to do Parallelism but it&#39;s recommended by some.<br>
<br>
Thanks for suggesting Ocaml: have seen it recommended a lot lately, better check it out.<br><br><div class="gmail_quote">On 18 April 2014 18:41:11 GMT+01:00, Ted Smith &lt;tedks@riseup.net&gt; wrote:<blockquote class="gmail_quote" style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;">
<pre class="k9mail">OCaml. <a href="http://ocaml.org">http://ocaml.org</a>/<br /><br />     1. OCaml is more obscure than many languages, but it supports<br />        programming in imperative, object-oriented, and functional<br />        styles (though it's obviously best suited for a functional<br />        style). I've seen people write Java in OCaml and produce clean,<br />        modular code.<br />     2. OCaml is used in industrial environments (it's gotten pretty<br />        popular on Wall Street) and in open-source projects; the<br />        toolchain is mature and the community is vibrant. <br />     3. OCaml is memory safe, but more importantly, it's type safe, and<br />        its type system is capable of encoding a great deal of your<br />        program's correctness. It will take some time to get your<br />        program to compile, but when it does you have a much stronger<br />        assurance that your program is correct than you do in C, C++, or<br />       
Java.<br />     4. OCaml compiles to native code; I'm not sure if deterministic<br />        builds have been done but they should be possible. <br />     5. (Performance, the hidden elephant in every language discussion<br />        room) The OCaml team takes security seriously, and OCaml is<br />        performance-competitive with C. OCaml does tail-call<br />        elimination, so you can write programs functionally that are<br />        memory-efficient.<br />     6. (Weaknesses) OCaml has a global lock due to its garbage<br />        collection, so parallel programming has to be done with<br />        processes. This is (IMO) cleaner than in similar situations like<br />        Python, but is obviously suboptimal. <br /><br />I'd highly recommend reading through this blog series, chronicling a<br />developer picking OCaml as the language to rewrite a large Python<br />open-source project in. It doesn't have the same focus as you, but it<br />goes over various reasons why
someone might switch to OCaml, and<br />introduces some OCaml features:<br /><a href="http://roscidus.com/blog/blog/categories/ocaml">http://roscidus.com/blog/blog/categories/ocaml</a>/<br /><br /><br /><br />On Fri, 2014-04-18 at 10:26 +0200, Stevens Le Blond wrote:<br /><blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; padding-left: 1ex;"> Hello,<br /> <br /> We are a team of researchers working on the design and implementation of<br /> a traffic-analysis resistant anonymity network and we would like to<br /> request your opinion regarding the choice of a programming language /<br /> environment. Here are the criteria:<br /> <br /> 1) Familiarity: The language should be familiar or easy to learn for<br /> most potential contributors, as we hope to build a diverse community<br /> that builds on and contributes to the code.<br /> <br /> 2) Maturity: The language implementation, tool chain and libraries<br /> should be mature enough to
support a production system.<br /> <br /> 3) Language security: The language should minimize the risk of security<br /> relevant bugs like buffer overflows.<br /> <br /> 4) Security of runtime / tool chain: It should be hard to<br /> inconspicuously backdoor the tool chain and, if applicable, runtime<br /> environments.<br /> <br /> To give two concrete examples:<br /> <br /> Using the C language + deterministic builds is an attractive option with<br /> respect to 1), 2) and 4), but doesnâ€™t provide much regarding 3).<br /> <br /> Java does better with respect to 3), however, it trades some of 3) and<br /> 4) as compared to C. Specifically, we are concerned that large runtimes<br /> may be difficult to audit. A similar argument may apply to other<br /> interpreted languages.<br /> <br /> Given these criteria, what language would you choose and for what<br /> reasons? We would also appreciate feedback regarding our criteria.<br /> <br /> All the best,<br /> David, Nick, Peter,
Stevens, and William<br /> <br /></blockquote></pre></blockquote></div><br>
-- <br>
Sent from my Android device with K-9 Mail. Please excuse my brevity.</body></html>
------H49Y1VTAKWJ58CZ2CIRHN4NLNSQKK0--

