From cypherpunks-bounces@cpunks.org  Fri Aug 30 15:20:39 2013
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id r7UJJosI006833;
	Fri, 30 Aug 2013 15:19:56 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; insecure key"
	header.d=gmail.com header.i=@gmail.com header.b=WNOiZ+4i;
	dkim-adsp=none (insecure policy); dkim-atps=neutral
Received: from mail-lb0-f174.google.com (mail-lb0-f174.google.com
 [209.85.217.174])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id r7UJJjgC006825
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Fri, 30 Aug 2013 15:19:48 -0400
Received: by mail-lb0-f174.google.com with SMTP id w6so2182458lbh.19
 for <cypherpunks@cpunks.org>; Fri, 30 Aug 2013 12:19:39 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:in-reply-to:references:date:message-id:subject:from:to
 :content-type:content-transfer-encoding;
 bh=3UnqB1S81M8Eh/m9TRWSK2iphzYB8jFJdpGDxO1k0SY=;
 b=WNOiZ+4i6b/L8Yttd6qDmN5kw0+b1VP7b5Eh6C9vbxqCUbf8pRjA7CKK6LtKx/RKsZ
 jgTbR0Oo8i205/J3nxCEkwtcKst6wAEM0BQ131I3tjxW9qV9+EqMQQ7/m5P/hjz71B9L
 fonSaF1+tyYZcTsOXjDtuK3eDVQfh0nm4mv6m0xJS5T6fLr994qUHaU6RjULAs74C5X0
 zaBOUZZYCAuIt4/sXIVMgcV354hF86x0rRAfNNFANXzMu2vwEcO7JtC3inQBsqKL4lQC
 RXOJ2px9WiQx40u/VUIFjs5L/IHGVCRumSBfOd9z4kmXA9dwrD2Jo4N5Du/606qceHQ5
 Mw/A==
MIME-Version: 1.0
X-Received: by 10.112.219.133 with SMTP id po5mr35671lbc.51.1377890379391;
 Fri, 30 Aug 2013 12:19:39 -0700 (PDT)
Received: by 10.112.205.132 with HTTP; Fri, 30 Aug 2013 12:19:39 -0700 (PDT)
In-Reply-To: <20130830065008.GM29404@leitl.org>
References: <20130830065008.GM29404@leitl.org>
Date: Fri, 30 Aug 2013 12:19:39 -0700
Message-ID: <CAJVRA1R_=cmQJBX2zTVq1MHf2WH2JOVUa=b9KY2ycu_B_8Nz8g@mail.gmail.com>
Subject: Re: [Cryptography] The Case for Formal Verification
From: coderman <coderman@gmail.com>
To: Cypherpunks list <cypherpunks@al-qaeda.net>,
        cpunks <cypherpunks@cpunks.org>
Content-Type: text/plain; charset=windows-1252
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by antiproton.jfet.org id
 r7UJJjgC006825
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 3844
Lines: 107

On Thu, Aug 29, 2013 at 11:50 PM, Eugen Leitl <eugen@leitl.org> wrote:
> ...
> Much of what has changed is proof technology, and it is a
> technology. The tools for doing formal verification are now, for the
> first time, just barely usable for real work on interesting programs,
> and getting better all the time...
>
> There are usually several arguments against formal verification:...
> 1) We don't know what to specify, so what help does proving a buggy
> specification do us?

this is the crux; where the human meets the machine is always a large,
evolving, complicated attack surface. e.g. usability and design level
requirements and behavior.

in the order of precedence of security risks, much bigger holes must
be addressed before formal verification provides return on time
invested.

if you're building verified compilers, or micro kernels, or core
libraries, this doesn't apply to you. ;)

i want seL4 in a Qubes isolation model, formally verified CryptoBox,


> 2) Who would bother writing a proof vastly larger than their program?

this makes no sense to me; patently absurd on the face of it.

why test code with clusters that are larger than your build systems?

why do we exist? ...

utility of quality measures can not be judged on superficial metrics
like "size in GB" or "processor hours".  anyone using this argument as
a disqualifier is not qualified to make such an assessment.



> 3) You can't prove programs of interesting size anyway.
> ...
> For 3 ("you can't prove anything big enough to be useful!"), the Quark
> project:
> http://goto.ucsd.edu/quark/
> showed you don't need to prove a program of interesting size. You can
> defend millions of lines of buggy code with a "software firewall" made
> of formally verified code.

this is a great approach and fits in well with other security through
isolation defense in depth.  combining the strengths of formal
verification at critical core points within a system, and then
leveraging that robust core to isolate, constrain, mediate between
higher level applications seem most reasonable, tractable, with the
best return on time invested.

if i had a wishlist it would be:
- 64bit CompCert (not just 64bit int support :)
- verified virtualization isolation model (seL4 Qubes like system?)
- verified crypto_sign_edwards25519sha512batch and
crypto_sign_nistp256sha512ecdsa implementations
- verified compression, regexp, and other common libraries that are
useful at the security boundary between isolated domains or
applications.

some of the work done for quark might be partially applicable to some
of the above, but most of the verification is browser specific
(related to things like messaging and tab isolation, proper cookie
handling, socket communication, etc.)

where's the github for Coq kernels?




> So, if you're interested, how do you get started doing such things?
> ...
> Coq is, sadly, needlessly hard for the beginner. It has poor
> documentation, bad error messages and bad error behavior. These are
> not inherent problems, they're problems just with this instance of
> things -- people could build better if there was enough interest, and
> I hope that as these technologies become more popular people will
> build far better versions of the tools.

some other good resources:

ProofWeb: http://prover.cs.ru.nl/login.php
 particularly the courses available for the online interface to Coq.

frama-c: http://frama-c.com/
 i just came across this, it looks quite useful, but have not used it
in any depth yet...



> ... we need more people in the world experimenting with
> verification if we're going to get truly trustworthy software going
> forward.


Lemma stating_the_obvious:
 (* formal verification as a useful component of defense in depth is
self-evident *)
Qed.


“The future is here. It's just not widely distributed yet.”
-- Gibson

