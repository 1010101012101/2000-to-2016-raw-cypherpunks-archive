From owner-cypherpunks@Algebra.COM  Mon Oct 21 22:12:10 2002
Return-Path: <owner-cypherpunks@Algebra.COM>
Received: from pacific-carrier-annex.mit.edu (PACIFIC-CARRIER-ANNEX.MIT.EDU [18.7.21.83])
	by positron.jfet.org (8.11.6/8.9.3) with ESMTP id g9M2C9S14997
	for <rsw@opamp.org>; Mon, 21 Oct 2002 22:12:09 -0400
Received: from ak47.algebra.com ([209.120.156.51])
	by pacific-carrier-annex.mit.edu (8.9.2/8.9.2) with ESMTP id WAA15653
	for <rsw@mit.edu>; Mon, 21 Oct 2002 22:11:29 -0400 (EDT)
Received: from ak47.algebra.com (majordom@localhost [127.0.0.1])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g9M1chec031221
	for <cypherpunks-outgoing@ak47.algebra.com>; Mon, 21 Oct 2002 20:38:43 -0500
Received: (from majordom@localhost)
	by ak47.algebra.com (8.12.1/8.12.1/Submit) id g9M1chbl031220
	for cypherpunks-outgoing; Mon, 21 Oct 2002 20:38:43 -0500
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from locust.minder.net (locust.minder.net [66.92.53.74])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g9M1cdec031199
	for <cypherpunks@algebra.com>; Mon, 21 Oct 2002 20:38:40 -0500
Received: from waste.minder.net (daemon@waste [66.92.53.73])
	by locust.minder.net (8.12.3/8.12.3) with ESMTP id g9M1cVgf043960
	for <cypherpunks@algebra.com>; Mon, 21 Oct 2002 21:38:35 -0400 (EDT)
	(envelope-from cpunks@waste.minder.net)
Received: (from cpunks@localhost)
	by waste.minder.net (8.11.6/8.11.6) id g9M1cUa21619
	for cypherpunks@algebra.com; Mon, 21 Oct 2002 21:38:30 -0400
Received: (from majordom@localhost)
	by waste.minder.net (8.11.6/8.11.6) id g9M1b5R21533
	for cypherpunks-outgoing; Mon, 21 Oct 2002 21:37:05 -0400
Received: from locust.minder.net (locust.minder.net [66.92.53.74])
	by waste.minder.net (8.11.6/8.11.6) with ESMTP id g9M1b2Q21529
	for <cypherpunks@minder.net>; Mon, 21 Oct 2002 21:37:02 -0400
Received: from rwcrmhc51.attbi.com (rwcrmhc51.attbi.com [204.127.198.38])
	by locust.minder.net (8.12.3/8.12.3) with ESMTP id g9M1b1gf043916
	for <cypherpunks@minder.net>; Mon, 21 Oct 2002 21:37:01 -0400 (EDT)
	(envelope-from reinhold@world.std.com)
Received: from [192.168.0.2] ([24.61.132.190]) by rwcrmhc51.attbi.com
          (InterMail vM.4.01.03.27 201-229-121-127-20010626) with ESMTP
          id <20021022013655.HAOC18217.rwcrmhc51.attbi.com@[192.168.0.2]>;
          Tue, 22 Oct 2002 01:36:55 +0000
Mime-Version: 1.0
X-Sender: @mail.attbi.com (Unverified)
Message-Id: <v04210105b9da496e3942@[192.168.0.2]>
In-Reply-To: <20021021225220.A123387@exeter.ac.uk>
References: <20021017191538.A53194@exeter.ac.uk>
 <v04210100b9d7c556a854@[192.168.0.2]>
 <20021021225220.A123387@exeter.ac.uk>
Date: Mon, 21 Oct 2002 21:36:09 -0400
To: Adam Back <adam@cypherspace.org>, Peter Clay <pete@flatline.org.uk>
From: "Arnold G. Reinhold" <reinhold@world.std.com>
Old-Subject: Re: palladium presentation - anyone going?
Cc: Cypherpunks <cypherpunks@minder.net>,
   Cryptography <cryptography@wasabisystems.com>, dcsb@ai.mit.edu,
   Adam Back <adam@cypherspace.org>
Content-Type: text/plain; charset="iso-8859-1" ; format="flowed"
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by waste.minder.net id g9M1b5Q21530
Old-Subject:  Re: palladium presentation - anyone going?
Subject:   Re: palladium presentation - anyone going?
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
Status: O
Content-Length: 6323
Lines: 147


At 10:52 PM +0100 10/21/02, Adam Back wrote:
>On Sun, Oct 20, 2002 at 10:38:35PM -0400, Arnold G. Reinhold wrote:
>> There may be a hole somewhere, but Microsoft is trying hard to get
>> it right and Brian seemed quite competent.
>
>It doesn't sound breakable in pure software for the user, so this
>forces the user to use some hardware hacking.
>
>They disclaimed explicitly in the talk announce that:
>
>| "Palladium" is not designed to provide defenses against
>| hardware-based attacks that originate from someone in control of the
>| local machine.
>
>However I was interested to know exactly how easy it would be to
>defeat with simple hardware modifications or reconfiguration.
>
>You might ask why if there is no intent for Palladium to be secure
>against the local user, then why would the design it so that the local
>user has to use (simple) hardware attacks.  Could they not, instead of
>just make these functions available with a user present test in the
>same way that the TOR and SCP functions can be configured by the user
>(but not by hostile software).

One of the services that Palladium offers, according to the talk 
announcement, is:

>b. Attestation. The ability for a piece of code to digitally sign
>or otherwise attest to a piece of data and further assure the
>signature recipient that the data was constructed by an unforgeable,
>cryptographically identified software stack.

It seems to me such a service requires that Palladium be secure 
against the local user. I think that is the main goal of the product.

>
>For example why not a local user present function to lie about TOR
>hash to allow debugging (for example).
>
>> Adam Back wrote:
>> >- isn't it quite weak as someone could send different information to
>> >the SCP and processor, thereby being able to forge remote attestation
>> >without having to tamper with the SCP; and hence being able to run
>> >different TOR, observe trusted agents etc.
>>
>> There is also a change to the PC memory management to support a
>> trusted bit for memory segments. Programs not in trusted mode can't
>> access trusted memory.
>
>A "trusted bit" in the segment register doesn't make it particularly
>hard to break if you have access to the hardware.
>
>For example you could:
>
>- replace your RAM with dual-ported video RAM (which can be read using
>alternate equipment on the 2nd port).
>
>- just keep RAM powered-up through a reboot so that you load a new TOR
>which lets you read the RAM.

Brian mentioned that the system will not be secure against someone 
who can access the memory bus.  But I can see steps being taken in 
the future to make that mechanically difficult. The history of the 
Scanner laws is instructive. Originally one had the right to listen 
to any radio communication as long as you did not make use of the 
information  received. Then Congress banned the sale of scanners that 
can receive cell phone frequencies. Subsequently the laws were 
tightened to require scanners be designed so that their frequency 
range cannot be modified.  In practice this means the control chip 
must be potted in epoxy.  I can see similar steps being taken with 
Palladium PCs. Memory expansion could be dealt with by finding a way 
to give Palladium preferred access to the first block of physical 
memory that is soldered on the mother board.

>
>> Also there will be three additional x86 instructions (in microcode)
>> to support secure boot of the trusted kernel and present a SHA1 hash
>> of the kernel code in a read only register. 
>
>But how will the SCP know that the hash it reads comes from the
>processor (as opposed to being forged by the user)?  Is there any
>authenticated communication between the processor and the SCP?

Brian also mentioned that there would be changes to the Southbridge 
LCP bus, which I gather is a local I/O bus in PCs.  SCP will sit on 
that and presumably the changes are to insure that the SCP can only 
be accessed in secure mode.

At 12:27 AM +0100 10/22/02, Peter Clay wrote:
>I've been trying to figure out whether the following attack will be
>feasible in a Pd system, and what would have to be incorporated to prevent
>against it.
>
>Alice runs "trusted" application T on her computer. This is some sort of
>media application, which acts on encoded data streamed over the
>internet. Mallory persuades Alice to stream data which causes a buffer
>overrun in T. The malicious code, running with all of T's privileges:
>
>- abducts choice valuable data protected by T (e.g. individual book keys
>for ebooks)
>- builds its own vault with its own key
>- installs a modified version of T, V, in that vault with access to the
>valuable data
>- trashes T's vault
>
>The viral application V is then in an interesting position. Alice has two
>choices:
>
>- nuke V and lose all her data (possibly including all backups, depending
>on how backup of vaults works)
>- allow V to act freely

There are two cases here. One is a buffer overflow in one of the 
trusted "agents" running in Palladium. Presumably an attack here will 
only be able to damage vaults associated with the product that 
contains that agent.  The vendor that supplies the agent will have a 
strong incentive to avoid overflow opportunities.

The more dangerous case is  buffer overflow in Nexus. Brian admitted 
that this would be disastrous.  Obviously QA will be intense. They 
plan to publish Nexus source code. Brian was even asked if they would 
publish source for their C compiler. He said they had thought of 
that, didn't think they could get the VisualC compiler published but 
are considering coming up with a stripped down C compiler they can 
release.

>
>I haven't seen enough detail yet to be able to flesh this out, but it does
>highlight some areas of concern:
>
>- how do users back up vaults?

They realize that the whole back up/upgrade issue is a big concern. 
Brian briefly presented some very complex schemes for doing this 
which I didn't grasp.

>- there really needs to be a master override to deal with misbehaving
>trusted apps.

Presumably an intact Nexus can trash any trusted app.  And I don't 
see how any data in the vault could prevent you from loading a clean 
nexus, say from CD-ROM, as long as the SCP isn't altered and there is 
supposed to be no way to do that from software..


Arnold Reinhold

