From owner-cypherpunks@Algebra.COM  Fri Jun  7 18:37:58 2002
Return-Path: <owner-cypherpunks@Algebra.COM>
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.7.7.76])
	by positron.mit.edu (8.11.6/8.9.3) with ESMTP id g57MbvE26704
	for <rsw@jfet.org>; Fri, 7 Jun 2002 18:37:57 -0400
Received: from ak47.algebra.com ([209.120.156.51])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id SAA28387
	for <rsw@mit.edu>; Fri, 7 Jun 2002 18:36:26 -0400 (EDT)
Received: from ak47.algebra.com (majordom@localhost [127.0.0.1])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g57LE395028966
	for <cypherpunks-outgoing@ak47.algebra.com>; Fri, 7 Jun 2002 16:14:03 -0500
Received: (from majordom@localhost)
	by ak47.algebra.com (8.12.1/8.12.1/Submit) id g57LE3mO028965
	for cypherpunks-outgoing; Fri, 7 Jun 2002 16:14:03 -0500
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from slack.lne.com (dns.lne.com [209.157.136.81])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g57LDv95028905
	for <cypherpunks@ak47.algebra.com>; Fri, 7 Jun 2002 16:13:58 -0500
Received: (from cpunk@localhost)
	by slack.lne.com (8.11.0/8.11.0) id g57LDuD25585
	for cypherpunks@ak47.algebra.com; Fri, 7 Jun 2002 14:13:56 -0700
Received: (from majordom@localhost)
	by slack.lne.com (8.11.0/8.11.0) id g57LDe625578
	for cypherpunks-goingout; Fri, 7 Jun 2002 14:13:40 -0700
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
From: Anonymous <nobody@remailer.privacy.at>
Comments: This message did not originate from the Sender address above.
  It was remailed automatically by anonymizing remailer software. Please
  report problems or inappropriate use to the remailer administrator at
  <abuse@remailer.privacy.at>.
To: cypherpunks@lne.com
Old-Subject: Re: More of Ben's blinding
Message-ID: <3237e2f0ce2ea82501bc7be4823af71c@remailer.privacy.at>
Date: Fri,  7 Jun 2002 23:13:04 +0200 (CEST)
X-Loop: cypherpunks@lne.com
X-spam: 0 
Subject:  Re: More of Ben's blinding
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
X-spam: 5 
Status: O
Content-Length: 4401
Lines: 89


Jason Holt writes:

>         Anybody know of other patents which might get in the way?  I'm worried
> about Chaum's blind signature and undeniable signature patents, and want to
> present as patent-free a system as possible.

There was extensive discussion on coderpunks about possible patent
implications of Wagner blinding.  Using the g^b blinding makes things
potentially a little worse, because it requires the server to publish g
and g^k.  This can be considered a public key, and brings the situation
closer to the blind signature patent.

Wagner blinding can be thought of as a blinded undeniable signature.
It is like a blind signature in that the server doesn't see what it is
"signing".  And it is like an undeniable signature in that the validity
can only be checked with the aid of the server.  It seems likely that
Wagner could have patented his blinding along these lines if he had
wanted to.

So the problem is, if this is a blind + undeniable signature, doesn't
that suggest that it infringes on both the blind and the undeniable
signature patents?  To answer this you have to look at the claims in
detail.

You can differentiate from the undeniable signature patent in that
there is no repudiation protocol in the ecash system - no way for
the server to prove that a purportedly signed value is actually bad.
(Of course this lack is a weakness in an ecash system, since the bank
might like to be able to prove that bogus cash is just that; but if it
were remedied then Wagner blinding would almost certainly infringe the
undeniable signature patent.)

Differentiation from the blind signature patent is done simply by
asserting that this is not a signature.  That's why we are always careful
to put "sign" into quotes when referring to server operations.  It's not
a signature because there is no way to independently verify it, which
one can argue is a de facto requirement for something to be considered
a signature.  But of course, by this definition the undeniable signature
is not a signature either.  Yet we call it a kind of signature.  If the
undeniable signature is a signature, then so is the Wagner blinding,
and so it is covered by the blind signature patent.

As you can see, the situation is murky.  One salvation is that the blind
signature patent will expire in about 3 years, and it is unlikely that
you will be successful enough in any project that it would be worthwhile
to sue you within that time frame.  Besides, everyone who takes control
of the blind sig patent soon goes broke, so they probably can't afford
a lawyer to sue you anyway.

You should be aware too that there are a number of credential patents,
which you can find by searching on the word credential.

>         One more thing.  If the issuer returns the signature:
>
> (h1*g^b1 *h2*g^b2 *h3*g^b3...)^k
>
>         Can I separate out any of the h^k values?  My system relies on that
> being hard.

Seems safe by the DDH assumption, which is that it is hard to recognize
that (g, g^a, g^b, g^ab) have the DH relationship.  If we let m = g^b
then this is (g, g^a, m, m^a).  In other words, we can't tell whether
two different values g and m are both being raised to the same power.

In your case, you know h1, h2, (h1h2)^k.  If you could then find h1^k,
you could construct a DDH tuple (h1, h1^k, h1h2, (h1h2)^k), so you
could violate the DDH assumption.  This is a little hand-wavy and only
deals with the two element case, but an argument along these lines will
probably work.

> If I replace h1 with (g^b0) and get the issuer to sign:
>
> ((g^b0)*g^b1 *h2*g^b2 *h3*g^b3...)^k
>
>         I should be able to divide the two results and get h1^k.  But part of
> the cut-and-choose protocol will be to require that the n/2 checked documents
> are all valid and different from any previous instances of the protocol.  So
> it should be extremely hard for the user to sneak lots of previously used
> values and fake h's (which are really blinding factors) into the unrevealed
> documents.  But are there other ways to separate out signatures on individual
> h's?

You're really going to remember all the discarded h values from all the
previous instances of credential issuing?  Seems like it might be a lot of
data.  How many h values do you typically expect?

Maybe you could say more about the details of your credential system.
Such a system built on Wagner blinding might be very interesting.

