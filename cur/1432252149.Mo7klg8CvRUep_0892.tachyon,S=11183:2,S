From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Tue Jul  8 16:19:19 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pd0-f171.google.com (mail-pd0-f171.google.com [209.85.192.171])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68KJHAj027109
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Tue, 8 Jul 2014 16:19:19 -0400
Authentication-Results: antiproton.jfet.org; dkim=fail
	reason="verification failed; unprotected key"
	header.d=gmail.com header.i=@gmail.com header.b=j4pnL3Nn;
	dkim-adsp=none (unprotected policy); dkim-atps=neutral
Received: by mail-pd0-f171.google.com with SMTP id fp1so7753754pdb.16
        for <rsw@jfet.org>; Tue, 08 Jul 2014 13:19:12 -0700 (PDT)
X-Received: by 10.70.41.201 with SMTP id h9mr7159286pdl.39.1404850749695;
        Tue, 08 Jul 2014 13:19:09 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.25.164 with SMTP id d4csp367383pdg;
        Tue, 8 Jul 2014 13:19:08 -0700 (PDT)
X-Received: by 10.68.245.202 with SMTP id xq10mr11795142pbc.109.1404850748782;
        Tue, 08 Jul 2014 13:19:08 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id z4si6459279pdn.277.2014.07.08.13.19.06
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Tue, 08 Jul 2014 13:19:06 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net;
       dkim=fail header.i=@gmail.com
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68KIawo027083;
	Tue, 8 Jul 2014 16:18:36 -0400
Received: from mail-qc0-f175.google.com (mail-qc0-f175.google.com
 [209.85.216.175])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s68KIX0w027079
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Tue, 8 Jul 2014 16:18:35 -0400
Received: by mail-qc0-f175.google.com with SMTP id i8so5787431qcq.34
 for <cypherpunks@cpunks.org>; Tue, 08 Jul 2014 13:18:27 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=mime-version:sender:in-reply-to:references:from:date:message-id
 :subject:to:cc:content-type;
 bh=1sQDtdnAX90nfmmCgO/yn5tn3wL59u+czF4wgboRWQE=;
 b=j4pnL3NnS1fn/GKHRA8B9rEsxbgEEoBMYDoRkrFesFjgttJRDdLBbg0fNXTT6uloi7
 vUouDeIOgrFMDJIVSZ/REaUhyOtWTD/+MzBmj4JmTh4+DyU/6U9Yg2PS3GRJTEtTlE74
 dQ8W/ULpHfvH0g5VKx9/ktEMTBCdM3ukSxvbZHHbsUoOcnhJyABlBJ9hUizcDH3JbcgV
 m4SNP2xXWnCqYSBi4s8ijAskPYGFwEr88SKcKF0LnGE7Idf+93GXkr1meHp0ouwuji8p
 J3G3HDt/PaTZpxPqRNkkhRpjT+BmLVjHsTRIfdnlwT2YrLOS3nYt2ZcWPW38qm63+7L3
 tzQw==
X-Received: by 10.140.23.198 with SMTP id 64mr59543809qgp.84.1404850707498;
 Tue, 08 Jul 2014 13:18:27 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.229.164.65 with HTTP; Tue, 8 Jul 2014 13:18:07 -0700 (PDT)
In-Reply-To: <969fa7d4-d6b4-4d5c-bbbf-c5d7b6482746@email.android.com>
References: <53B84037.7030406@cathalgarvey.me> <20140707084122.GQ6997@ctrlc.hu>
 <CAOE4rSwC55WuYLNRtV5ihZOoVakcaFeV6Z4_a--2nV3d7nOk-g@mail.gmail.com>
 <1997735.1n1TTR1eli@lapuntu> <53BB899A.40408@gmail.com>
 <CAOsGNSS1H87C666NJKNi7SQaftkxZkRhq6JOoS6NwyZsS5vaKg@mail.gmail.com>
 <CAOE4rSzEMCjRo57VQfP2gQ4xrCpKLxKd23XvH0YxH7ZE7jCnmQ@mail.gmail.com>
 <969fa7d4-d6b4-4d5c-bbbf-c5d7b6482746@email.android.com>
Date: Tue, 8 Jul 2014 22:18:07 +0200
X-Google-Sender-Auth: E-WTU1AFcFGBIqd77Ihx5P1rJtk
Message-ID: <CAHWD2rKcav1ty4pMjcqPE3c2KJA3CjPUhtc6L-52_Va2DguR_A@mail.gmail.com>
Subject: Re: Tox.im
To: "Cathal (Phone)" <cathalgarvey@cathalgarvey.me>
Content-Type: multipart/alternative; boundary=001a11c12e6a620e5a04fdb44b51
Cc: "cypherpunks@cpunks.org" <cypherpunks@cpunks.org>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: =?UTF-8?Q?Lodewijk_andr=C3=A9_de_la_porte?= <l@odewijk.nl>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 6179
Lines: 122

--001a11c12e6a620e5a04fdb44b51
Content-Type: text/plain; charset=UTF-8

2014-07-08 21:22 GMT+02:00 Cathal (Phone) <cathalgarvey@cathalgarvey.me>:

> Thoughts? Bencoding 2.0?


tl;dr: I think it's a good idea, but it is offensive in a vague way.

---
It's really unfun to suddenly see binary in your JSON file. Both for
automated software that parses HTML (or something) and for people that use
text editors. The motivation for JSON isn't that it's easy and not too
inefficient. It's cleaner and more generic than XML. It's also faster to
write because the { and } are always written in code (you find them more
easily). It's just XML but a bit better.

If you want efficiency you could take to templated binary blobs. It
wouldn't actually be that hard, either, once we have some tools to do it.
You could even have a dual request, where you request "file.binary" and
"filelayout.json", where a JSON file describes the shape of the binary
information file.

It is actually a good idea. Definitely better than any alternatives (all
none of them). Just need plugins for text editors to hide the binary when
you're viewing it. And find some way to prevent binary overflow. You know
how C coders love to believe a length field, then do something bad and
everything goes poof. Maybe port over how attachments work in e-mail.
Actually, please don't it's awful. But it shows the sort of trouble you get.

It's great for some applications. I don't like that it would be good for
the wrong applications too. I also think we should harness more off the
power we already have, instead of thinking of new ways that are
easier-but-not-actually-much-easier.

I think I'd rather have a way to put JSON in front of my binary file, than
a way to put binary into my JSON file. It'd be great for metadata for
images, actually I've seen XML in front of PNG's and GIFS. We could use a
.BJSN, a format for a (JSON, Binary) tuple.

References may be better than embedding; flexibility in delivery and
storage, respects both formats more, keeps JSON simpler. That's the only
really valid concern I can come up with.

It depends on the application field. As a webdeveloper I can see the
utility and also the difficulty of good support. I think of previous
trouble with binary overflow, and how it can get really really messy. I'm
pro-possibility though! We should be able to do it, and leave it wherever
we think that's bad.

Maybe we should start calling it "JSON Transfer Protocol", though!

I'm a little under the weather atm so please forgive my awkward verbosity.

--001a11c12e6a620e5a04fdb44b51
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div class=3D"gmail_extra"><div class=3D"gmail_quote">2014=
-07-08 21:22 GMT+02:00 Cathal (Phone) <span dir=3D"ltr">&lt;<a href=3D"mail=
to:cathalgarvey@cathalgarvey.me" target=3D"_blank">cathalgarvey@cathalgarve=
y.me</a>&gt;</span>:<br>

<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex">Thoughts? Bencoding 2.0?</blockquote></div><=
div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">tl;dr: I thi=
nk it&#39;s a good idea, but it is offensive in a vague way.</div>

<div class=3D"gmail_extra"><br></div>---<br>It&#39;s really unfun to sudden=
ly see binary in your JSON file. Both for automated software that parses HT=
ML (or something) and for people that use text editors. The motivation for =
JSON isn&#39;t that it&#39;s easy and not too inefficient. It&#39;s cleaner=
 and more generic than XML. It&#39;s also faster to write because the { and=
 } are always written in code (you find them more easily). It&#39;s just XM=
L but a bit better.</div>

<div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">If you want=
 efficiency you could take to templated binary blobs. It wouldn&#39;t actua=
lly be that hard, either, once we have some tools to do it. You could even =
have a dual request, where you request &quot;file.binary&quot; and &quot;fi=
lelayout.json&quot;, where a JSON file describes the shape of the binary in=
formation file.</div>

<div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">It is actua=
lly a good idea. Definitely better than any alternatives (all none of them)=
. Just need plugins for text editors to hide the binary when you&#39;re vie=
wing it. And find some way to prevent binary overflow. You know how C coder=
s love to believe a length field, then do something bad and everything goes=
 poof. Maybe port over how attachments work in e-mail. Actually, please don=
&#39;t it&#39;s awful. But it shows the sort of trouble you get.</div>

<div class=3D"gmail_extra"><br>It&#39;s great for some applications. I don&=
#39;t like that it would be good for the wrong applications too. I also thi=
nk we should harness more off the power we already have, instead of thinkin=
g of new ways that are easier-but-not-actually-much-easier.<br>

<br>I think I&#39;d rather have a way to put JSON in front of my binary fil=
e, than a way to put binary into my JSON file. It&#39;d be great for metada=
ta for images, actually I&#39;ve seen XML in front of PNG&#39;s and GIFS. W=
e could use a .BJSN, a format for a (JSON, Binary) tuple.</div>

<div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">References =
may be better than embedding; flexibility in delivery and storage, respects=
 both formats more, keeps JSON simpler. That&#39;s the only really valid co=
ncern I can come up with.</div>

<div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">It depends =
on the application field. As a webdeveloper I can see the utility and also =
the difficulty of good support. I think of previous trouble with binary ove=
rflow, and how it can get really really messy. I&#39;m pro-possibility thou=
gh! We should be able to do it, and leave it wherever we think that&#39;s b=
ad.<br>

<br>Maybe we should start calling it &quot;JSON Transfer Protocol&quot;, th=
ough!</div><div class=3D"gmail_extra"><br></div><div class=3D"gmail_extra">=
I&#39;m a little under the weather atm so please forgive my awkward verbosi=
ty.</div>

</div>

--001a11c12e6a620e5a04fdb44b51--

