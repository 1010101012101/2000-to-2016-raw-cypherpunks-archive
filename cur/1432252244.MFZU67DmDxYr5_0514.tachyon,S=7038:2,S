From owner-cypherpunks@Algebra.COM  Thu Jul  4 19:14:22 2002
Return-Path: <owner-cypherpunks@Algebra.COM>
Received: from pacific-carrier-annex.mit.edu (PACIFIC-CARRIER-ANNEX.MIT.EDU [18.7.21.83])
	by positron.jfet.org (8.11.6/8.9.3) with ESMTP id g64NELW17190
	for <rsw@opamp.org>; Thu, 4 Jul 2002 19:14:21 -0400
Received: from ak47.algebra.com ([209.120.156.51])
	by pacific-carrier-annex.mit.edu (8.9.2/8.9.2) with ESMTP id XAA08067
	for <rsw@mit.edu>; Thu, 4 Jul 2002 23:17:40 -0400 (EDT)
Received: from ak47.algebra.com (majordom@localhost [127.0.0.1])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g650L94l009418
	for <cypherpunks-outgoing@ak47.algebra.com>; Thu, 4 Jul 2002 19:21:09 -0500
Received: (from majordom@localhost)
	by ak47.algebra.com (8.12.1/8.12.1/Submit) id g650L9Kc009417
	for cypherpunks-outgoing; Thu, 4 Jul 2002 19:21:09 -0500
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from slack.lne.com (dns.lne.com [209.157.136.81])
	by ak47.algebra.com (8.12.1/8.12.1) with ESMTP id g650L34l009403
	for <cypherpunks@ak47.algebra.com>; Thu, 4 Jul 2002 19:21:04 -0500
Received: (from cpunk@localhost)
	by slack.lne.com (8.11.0/8.11.0) id g650L2128345
	for cypherpunks@ak47.algebra.com; Thu, 4 Jul 2002 17:21:02 -0700
Received: (from majordom@localhost)
	by slack.lne.com (8.11.0/8.11.0) id g6507DE28286
	for cypherpunks-goingout; Thu, 4 Jul 2002 17:07:13 -0700
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
From: Anonymous <nobody@remailer.privacy.at>
Comments: This message did not originate from the Sender address above.
  It was remailed automatically by anonymizing remailer software. Please
  report problems or inappropriate use to the remailer administrator at
  <abuse@remailer.privacy.at>.
To: cryptography@wasabisystems.com, cypherpunks@lne.com,
   Ross.Anderson@cl.cam.ac.uk
Old-Subject: Closed source more secure than open source
Message-ID: <19644b6e446618b92d13ea000f36fb96@remailer.privacy.at>
Date: Fri,  5 Jul 2002 02:06:06 +0200 (CEST)
X-Loop: cypherpunks@lne.com
X-spam: 0 
Subject:  Closed source more secure than open source
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
Status: O
Content-Length: 4592
Lines: 79


Ross Anderson's paper at
http://www.ftp.cl.cam.ac.uk/ftp/users/rja14/toulouse.pdf
has been mostly discussed for what it says about the TCPA.  But the
first part of the paper is equally interesting.

The author analyzes the security implications of software development
using open source vs closed source.  He sets up a mathematical model
for the number of bugs remaining after a certain amount of testing.
Based on this model, he finds that both open and closed source development
methodologies are equally secure.

However his model has some simplifications and assumptions which are
quite unrealistic.  A more careful analysis will show that closed source
is the superior development method.

Essentially, the model assumes that each bug has a certain independent
probability of being found by testers, its own "MTBF".  Based on this
model it turns out that the probability of a security failure after time
t is inversely proportional to t.

He then writes, "Consider now what happens if we make the tester's job
harder.  Suppose that after the initial alpha testing of the product,
all subsequent testing is done by beta testers who have no access to the
source code, but can only try out various combinations of inputs in an
attempt to cause a failure.  If this makes the testers job on average
L times harder, so the bugs are L times more difficult to find... then
the probability that the system will fail the next test is..." inversely
proportional to t*L.  "In other words, the system's failure rate has just
dropped by a factor of L, just as we would expect."

The result is that, with access to the source code, bugs are L times
easier to find, but they are removed L times faster.  This corresponds to
the open source model. With closed source there is no access to the code,
bugs are removed L times slower, but they are L times harder to find.
The net result is that both open source and closed source are equivalent
in terms of how fast bugs are found, therefore both will be equally
vulnerable to exploiters of security bugs.

There are several problems with this analysis.  First, it is really not
true that external beta testers will be slowed down significantly by
lack of access to source code.  For most programs, source code will be of
no benefit to external testers, because they don't know how to program.
Someone who is testing a spreadsheet or word processor will have virtually
no benefit from access to the source code.  They will have no choice
but, as described above, to "try out various combinations of inputs in
an attempt to cause a failure."  This is true regardless of whether the
source code is available or not.

Therefore the rate at which (external) testers find bugs does not vary
by a factor of L between the open and closed source methodologies,
as assumed in the model.  In fact the rates will be approximately equal.

Another problem is that there are really three groups of parties involved
here: developers, external testers, and attackers.  Attackers, who are
trying to find breaks in software, are often highly motivated and skilled.
They can read code.  For them, the factor of L does come into play.
If they have access to the source code, they can find bugs L times faster
than if they don't, in accordance with the author's model.

The result is that once a product has gone into beta testing and then into
field installations, the rate of finding bugs by authorized testers will
be low, decreased by a factor of L, regardless of open or closed source.
But the rate of finding bugs by unauthorized, skilled attackers will be
affected by the availability of source.  Closed source will impair their
effectiveness by a factor of L, just as with the testers, so the model in
the paper is accurate in that case.  Bug open source benefits attackers;
they can find bugs at a rate of 1/t, while the authorized testers are
finding bugs at the slower rate of 1/(t*L).  The open source case will
leave more bugs available for attack, and the attackers can use the source
code to find them more quickly.  Therefore open source is more vulnerable
to attack, and closed source is the superior development method.

The one class of programs where this is not true would be those for which
the external testers benefit from having source available, which would
be programs where the testers are programmers; i.e., development tools.
For these programs the testers and attackers would both be affected in the
same way by availability of source.  But for most programs, attackers will
gain much more by having source available than the beta testers would.

