From owner-cypherpunks@al-qaeda.net  Mon Nov  9 13:59:01 2009
Return-Path: <owner-cypherpunks@al-qaeda.net>
Received: from proton.jfet.org (majordomo@localhost [127.0.0.1])
	by proton.jfet.org (8.14.1/8.14.1/Debian-9) with ESMTP id nA9Iwus9023395
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <cypherpunks-outgoing@proton.jfet.org>; Mon, 9 Nov 2009 13:58:56 -0500
Received: (from majordomo@localhost)
	by proton.jfet.org (8.14.1/8.14.1/Submit) id nA9Iwu0o023394
	for cypherpunks-outgoing; Mon, 9 Nov 2009 13:58:56 -0500
Date: Mon, 9 Nov 2009 18:58:51 +0000 (UTC)
From: John Case <case@sdf.lonestar.org>
X-X-Sender: case@otaku.freeshell.org
To: cypherpunks@al-qaeda.net
Subject: Re: managing and protecting nyms...
In-Reply-To: <699363.67686.qm@web112106.mail.gq1.yahoo.com>
Message-ID: <Pine.NEB.4.64.0911091853050.1376@otaku.freeshell.org>
References: <699363.67686.qm@web112106.mail.gq1.yahoo.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII; format=flowed
Sender: owner-cypherpunks@al-qaeda.net
Precedence: bulk
X-Loop: al-qaeda.net
Status: O
Content-Length: 1669
Lines: 26

On Mon, 9 Nov 2009, Morlock Elloi wrote:

> The cost of breaking even bad crypto can be quite high.
>
> If you just take, for example, DES, and change all S boxes to different random values, then provide these values as pre-arranged secret key to the other party, and use them only with this single correspondent, and keep your algorithm secret, while using a single 1-character key "a" through "5" depending on the day of month, how long do you think it will take someone to break the cipher and how much would it cost?
>
> First they have to get enough text for correlation and differential attacks. Then they are starting with quite long 2K-bit S boxes that need to be inferred. It would take a brilliant analyst more then few days to break this. Few days of a brilliant analyst at Ft. Mead are very expensive, when you include all the overhead. Say $0.1-0.5M.
>
> Compare this cost to the cost of breaking a massively used crypto algorithm with a backdoor.


All well and good, but who among us is running a straight "a.out" 
compilation of _only_ DES (or AES or whatever) such that our threat model 
is simply the validity of the pure algorithm ?

I sure am not.  Whether it be SSH or SSL or duplicity or Tor, we're all 
using cryptosystems that most certainly receive far too much credit simply 
by virtue of being "open source".

Open source is only useful if _you_ open it - and maybe not even then. 
Youngs point is, what do you know about who is writing or reading or 
proofing it ?

Open source should indeed be a requirement - nobody here would argue 
against it.  But it's never an assurance - especially not with a big 
project like OpenSSH and so on ...

