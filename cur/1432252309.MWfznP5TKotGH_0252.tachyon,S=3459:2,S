From owner-cypherpunks@lne.com  Fri May  9 16:47:30 2003
Return-Path: <owner-cypherpunks@lne.com>
Received: from gw.lne.com (gw.lne.com [209.157.136.81])
	by positron.jfet.org (8.11.6p2/8.11.6-03-31-03) with ESMTP id h49KlQt20584
	for <rsw@jfet.org>; Fri, 9 May 2003 16:47:27 -0400
Received: (from majordom@localhost)
	by gw.lne.com (8.12.5/8.12.5) id h49HRA4P023365
	for cypherpunks-goingout345; Fri, 9 May 2003 10:27:10 -0700
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
Date: Fri, 9 May 2003 07:57:18 -0500
From: Wayne Walker <wwalker@broadq.com>
To: cypherpunks@lne.com
X-Orig-To: hangar18-general@open-forge.org
Cc: hell@einstein.ssz.com, austin-cpunks@einstein.ssz.com,
   cypherpunks@einstein.ssz.com
Subject: Re: [hangar18-general] Q: A question of security vulnerability
Message-ID: <20030509125718.GC2474@broadq.com>
References: <Pine.LNX.4.33.0305082130580.7974-100000@einstein.ssz.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <Pine.LNX.4.33.0305082130580.7974-100000@einstein.ssz.com>
User-Agent: Mutt/1.4i
X-Unsubscription-Info: http://einstein.ssz.com/cdr
Sender: owner-cypherpunks@lne.com
Precedence: bulk
X-Loop: cypherpunks@lne.com
Status: O
Content-Length: 2151
Lines: 68

sudo is actually almost never secure.  As you imply, with line 1 bob can
do _anything_ just like line 2.

Here are some more less obvious examples where bob can do _anything_

1. bob pine
2. bob vi
3. bob chown
4. bob chmod

With any of the 4 above, bob can do anything.

With 1 or 2, bob can run any command from within the program (! is
allowed in vi, and if you set $EDITOR to vi before running pine...)

In 3 and 4, bob can make setuid programs or change perms on /etc and put
his own passwd/shadow files in place.

Bottom line, if you give someone sudo access you should tgrust them to
be root, OR you should only allow them to run very specific
_scripts/binaries_ that you wrote for them specifically (e.g.
chown_files_to_others_in_his_primary_group, restart_lpd,
restart_httpd...)  And here you still have to be careful about these
programs....

On Thu, May 08, 2003 at 09:34:15PM -0500, Jim Choate wrote:
> 
> Given a basic Linux (or *nix) system with a user bob. Assume that bob has
> sudo capability. There are two approaches (I'm not going to use exact
> syntax):
> 
> 1.	bob	sh
> 
> 2.	bob	All
> 
> So, in the first case bob can:  sudo sh -c "foo"
> 
> and in the second bob can: sudo foo
> 
> Why would the first approach represent a more secure mechanism?
> 
> It is true that sh could be a wrapper or have sticky bits, etc. We'll
> assume these are not an issue. The point being why is running a program
> directly as root in this manner less secure than running the program
> through a shell as root?
> 
> Example? Explanation?
> 
> Thanks.
> 
> 
>  --
>     ____________________________________________________________________
> 
>       We are all interested in the future for that is where you and I
>       are going to spend the rest of our lives.
> 
>                               Criswell, "Plan 9 from Outer Space"
> 
>       ravage@ssz.com                            jchoate@open-forge.org
>       www.ssz.com                               www.open-forge.org
>     --------------------------------------------------------------------

-- 

Wayne Walker

www.broadq.com :)  Bringing digital video and audio to the living room

