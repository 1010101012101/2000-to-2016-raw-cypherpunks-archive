From owner-cypherpunks@al-qaeda.net  Sat Mar 19 13:12:07 2005
Return-Path: <owner-cypherpunks@al-qaeda.net>
Received: from positron.jfet.org (localhost.localdomain [127.0.0.1])
	by positron.jfet.org (8.13.3/8.13.3/Debian-9) with ESMTP id j2JJBgVI007103
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <cypherpunks-outgoing@positron.jfet.org>; Sat, 19 Mar 2005 13:11:42 -0600
Received: (from majordomo@localhost)
	by positron.jfet.org (8.13.3/8.13.3/Submit) id j2JJBfGA007100
	for cypherpunks-outgoing; Sat, 19 Mar 2005 13:11:41 -0600
Message-ID: <423C795D.79C0E5D0@cdc.gov>
Date: Sat, 19 Mar 2005 11:11:25 -0800
From: "Major Variola (ret)" <mv@cdc.gov>
Organization: GLODO PSYOPS
X-Mailer: Mozilla 4.75 [en] (Win95; U)
X-Accept-Language: en
MIME-Version: 1.0
To: "cypherpunks@al-qaeda.net" <cypherpunks@al-qaeda.net>
Subject: on FPGAs vs ASICs
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: owner-cypherpunks@al-qaeda.net
Precedence: bulk
X-Loop: al-qaeda.net
Status: O
Content-Length: 1145
Lines: 28

Tyler, Riad, etc:

FPGAs are used in telecom because the volumes do not support an ASIC
run.
Riad doesn't seem to appreciate this.  He does understand that an ASIC
is more
efficient because its gates are used only for 1 computation, rather than
most
(FPGA) gates being used for reconfigurability ---useful if you can't
afford
an ASIC run (a million bucks a mask...) or if algorithms get tweaked
(eg you release before the Spec comes out, or you are shooting for
time-to-market).  Clockwise an FPGA wastes time in extra wire routing
although since an FPGA may be made in state of the art processes,
and your ASIC may not, its a complex tradeoff.  (Albeit some circuit
topologies
work very well on FPGAs)

So for the Cypherpunk wanting hardware (vs cluster) acceleration, FPGAs
are the way to go.  For TLAs, you prototype in FPGAs of course, and
then make some chips in your private fab.  (Same for Broadcom, etc.)

For someone making 10,000 routers, you use FPGAs.

DESCrack was solving a problem for which the x86 is not very efficient
at computing --all the sub-byte bit-diddling-- and hardware is very
efficient
(by design in DES, after all).

