From cypherpunks-bounces@cpunks.org  Mon Jan 20 19:39:37 2014
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0L0dX3b009845;
	Mon, 20 Jan 2014 19:39:33 -0500
Received: from x1.ctrlc.hu (x1.ctrlc.hu [195.14.20.232])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0L0dTqB009841
 for <cypherpunks@cpunks.org>; Mon, 20 Jan 2014 19:39:31 -0500
Received: from i.ctrlc.hu (unknown
 [IPv6:fc8c:1767:11aa:2214:2767:6acb:77ab:a45d])
 by x1.ctrlc.hu (Postfix) with ESMTP id 23CB235DEE
 for <cypherpunks@cpunks.org>; Tue, 21 Jan 2014 01:39:25 +0100 (CET)
Received: by i.ctrlc.hu (Postfix, from userid 1000)
 id ADB7915C91; Tue, 21 Jan 2014 01:39:25 +0100 (CET)
Date: Tue, 21 Jan 2014 01:39:24 +0100
From: stef <s@ctrlc.hu>
To: cypherpunks@cpunks.org
Subject: Re: Re: consistent pcp/pbp formats (was: Curve p25519 Replacements
 for GnuPG?(x2 now) ..)
Message-ID: <20140121003924.GU7008@ctrlc.hu>
References: <20140114111653.GD3900@r4> <lb4en4$hdt$1@ger.gmane.org>
 <20140115093443.GE3900@r4> <lb5uvc$lfe$1@ger.gmane.org>
 <20140115134145.GF3900@r4> <lbj0cq$l0b$1@ger.gmane.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <lbj0cq$l0b$1@ger.gmane.org>
User-Agent: Mutt/1.5.21 (2010-09-15)
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>

howdy,

On Mon, Jan 20, 2014 at 03:13:42PM +0400, Yuriy Kaminskiy wrote:
> FWIW, I quickly looked at pbp [python? hate-hate-hate], it apparently has nearly
> same design defect: it uses long-term curve25519 keypair for message encryption.

does it? actually pbp generates a symmetric key, which is encrypted to the
recipients encryption public key. btw, pbp creates 3 keys for each id, one
long-term master for key-signing only, and two sub-keys one for encryption and
one for generic signing. the encryption subkey is only used for the encryption
of the message key. is that a problem? isn't that how pgp does it?

> Unlike pcp, it does not include sender identification in message, receiver must
> try all public keys in her keyring.

this is mostly a problem only for verifying signatures, in a keyring with lots
of public keys. but the operation is only on the hash of the message. for
encryption this is neither so much a problem as traditionally the number of
private keys one person holds is manageable. however even in these cases the
wrong key is detected after decoding the message key, which again is a 32 byte
ciphertext. so i don't expect this to be very slow. if this really becomes a
problem you can start pbp with different home directories using the --basedir
param.

> Which have advantage of not leaking sender identity to eavesdropper, but
> waste a lot of CPU on receiver side (as your keyring grows),

indeed. but that was one of the design goals, to fix the problem openpgp being
a strong selector and low hanging fruit in all forensic tools. i'm very happy
to spend some cpu cycles on locating the right key if it means the adversary
has a higher computational effort than me.

> and receiver also cannot search sender identity by keyid on [hypothetical]
> keyserver.

indeed, this need has not been addressed yet.

> Hmm?  You cannot fix (1), (2), (3), (4) without using single-use keypair by
> sender side. So, of course, it makes sense.  Single-use keypair on receiver
> side would be nice (PFS!), but it is not possible in store-and-forward.

i would be delighted to hear your commentary on
https://raw.github.com/stef/pbp/master/doc/chaining-dh.txt

> > Really? I'll try it, but if this is the case, then it's bad indeed.
> 
> That's how (any) DH works? You generate common secret from one side public key
> and other side private key?

in the nacl implementation i believe something like this happens: P_a and S_b,
as well as on the other side S_a and P_b are used in a ECDH secret derivation,
which then is passed through hsalsa20 to derive the key, then this shared
secret is used as a key for a salsa20xpoly1305 authenticating stream algo,
that also needs a 32 byte nonce for encryption. so indeed both sides can
decrypt the message encrypted to the other in this scheme. all this of course
is overly simplified you can find the details on pp15
http://cr.yp.to/highspeed/naclcrypto-20090310.pdf

cheers,s

-- 
pgp: https://www.ctrlc.hu/~stef/stef.gpg
pgp fp: FD52 DABD 5224 7F9C 63C6  3C12 FC97 D29F CA05 57EF
otr fp: https://www.ctrlc.hu/~stef/otr.txt

