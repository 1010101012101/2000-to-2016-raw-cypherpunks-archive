From owner-cryptography+rsw=mit.edu@wasabisystems.com  Mon Aug 12 19:56:17 2002
Return-Path: <owner-cryptography+rsw=mit.edu@wasabisystems.com>
Received: from pacific-carrier-annex.mit.edu (PACIFIC-CARRIER-ANNEX.MIT.EDU [18.7.21.83])
	by positron.jfet.org (8.11.6/8.9.3) with ESMTP id g7CNuHN21272
	for <rsw@opamp.org>; Mon, 12 Aug 2002 19:56:17 -0400
Received: from lion.ninthwonder.com (lion.ninthwonder.com [151.199.66.147])
	by pacific-carrier-annex.mit.edu (8.9.2/8.9.2) with ESMTP id TAA22821
	for <rsw@mit.edu>; Mon, 12 Aug 2002 19:56:15 -0400 (EDT)
Received: by lion.ninthwonder.com (Postfix, from userid 96)
	id 12D2D3071B; Mon, 12 Aug 2002 19:47:54 -0400 (EDT)
Delivered-To: cryptography@wasabisystems.com
Received: from snark.piermont.com (snark.piermont.com [166.84.151.72])
	by lion.ninthwonder.com (Postfix) with ESMTP id 6B07630712
	for <cryptography@wasabisystems.com>; Mon, 12 Aug 2002 19:47:52 -0400 (EDT)
Received: by snark.piermont.com (Postfix, from userid 1000)
	id 39210D97D6; Mon, 12 Aug 2002 19:47:52 -0400 (EDT)
Received: from dierks.org (dierks.org [130.94.178.179])
	by lion.ninthwonder.com (Postfix) with SMTP id 6BD3A3070A
	for <cryptography@wasabisystems.com>; Mon, 12 Aug 2002 16:32:13 -0400 (EDT)
Received: (qmail 26089 invoked by uid 12979); 12 Aug 2002 20:32:00 -0000
Received: from unknown (HELO PONGO.dierks.org) ([64.81.201.158]) (envelope-sender <tim@dierks.org>)
          by 130.94.178.179 (qmail-ldap-1.03) with SMTP
          for <adam@cypherspace.org>; 12 Aug 2002 20:32:00 -0000
Message-Id: <5.1.0.14.2.20020812161317.03e05818@dierks.org>
X-Sender: tdierks@dierks.org
X-Mailer: QUALCOMM Windows Eudora Version 5.1
Date: Mon, 12 Aug 2002 16:32:05 -0400
To: Adam Back <adam@cypherspace.org>
From: Tim Dierks <tim@dierks.org>
Subject: Re: trade-offs of secure programming with Palladium (Re:
  Palladium: technical limits and implications)
Cc: cypherpunks@lne.com, cryptography@wasabisystems.com,
   Adam Back <adam@cypherspace.org>
In-Reply-To: <20020812210759.A846822@exeter.ac.uk>
References: <5.1.0.14.2.20020812150745.03d70748@dierks.org>
 <699bcf9a15f57cec8e85fb08c0c02652@aarg.net>
 <699bcf9a15f57cec8e85fb08c0c02652@aarg.net>
 <20020812193000.A844266@exeter.ac.uk>
 <5.1.0.14.2.20020812150745.03d70748@dierks.org>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
Sender: owner-cryptography@wasabisystems.com
Precedence: bulk
Status: O
Content-Length: 3183
Lines: 58

At 09:07 PM 8/12/2002 +0100, Adam Back wrote:
>At some level there has to be a trade-off between what you put in
>trusted agent space and what becomes application code.  If you put the
>whole application in trusted agent space, while then all it's
>application logic is fully protected, the danger will be that you have
>added too much code to reasonably audit, so people will be able to
>gain access to that trusted agent via buffer overflow.

I agree; I think the system as you describe it could work and would be 
secure, if correctly executed. However, I think it is infeasible to 
generally implement commercially viable software, especially in the 
consumer market, that will be secure under this model. Either the 
functionality will be too restricted to be accepted by the market, or there 
will be a set of software flaws that allow the system to be penetrated.

The challenge is to put all of the functionality which has access to 
content inside of a secure perimeter, while keeping the perimeter secure 
from any data leakage or privilege escalation. The perimeter must be very 
secure and well-understood from a security standpoint; for example, it 
seems implausible to me that any substantial portion of the Win32 API could 
be used from within the perimeter; thus, all user interface aspects of the 
application must be run through a complete security analysis with the 
presumption that everything outside of the perimeter is compromised and 
cannot be trusted. This includes all APIs & data.

I think we all know how difficult it is, even for security professionals, 
to produce correct systems that enforce any non-trivial set of security 
permissions. This is true even when the items to be protected and the 
software functionality are very simple and straightforward (such as key 
management systems). I think it entirely implausible that software 
developed by multimedia software engineers, managing large quantities of 
data in a multi-operation, multi-vendor environment, will be able to 
deliver a secure environment.

This is even more true when the attacker (the consumer) has control over 
the hardware & software environment. If a security bug is found & patched, 
the end user has no direct incentive to upgrade their installation; in 
fact, the most concerning end users (e.g., pirates) have every incentive to 
seek out and maintain installations with security faults. While a content 
or transaction server could refuse to conduct transactions with a user who 
has not upgraded their software, such a requirement can only increase the 
friction of commerce, a price that vendors & consumers might be quite 
unwilling to pay.

I'm sure that the whole system is secure in theory, but I believe that it 
cannot be securely implemented in practice and that the implied constraints 
on use & usability will be unpalatable to consumers and vendors.

  - Tim

PS - I'm looking for a job in or near New York City. See my resume at 
<http://www.dierks.org/tim/resume.html>



---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending "unsubscribe cryptography" to majordomo@wasabisystems.com

