From owner-cryptography+rsw=mit.edu@wasabisystems.com  Mon Aug 12 19:54:49 2002
Return-Path: <owner-cryptography+rsw=mit.edu@wasabisystems.com>
Received: from pacific-carrier-annex.mit.edu (PACIFIC-CARRIER-ANNEX.MIT.EDU [18.7.21.83])
	by positron.jfet.org (8.11.6/8.9.3) with ESMTP id g7CNsnF21251
	for <rsw@opamp.org>; Mon, 12 Aug 2002 19:54:49 -0400
Received: from lion.ninthwonder.com (lion.ninthwonder.com [151.199.66.147])
	by pacific-carrier-annex.mit.edu (8.9.2/8.9.2) with ESMTP id TAA22516
	for <rsw@mit.edu>; Mon, 12 Aug 2002 19:54:48 -0400 (EDT)
Received: by lion.ninthwonder.com (Postfix, from userid 96)
	id A44CD3070F; Mon, 12 Aug 2002 19:47:41 -0400 (EDT)
Delivered-To: cryptography@wasabisystems.com
Received: from snark.piermont.com (snark.piermont.com [166.84.151.72])
	by lion.ninthwonder.com (Postfix) with ESMTP id 42FAC3070A
	for <cryptography@wasabisystems.com>; Mon, 12 Aug 2002 19:47:40 -0400 (EDT)
Received: by snark.piermont.com (Postfix, from userid 1000)
	id D1D8FD97C9; Mon, 12 Aug 2002 19:47:39 -0400 (EDT)
Received: from dierks.org (dierks.org [130.94.178.179])
	by lion.ninthwonder.com (Postfix) with SMTP id A1BC13070A
	for <cryptography@wasabisystems.com>; Mon, 12 Aug 2002 15:28:23 -0400 (EDT)
Received: (qmail 15495 invoked by uid 12979); 12 Aug 2002 19:28:10 -0000
Received: from unknown (HELO PONGO.dierks.org) ([64.81.201.158]) (envelope-sender <tim@dierks.org>)
          by 130.94.178.179 (qmail-ldap-1.03) with SMTP
          for <adam@cypherspace.org>; 12 Aug 2002 19:28:10 -0000
Message-Id: <5.1.0.14.2.20020812150745.03d70748@dierks.org>
X-Sender: tdierks@dierks.org
X-Mailer: QUALCOMM Windows Eudora Version 5.1
Date: Mon, 12 Aug 2002 15:28:15 -0400
To: Adam Back <adam@cypherspace.org>, cypherpunks@lne.com
From: Tim Dierks <tim@dierks.org>
Subject: Re: Palladium: technical limits and implications
Cc: cryptography@wasabisystems.com, Adam Back <adam@cypherspace.org>
In-Reply-To: <20020812193000.A844266@exeter.ac.uk>
References: <699bcf9a15f57cec8e85fb08c0c02652@aarg.net>
 <699bcf9a15f57cec8e85fb08c0c02652@aarg.net>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
Sender: owner-cryptography@wasabisystems.com
Precedence: bulk
Status: O
Content-Length: 2648
Lines: 51

At 07:30 PM 8/12/2002 +0100, Adam Back wrote:
>(Tim Dierks: read the earlier posts about ring -1 to find the answer
>to your question about feasibility in the case of Palladium; in the
>case of TCPA your conclusions are right I think).

The addition of an additional security ring with a secured, protected 
memory space does not, in my opinion, change the fact that such a ring 
cannot accurately determine that a particular request is consistant with 
any definable security policy. I do not think it is technologically 
feasible for ring -1 to determine, upon receiving a request, that the 
request was generated by trusted software operating in accordance with the 
intent of whomever signed it.

Specifically, let's presume that a Palladium-enabled application is being 
used for DRM; a secure & trusted application is asking its secure key 
manager to decrypt a content encryption key so it can access properly 
licensed code. The OS is valid & signed and the application is valid & 
signed. How can ring -1 distinguish a valid request from one which has been 
forged by rogue code which used a bug in the OS or any other trusted entity 
(the application, drivers, etc.)?

I think it's reasonable to presume that desktop operating systems which are 
under the control of end-users cannot be protected against privilege 
escalation attacks. All it takes is one sound card with a bug in a 
particular version of the driver to allow any attacker to go out and buy 
that card & install that driver and use the combination to execute code or 
access data beyond his privileges.

In the presence of successful privilege escalation attacks, an attacker can 
get access to any information which can be exposed to any privilige level 
he can escalate to. The attacker may not be able to access raw keys & other 
information directly managed by the TOR or the key manager, but those keys 
aren't really interesting anyway: all the interesting content & 
transactions will live in regular applications at lower security levels.

The only way I can see to prevent this is for the OS to never transfer 
control to any software which isn't signed, trusted and intact. The problem 
with this is that it's economically infeasible: it implies the death of 
small developers and open source, and that's a higher price than the market 
is willing to bear.

  - Tim

PS - I'm looking for a job in or near New York City. See my resume at 
<http://www.dierks.org/tim/resume.html>



---------------------------------------------------------------------
The Cryptography Mailing List
Unsubscribe by sending "unsubscribe cryptography" to majordomo@wasabisystems.com

