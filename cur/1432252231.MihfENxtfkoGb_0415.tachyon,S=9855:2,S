From owner-cypherpunks@Algebra.COM  Thu Mar 29 05:20:01 2001
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.72.0.53])
	by positron.mit.edu (8.9.3/8.9.3) with ESMTP id FAA23281
	for <kwantam@positron.mit.edu>; Thu, 29 Mar 2001 05:20:01 -0500
Received: from ak47.algebra.com (root@ak47.algebra.com [208.233.99.160])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id FAA12150
	for <rsw@mit.edu>; Thu, 29 Mar 2001 05:20:01 -0500 (EST)
Received: (from majordom@localhost)
	by ak47.algebra.com (8.11.1/8.11.1) id f2T9xMK28526
	for cypherpunks-outgoing; Thu, 29 Mar 2001 03:59:22 -0600
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from sirius.infonex.com (sirius.infonex.com [216.34.245.2])
	by ak47.algebra.com (8.11.1/8.11.1) with ESMTP id f2T9xLW28510
	for <cypherpunks@algebra.com>; Thu, 29 Mar 2001 03:59:21 -0600
Received: (from cpunks@localhost) by sirius.infonex.com (8.8.8/8.8.8) id BAA29478; Thu, 29 Mar 2001 01:59:19 -0800 (PST)
Received: from cyberpass.net (cyberpass.net [216.34.245.3]) by sirius.infonex.com (8.8.8/8.8.8) with ESMTP id BAA29474 for <cpunks@sirius.infonex.com>; Thu, 29 Mar 2001 01:59:15 -0800 (PST)
Received: from mail.lemuria.org (lemuria.org [62.197.4.65]) by cyberpass.net (8.8.8/8.7.3) with ESMTP id CAA08177 for <cypherpunks@cyberpass.net>; Thu, 29 Mar 2001 02:02:06 -0800 (PST)
Received: from unicorn.lemuria.org (p3EE2D5F4.dip.t-dialin.net [62.226.213.244])
	by mail.lemuria.org (Postfix) with ESMTP id 5D5CE84A8
	for <cypherpunks@cyberpass.net>; Thu, 29 Mar 2001 11:59:20 +0200 (CEST)
Received: by unicorn.lemuria.org (Postfix, from userid 1000)
	id CA543175197; Thu, 29 Mar 2001 11:55:57 +0200 (CEST)
Date: Thu, 29 Mar 2001 11:55:57 +0200
From: Tom <tom@lemuria.org>
To: cypherpunks@cyberpass.net
Old-Subject: [haceaton@hotmail.com: Re: [dvd-discuss] DeCSS public key, been there, done that]
Message-ID: <20010329115557.D14583@lemuria.org>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="vkogqOf2sHV7VnPd"
Content-Disposition: inline
User-Agent: Mutt/1.2.5i
Subject:  [haceaton@hotmail.com: Re: [dvd-discuss] DeCSS public key, been there, done that]
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
Status: O
Content-Length: 7395
Lines: 152



--vkogqOf2sHV7VnPd
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

after an initial (only half-serious) idea posted by me to the
dvd-discuss mailing list, someone actually created a program to create
secret keys that result in your public key being a compressed version
of decss.


----- Forwarded message from Harold Eaton <haceaton@hotmail.com> -----

Date: Mon, 26 Mar 2001 16:31:38 -0500
From: "Harold Eaton" <haceaton@hotmail.com>
To: dvd-discuss@eon.law.harvard.edu
Subject: Re: [dvd-discuss] DeCSS public key, been there, done that

Ok, everybody can have efdtt.c.gz as their public key!

Here is the algorithm:

Choose a j such that 256^j is a large enough random
space for you to feel secure, and factors of that order
will be hard to find in a composite number.

Pick a random number, R < 256^j
Find q = nextprime(256^j - R)
Find k = decimal representation of efdtt.c.gz
Find p = nextprime(k*256^(j+1)/q)
Verify that (p-1)(n-1) is relatively prime to your public exponent,
if not, try a few public exponents, or start over with a new
random number.

Compute n=pq, this is the public key modulus.
Verify that n/256^(j+1) = k in case there was a large (>256) gap
in the primes.  If it fails, try p=nextprime(k*256^(j+2)/q).
n can be converted to hex and gunzipped to the efdtt.c source code.

Go compute your private exponent d, then destroy p, q and R.
Let everybody know your public key and what it can be used for ;-)

Attached is a sample program to illustrate the key generation.
Feed efdtt.c.gz to its standard input.
For j=32 (256 bit random number), it takes about 1-1/2 minutes
on my 266MHz G3. Be sure to use your own random number, not the
one in the code.


_________________________________________________________________
Get your FREE download of MSN Explorer at http://explorer.msn.com




----- End forwarded message -----

-- 
-- http://www.lemuria.org
-- http://www.Nexus-Project.net
--

--vkogqOf2sHV7VnPd
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename="public.c"

#include <gmp.h>
#include <stdio.h>
/* J is j * 8 to use powers of 2 instead of 256 */
/* R is your random number, don't use the one shown
 * if this is really going to produce your public key
 */
#define J 256L
#define R "8741288239734901231012300419439827747721239184132"

main ()
{
  mpz_t a, q, p, n, k;
  unsigned long c;

  mpz_init (q);
  mpz_init (p);
  mpz_init (n);
  mpz_init (k);
  mpz_init (a);
  while ((c = getchar ()) != EOF)
    {
      mpz_mul_ui (k, k, 256L);
      mpz_add_ui (k, k, c);
    }
  printf ("k is:\n");
  mpz_out_str (stdout, 10, k);
  printf ("\n\nq is:\n");
  mpz_set_str (q, R, 0);
  mpz_set_ui (p, 1L);
  mpz_mul_2exp (p, p, J);
  mpz_sub (q, p, q);
  mpz_nextprime (q, q);
  mpz_out_str (stdout, 10, q);
  printf ("\n\np is:\n");
/* over-expanding should guarantee an answer */
  mpz_mul_2exp (a, k, J + 16L);
  mpz_tdiv_q (p, a, q);
  mpz_nextprime (p, p);
  mpz_out_str (stdout, 10, p);
  printf ("\n\nn is:\n");
  mpz_mul (n, p, q);
  mpz_out_str (stdout, 10, n);
  printf ("\n\n65537 gcd (p-1)(q-1) is:\n");
  mpz_sub_ui (p, p, 1L);
  mpz_sub_ui (q, q, 1L);
  mpz_mul (a, p, q);
  mpz_gcd_ui (a, a, 65537L);
  mpz_out_str (stdout, 10, a);
  printf ("\n\nn/256^34 is:\n");
  mpz_set_ui (q, 1L);
  mpz_mul_2exp (q, q, J + 16L);
  mpz_tdiv_q (q, n, q);
  mpz_out_str (stdout, 10, q);
  printf ("\n\n difference from k is:\n");
  mpz_sub (k, k, q);
  mpz_out_str (stdout, 10, k);
  printf ("\n");
}

--vkogqOf2sHV7VnPd
Content-Type: text/plain; charset=us-ascii
Content-Disposition: attachment; filename=keys

k is:


q is:
115792089237316195423570984999946619613535083434628263620017756260191890456207

p is:


n is:


65537 gcd (p-1)(q-1) is:
1

n/256^34 is:


 difference from k is:
0

--vkogqOf2sHV7VnPd--

