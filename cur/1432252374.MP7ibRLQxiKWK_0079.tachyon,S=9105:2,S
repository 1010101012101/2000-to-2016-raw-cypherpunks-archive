From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Fri Jun 13 12:32:55 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pd0-f173.google.com (mail-pd0-f173.google.com [209.85.192.173])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s5DGWrD1021803
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Fri, 13 Jun 2014 12:32:55 -0400
Authentication-Results: antiproton.jfet.org; dkim=pass
	reason="1024-bit key; unprotected key"
	header.d=cs.helsinki.fi header.i=@cs.helsinki.fi header.b=flcqCyUD;
	dkim-adsp=pass; dkim-atps=neutral
Received: by mail-pd0-f173.google.com with SMTP id r10so2266382pdi.18
        for <rsw@jfet.org>; Fri, 13 Jun 2014 09:30:04 -0700 (PDT)
X-Received: by 10.66.142.135 with SMTP id rw7mr4621037pab.71.1402677003912;
        Fri, 13 Jun 2014 09:30:03 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.10.98 with SMTP id h2csp493720pdb;
        Fri, 13 Jun 2014 09:30:03 -0700 (PDT)
X-Received: by 10.68.201.68 with SMTP id jy4mr4727622pbc.64.1402677002913;
        Fri, 13 Jun 2014 09:30:02 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id sd3si5290523pac.94.2014.06.13.09.30.02
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Fri, 13 Jun 2014 09:30:02 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net;
       dkim=pass header.i=@cs.helsinki.fi;
       dmarc=pass (p=REJECT dis=NONE) header.from=cs.helsinki.fi
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s5DGVMdd021690;
	Fri, 13 Jun 2014 12:31:28 -0400
Received: from script.cs.helsinki.fi (script.cs.helsinki.fi [128.214.11.1])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s5DGV9ZJ021686
 (version=TLSv1/SSLv3 cipher=AES256-GCM-SHA384 bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Fri, 13 Jun 2014 12:31:15 -0400
X-DKIM: Courier DKIM Filter v0.50+pk-2014-03-23 mail.cs.helsinki.fi Fri,
 13 Jun 2014 19:28:12 +0300
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=cs.helsinki.fi;
 h=mime-version:content-type:content-transfer-encoding:date:from
 :to:subject:message-id; s=dkim20130528; bh=wwYZoexgnpZQoCDqplKYo
 Ekz1lLyTf7Kkj7JCRPnG/U=; b=flcqCyUDVqcjy7cGoGUh1jgwLVUbR7CFS3smf
 OOrmSY6sQTp76XGbqupqm2vDO5PO9rsah5M+4PSthkVhJ1RGV8EqPtaLbjTLXbSh
 X+bhpNa1vvq7HFT3N0P7XOedT7mBHVVbkpEfJYbsTQoQdJVLmHL8WQ0zGYCMU/iF
 5Fk+7M=
Received: from webmail.cs.helsinki.fi (svm-10.cs.helsinki.fi [128.214.11.79])
 (AUTH: PLAIN oottela, TLS: TLSv1/SSLv3,256bits,AES256-SHA)
 by mail.cs.helsinki.fi with ESMTPSA; Fri, 13 Jun 2014 19:28:12 +0300
 id 0000000000080CEB.00000000539B269C.00000DDA
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8;
 format=flowed
Content-Transfer-Encoding: 7bit
Date: Fri, 13 Jun 2014 19:28:10 +0300
To: cypherpunks@cpunks.org
Subject: Re: Tinfoil Chat
Message-ID: <e27c13781ebfe213142b1cb21c0e948c@cs.helsinki.fi>
X-Sender: oottela@cs.helsinki.fi
User-Agent: CS RoundCube Webmail/0.8.1
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: oottela <oottela@cs.helsinki.fi>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 4749
Lines: 106

Hi Cathal. Thanks for your review!

The RxM that does the MAC verification doesn't leak data to network 
connected computer so attacker would have to have line of sight to 
display of RxM and through trial and error send tampered packets until 
one doesn't show the warning about tampering. By then user should have 
pretty good idea about what is going on. Recovering key material 
shouldn't be a problem since key is not reused in signing of new 
messages. The implementation however has now been changed while fixing 
more critical vulnerability with hash function input size.

Regarding second issue, LibPurple does not contribute to privacy of 
messages in any way. The only thing the computer that LibPurple is 
running on handles is OTP encrypted data. OTP keys and plaintext 
messages never touch that computer and malicious functionality of that 
computer can not possibly request the actual keys from waterfall secured 
TxM or RxM. The whitepaper explains why the system is secure even if 
attacker gains root access to computer where Pidgin is running.

I did not write the program that samples entropy via GPIO. Programs 
written in C generally work faster so I didn't feel the need to redo the 
part. Also, the installer takes care of compiling. I've done some 
testing and according to Ent /dev/urandom is more random (7.999995 bits 
/ byte ) source than the TRNG (7.997587 bits / byte). However I'm 
somewhat concerned about seeding, pseudo randomness and effect of modern 
hwrng devices - can seeding of urandom be compromised by /dev/hwrng 
input from processor with dopant trojan even if mixing entropy from 
functional TRNG is done. I'll have to read about the issue before I'll 
change the implementation. After all, with the TRNG there should be no 
auto-correlation if sampling speed is slow enough, and no bias when Von 
Neumann correction is used, despite what statistical tests say.

Also, I'll look into the ctypes library and see about the difference in 
sampling speed. As user has access to source I suppose compiling doesn't 
endanger the security in any notable way.

On 09.06.2014 12:28, Cathal Garvey wrote:
> Interesting; I'm scanning the code now, but won't pretend to be an 
> expert.
>
> First thing, your HMAC code is possibly vulnerable to a timing 
> attack:
> https://github.com/maqp/tfc/blob/master/Rx.py
> ..using direct string/byte comparisons for HMACs can be vulnerable as
> most languages will shortcut on the first mismatch. In your case, 
> using
> this attack might require the means to craft a message that matches a
> certain hash, but maybe someone who knows more could use this to 
> recover
> key material? The way to avoid this is a comparison function whose 
> time
> does not depend on the likeness or unlikeness of the compared values,
> for example by xoring the strings or characters.
>
> Second issue is the use of LibPurple at all. It's widely considered 
> to
> be a security trainwreck, and given its poor reputation *and* the 
> total
> disinclination of the libpurple devs to bother with security concerns 
> at
> all, it's easy to imagine anything up to remote code execution in
> libpurple compromising the whole system.
>
> So, your tinfoil hat could be as secure as anything, but relying on
> libpurple may undermine the entire exercise. Using a different 
> transport
> may be more valuable.
>
> Finally, you're using a custom HWRNG, and reading with custom C code 
> to
> a file. Firstly, why is this a C function, when you could probably
> achieve it in Python? But, more importantly, why not use the system 
> call
> to deliver this entropy to /dev/urandom, and use that? The mixing 
> code
> for /dev/urandom has received pretty good review, far more than your
> code can hope for, so the more you rely on /dev/urandom IMO the 
> better.
> There's a Linux system call to mix entropy into the system pool, and
> your HWRNG would be well served to use that if you ask me.
>
> And, you could probably access that call using ctypes from Python
> without requiring your end users to compile C. The less compilation
> required, the more likely you are to get user buy-in.
>
>
> On 08/06/14 03:33, oottela wrote:
>> I'd like to share a project I came up with back in spring 2012 and 
>> begun
>> working after the Snowden leaks started.
>>
>> Highlights are
>>
>> -OTP encryption for perfect secrecy
>> -OTP encrypted Keccak HMACs to prevent undetectable message 
>> tampering
>> -HW TRNG to generate truly random keys (Von Neumann whitened)
>> -HW Data diodes to provide immunity against message exfiltration 
>> attacks
>> originating from network.
>>
>> Source code and links to whitepaper and manual are available from
>>
>> https://github.com/maqp/tfc/
>>
>> Regards, Markus

