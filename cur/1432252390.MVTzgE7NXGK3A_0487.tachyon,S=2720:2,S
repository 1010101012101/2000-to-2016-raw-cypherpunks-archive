From owner-cypherpunks@al-qaeda.net  Mon Feb 23 15:45:35 2009
Return-Path: <owner-cypherpunks@al-qaeda.net>
Received: from proton.jfet.org (majordomo@localhost [127.0.0.1])
	by proton.jfet.org (8.14.1/8.14.1/Debian-9) with ESMTP id n1NKiqwF018480
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <cypherpunks-outgoing@proton.jfet.org>; Mon, 23 Feb 2009 15:44:52 -0500
Received: (from majordomo@localhost)
	by proton.jfet.org (8.14.1/8.14.1/Submit) id n1NKiqfc018479
	for cypherpunks-outgoing; Mon, 23 Feb 2009 15:44:52 -0500
Message-ID: <49A30AAF.8090709@systemics.com>
Date: Mon, 23 Feb 2009 21:44:31 +0100
From: Ian G <iang@systemics.com>
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-GB;
  rv:1.9.1b3pre) Gecko/20081204 Thunderbird/3.0b1
MIME-Version: 1.0
To: Cryptography <cryptography@metzdowd.com>
Cc: "R.A. Hettinga" <rah@shipwright.com>, cypherpunks@al-qaeda.net,
        gold-silver-crypto@rayservers.com
Subject: Re: SHA-3 Round 1: Buffer Overflows
References: <2DDB4C4E-31CE-47AF-B0AF-155086347F3A@shipwright.com>
In-Reply-To: <2DDB4C4E-31CE-47AF-B0AF-155086347F3A@shipwright.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Sender: owner-cypherpunks@al-qaeda.net
Precedence: bulk
X-Loop: al-qaeda.net
Status: O
Content-Length: 1374
Lines: 34

On 22/2/09 23:09, R.A. Hettinga wrote:
> <http://blog.fortify.com/blog/fortify/2009/02/20/SHA-3-Round-1>

> This just emphasizes what we already knew about C, even the most
> careful, security conscious developer messes up memory management.


No controversy there.

> Some
> of you are saying, so what? These are reference implementations and this
> is only Round 1. There are a few problems with that thought.
> Reference implementations don't disappear, they serve as a starting
> point for future implementations or are used directly. A bug in the RSA
> reference implementation was responsible for vulnerabilities in OpenSSL
> and two seperate SSH implementations. They can also be used to design
> hardware implementations, using buffer sizes to decide how much silicon
> should be used.


It is certainly appreciated that work is put in to improve the 
implementations during the competition (my group did something similar 
for the Java parts of AES, so I know how much work it can be).

However I think it is not really efficient at this stage to insist on 
secure programming for submission implementations.  For the simple 
reason that there are 42 submissions, and 41 of those will be thrown 
away, more or less.  There isn't much point in making the 41 secure; 
better off to save the energy until "the one" is found.  Then 
concentrate the energy, no?



iang

