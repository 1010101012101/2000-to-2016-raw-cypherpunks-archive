Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id t8KBdp4p006093;
	Sun, 20 Sep 2015 07:39:57 -0400
Received: from cannabis.dataforce.net (cannabis.dataforce.net [195.42.160.49])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id
 t8KBdkJI006089
 for <cypherpunks@cpunks.org>; Sun, 20 Sep 2015 07:39:48 -0400
Received: by cannabis.dataforce.net (Postfix, from userid 12794)
 id 4679B4A0539; Sun, 20 Sep 2015 14:39:42 +0300 (MSK)
Date: Sun, 20 Sep 2015 14:39:41 +0300
From: Georgi Guninski <guninski@guninski.com>
To: cypherpunks@cpunks.org, libressl@openbsd.org
Subject: Why libressl-2.2.3 and openssl-1.0.1p accept very weak elliptic
 curves?
Message-ID: <20150920113941.GA2587@sivokote.iziade.m$>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
header: best read with a sniffer
User-Agent: Mutt/1.5.20 (2009-06-14)
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Lines: 46

Summary:  libressl-2.2.3 and openssl-1.0.1p appear to accept elliptic
curves which might be broken by Pollard's rho DL in O(2^56) or O(2^82)
group operations

Pollard's rho DL algorithm [1] solves discrete logarithm in O(\sqrt{n})
where n is the group order. Equivalently the complexity is
O(2^{(log_2{n})/2}).

Both libressl-2.2.3 and openssl-1.0.1p have curves with
log_2{n}=112 and NIST curve with log_2{n}=163.

Assuming Pollard's rho succeeds, the complexity is O(2^56) and O(2^82)
group operations.

The first is close to real time on ``nice hardware''.

To reproduce:

$ ~/inst/openssl-1.0.1p/apps/openssl ecparam -list_curves
 secp112r1 : SECG/WTLS curve over a 112 bit prime field
  sect163k1 : NIST/SECG/WTLS curve over a 163 bit binary field

$ ~/inst/libressl-2.2.3/apps/openssl ecparam -list_curves|grep -i ' 1'
   secp112r1 : SECG/WTLS curve over a 112 bit prime field
   sect163k1 : NIST/SECG/WTLS curve over a 163 bit binary field

For reference,
http://comments.gmane.org/gmane.comp.security.cypherpunks/6101
Bitcoin networks surpasses 2^80 hashes per week

I believe in an Edward model of EC, the group operation on the EC
isn't much slower than Bitcoin SHA hash, so someone with such
resources might break ...2r1 in nearly real time and ...3k1 in few
weeks.

This resembles the ``DSA oddity'' of _forcing_ q as low as 160
bits, giving the same level (to ...3k1) of security compared to
DSA as shown at [2], search for "160"


[1]:
https://en.wikipedia.org/w/index.php?title=Pollard%27s_rho_algorithm_for_logarithms&oldid=667021803
[2]:
https://j.ludost.net/blog/archives/2015/09/05/rfc-2631_fips_186-3_and_openssls_implementation_of_dsa_appear_broken_and_possibly_backdoored/index.html

