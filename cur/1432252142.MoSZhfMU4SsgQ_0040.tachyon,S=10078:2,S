From cypherpunks-bounces@cpunks.org  Thu Nov 28 15:20:47 2013
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id rASKJueO014417;
	Thu, 28 Nov 2013 15:20:02 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=jfet.org; s=pbar;
	t=1385670047; bh=MqEO5KnKvUBXUxES3gOlPlJnoqwlHBgyET0qBVUalto=;
	h=Date:From:To:Subject:References:In-Reply-To:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe;
	b=z8pmIlpPlNaanEj2L3KIoms8+jwj+SpeTP9rYm+RXF1Q5xnxMXJPpi9O+JAG+ygn5
	 QxZQ+eWfwNd4SXYuDg1OiiVDcEOthEgFbe++q23Alu21yhSm+DPs5CxCuquZvlHM/6
	 G9JuR0l0DaPZoGPhN49CcaeyKejRzWF58PJXCAhs=
Received: from mail-pd0-f196.google.com (mail-pd0-f196.google.com
 [209.85.192.196])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id rASKJrae014390
 (version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
 for <cypherpunks@cpunks.org>; Thu, 28 Nov 2013 15:19:54 -0500
Authentication-Results: antiproton.jfet.org; dkim=pass
 reason="2048-bit key; insecure key"
 header.d=gmail.com header.i=@gmail.com header.b=AgkHQbKG;
 dkim-adsp=none (insecure policy); dkim-atps=neutral
Received: by mail-pd0-f196.google.com with SMTP id p10so3994285pdj.11
 for <cypherpunks@cpunks.org>; Thu, 28 Nov 2013 12:20:29 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20120113;
 h=sender:date:from:to:cc:subject:message-id:mail-followup-to
 :references:mime-version:content-type:content-disposition
 :in-reply-to:user-agent;
 bh=MqEO5KnKvUBXUxES3gOlPlJnoqwlHBgyET0qBVUalto=;
 b=AgkHQbKG5FVvY0DIBbfiE21sp5h3VVJm6kXYUMgpli3cf8YmtZNCmG1OJ6z9S53ndH
 s4OkPc+nN5rVnFm+ouaPM4mL2J+3HGHYSs3prYgDkCF8HkojieYn4NrA7LYkaW/Kd2tm
 kcJm3IPw97DGL9sz2g2S1J50q6nhUc7LRkOw1UreNzf8a7zVW/oVRDvTldxxJCnfBTXr
 BTewBG4b1ZcJWKa+IEvLE6MOiEbzJU1E5Cpk/t4WruRpbpgHvfyJrrpZOCMuIW+CGZxe
 Na9P9CPUCoJMQ8ODJ80WZZPH9rHE2sDM1yXWeSTpaxsorVrQUOdUklGxTWAZYcJMvn8l
 ulLw==
X-Received: by 10.66.136.71 with SMTP id py7mr48750084pab.2.1385670029231;
 Thu, 28 Nov 2013 12:20:29 -0800 (PST)
Received: from antiproton.jfet.org (antiproton.jfet.org. [209.141.47.85])
 by mx.google.com with ESMTPSA id km1sm5389486pbd.13.2013.11.28.12.20.28
 for <multiple recipients>
 (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
 Thu, 28 Nov 2013 12:20:28 -0800 (PST)
Date: Thu, 28 Nov 2013 15:19:44 -0500
From: "Riad S. Wahby" <rsw@jfet.org>
To: Sean Lynch <seanl@literati.org>
Subject: Re: bitcoin as a global medium of exchange
Message-ID: <20131128201944.GA13852@antiproton.jfet.org>
Mail-Followup-To: Sean Lynch <seanl@literati.org>,
 coderman <coderman@gmail.com>, cypherpunks@cpunks.org
References: <CAFVRnyruheDLORaTjU=V6U3Z6m8XTjyzQYgA+psqWE=o1Y-k5g@mail.gmail.com>
 <1385421475.40988.YahooMailNeo@web141201.mail.bf1.yahoo.com>
 <CAFVRnyr1XVKf0f1KasBV_MBuH=P7+3XABQE2hur8M8BwZ-e6Pw@mail.gmail.com>
 <20131126003204.GK7523@hexapodia.org>
 <CABdoPv57xOUTRV+5DAO2R7MbYv7_u+mqEtV_JqBpuBrJW6kZJw@mail.gmail.com>
 <CAFVRnyrfvox-ZDpvWm5PThA3CSjSt55aB-7yp9bveEbbWB4JCA@mail.gmail.com>
 <CAJVRA1QAK1bSTr_mnDWUz2p+FEkZ1ELg6VaPKot1-K=EnNiLjw@mail.gmail.com>
 <CAFVRnyogjM3=wPoJSegOq-G+SB4CF3U=AeRXdO+1A1gBQGn1sA@mail.gmail.com>
 <CAJVRA1TRZRG3kUx3Qy2W1K3pSS9-G=gKZ8mpmoDGJ23L7FzAdw@mail.gmail.com>
 <87vbzfr9s7.fsf@literati.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <87vbzfr9s7.fsf@literati.org>
User-Agent: Mutt/1.5.21 (2010-09-15)
Cc: cypherpunks@cpunks.org
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Status: O
Content-Length: 5847
Lines: 113

Sean Lynch <seanl@literati.org> wrote:
> On Mon, Nov 25 2013, coderman wrote:
> > surely there is prior art?
> 
> I just remembered, there is in fact prior art, though it's state of the
> art, as in "nearly practical." They're called SNARKs: Succinct
> Non-interactive ARguments of Knowledge. You can take any computation and
> annotate it sufficiently that whoever runs the computation can generate
> a (constant size) proof that they did it correctly in (nearly) constant
> time. Andrew Miller posted about it on the Tahoe-LAFS mailing list. See
> http://eprint.iacr.org/2013/507.pdf for one implementation.
>
> I'm not sure if you could use this for a Bitcoin-style problem, though,
> since I have no idea if the difficulty can be adjusted smoothly. It's
> interesting that we can now take ALL computations problems and turn
> them into the "easy to verify" variety, however.

Interesting to see this mentioned here. Mike Walfish and Andrew Blumberg
have written a nice survey on the work in this area:
    http://eccc.hpi-web.de/report/2013/165
Justin Thaler provides another perspective:
    http://mybiasedcoin.blogspot.com/2013/09/guest-post-by-justin-thaler-mini-survey.html

I can also add a little context to this conversation---I've actually
done an independent re-implementation of the work of Ben-Sasson et al
that Sean linked above.

At a high level, my take is that this area has huge potential, but
neither this work nor other projects in the area (summarized below) are
really practical---yet. The overhead for the party constructing the
proof is at least 3 orders of magnitude more than the cost of running
the computation directly. The work of Ben-Sasson et al costs more like 6
orders of magnitude! (In principle, though, they are paying this price
to achieve greater computational generality.)

The work required of the party verifying the computation is also 
non-trivial: while *checking* the answer is quick, these systems (with
one exception) require pre-processing work on the computation being
verified, and the cost of this is several orders of magnitude larger
than simply computing the result directly. (Note, however, that this
cost can be amortized by outsourcing the same computation over many
different inputs.)

But there is some real hope here: the rate at which progress is being
made is impressive (two years ago overhead was more like 20 orders of
magnitude than three!), and there are contexts where the extra work is
worth the cost. Perhaps one of these is a cryptocurrency that relies on
proof of "useful" work.

With regard to smooth difficulty adjustment: since the goal of most of
these projects is to encode arbitrary computations, the problems of
difficulty adjustment and proof of work become orthogonal.

For those wanting a bit more detail:

Broadly speaking, there are four research groups working on this stuff:
  - Ben-Sasson et al at Technion/Tel Aviv/MIT
        http://scipr-lab.org/
  - Parno et al at Microsoft Research
        http://research.microsoft.com/apps/pubs/default.aspx?id=180286
  - Thaler et al at Harvard
        http://people.seas.harvard.edu/~jthaler/PracticalVerifiedComputation.html
  - Walfish et al at UT Austin/NYU (full disclosure: I work with these guys)
        http://cs.utexas.edu/pepper/

The work of Thaler et al is somehat distinct from the other three
because, while it is extremely efficient for certain computations,
it is not general: the efficiency improvements it offers are limited
to computations with a regular underlying structure. However, when
this requirement is met, it has very low overhead compared to the
other three systems, and it involves no costly pre-processing.

The three other groups have built systems that compile from a subset 
of C to a form whose result can be encoded into a probabilistically
checkable proof. The resulting PCP is huge, so in all three systems the
result is not the proof itself. Rather, the proof is queried and the
result used for verification. The method of querying is one
distinguishing factor between these systems.

Ben-Sasson et al and Parno et al share common ancestry in the work of
Gennaro et al, also at Microsoft Research.
    http://research.microsoft.com/apps/pubs/default.aspx?id=180285
In both cases, the query/response take the form of a noninteractive
argument. Basically, the queries are encrypted and bundled into the
description of the computation ahead of time, after which the
computation can be run by providing an input and requesting an answer.
These systems also support public verifiability, allowing the answer to
be checked by anyone holding the public verification key.

The work of Ben-Sasson et al achieves more generality by encoding
computations as the execution of a virtual microprocessor, then
verifying correct execution of the processor. This system supports 
full C semantics and achieves an efficient abstraction for verified RAM
(again, at a penalty of 3 *additional* orders of magnitude beyond the
other systems).

The UT/NYU group have also adapted a simplification of Gennaro et al,
but their system really rests upon refinements of the efficient argument
systems of Ishai et al.
    http://www.cs.ucla.edu/~rafail/PUBLIC/79.pdf
In this case, verification involves two separate interactions, one that
establishes a commitment to the proof and one that queries it. Though it
requires interaction, the advantage of this approach is that it is
cryptographically simpler. Concretely, the crypto is one of the most
expensive parts of the system, so this simplification results in good
performance relative to the other systems.

The UT/NYU group have also developed verifiable storage abstractions,
including the ability to verify computations (in zero knowledge) on
hidden state for which you hold a cryptographic commitment.
    http://eprint.iacr.org/2013/356

-=rsw

