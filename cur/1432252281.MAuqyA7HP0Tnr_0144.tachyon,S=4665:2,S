From owner-cypherpunks-outgoing@einstein.ssz.com  Sat Nov  4 20:10:24 2000
Received: from fort-point-station.mit.edu (FORT-POINT-STATION.MIT.EDU [18.72.0.53])
	by positron.mit.edu (8.9.3/8.9.3) with ESMTP id UAA13957
	for <kwantam@positron.mit.edu>; Sat, 4 Nov 2000 20:10:24 -0500
Received: from einstein.ssz.com (mdom@einstein.ssz.com [204.96.2.99])
	by fort-point-station.mit.edu (8.9.2/8.9.2) with ESMTP id UAA29640
	for <rsw@MIT.EDU>; Sat, 4 Nov 2000 20:10:23 -0500 (EST)
Received: (from mdom@localhost)
	by einstein.ssz.com (8.8.8/8.8.8) id SAA17503
	for cypherpunks-outgoing; Sat, 4 Nov 2000 18:58:01 -0600
Received: from hcs.harvard.edu (hcs.harvard.edu [140.247.73.252])
	by einstein.ssz.com (8.8.8/8.8.8) with ESMTP id SAA17499
	for <cypherpunks@EINSTEIN.ssz.com>; Sat, 4 Nov 2000 18:57:58 -0600
Received: from localhost (dmolnar@localhost)
	by hcs.harvard.edu (8.9.3/8.9.3) with ESMTP id TAA14393
	for <cypherpunks@EINSTEIN.ssz.com>; Sat, 4 Nov 2000 19:51:27 -0500 (EST)
Date: Sat, 4 Nov 2000 19:51:26 -0500 (EST)
From: dmolnar <dmolnar@hcs.harvard.edu>
To: cypherpunks@einstein.ssz.com
Subject: CDR: Re: Minesweeper and defeating modern encryption technology
In-Reply-To: <Pine.LNX.3.96.1001104171216.295j-100000@einstein.ssz.com>
Message-ID: <Pine.OSF.4.05.10011041936170.11460-100000@hcs.harvard.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-cypherpunks@einstein.ssz.com
Precedence: bulk
Reply-To: cypherpunks@einstein.ssz.com
X-Mailing-List: cypherpunks@ssz.com
X-List-Admin: list@ssz.com
X-Loop: ssz.com
X-Language: English, Russian, German
Status: O
Content-Length: 3032
Lines: 80



On Sat, 4 Nov 2000, Jim Choate wrote:

> You are in fact saying if I can resolve one NP -> P then I can resovle ALL
> NP as P. Yet in your earlier email you said the opposite, that you didn't
> believe that saying the solution of one NP in a P format meant that all NP
> could be solved in a P format.

I was trying to make a distinction between two kinds of problems. 
I'm sorry if I wasn't clear.

1) The first kind are NP-hard problems. These are problems for which
knowing an algorithm to solve the problem *would* allow you to solve
every problem in NP. These are the kinds of problems I was referring
to in the paragraph I snipped from this message.

2) The second kind are problems which are not known to be in P, 
which ARE in NP, but which are not known to be NP-hard. Factoring is
an example of one such problem. So is discrete log. 
Knowing a solution algorithm for one of these types of problems does not
necessarily tell you anything about solutions for any other problem in NP.
These are the kinds of problems I was referring to in "the previous
e-mail." 

I agree with you that the popular press often ignores this distinction,
and it's annoying as all get out. 




> 
> You are in effect saying that primality, travelling salesman, etc. are
> reducible to a single algorithm with respect to resolution.
> 

It's not a single algorithm, per se. It's a combination of the "reduction"
from primality, salesman, etc. to satisfiability + the algorithm for
solving SAT. The reduction can be thought of as "reformatting" the problem
in terms of SAT; it is specific to each problem. 

Suppose I have an efficient algorithm FINDSAT(F) which takes a boolean
formula F and returns "Y" if it's satisfiable, "N" if it is not. Now my
algorithm for factoring looks rougly like this:

	1) Run my reduction algorithm from factoring --> SAT.
	This reduction algorithm is specially tailored to the
	factoring problem, but one can always be found.
	Why?

		1.1) Because factoring can always be expressed
		as a program on a nondeterministic TM

		1.2) Cook's proof shows how to mechanically
		express the computation of a nondeterministic
		TM as a formula which is satisfiable iff the 
		TM halts and accepts on a given string.

	2) Take the big weird formula generated from step 1) 
	and feed to FINDSAT(F). You now have a way to solve
	the problem using FINDSAT(F). 


> As to Cooks assertion, it is possible to create logical statements which
> are irresolvable, irrespective of time or algorithm. So it is clear that
> there are in fact statements which can't be resolved so there must be at
> least some class of NP that are not resolvable to P.

What I would say, according to my understanding of the definitions,
is that there is no succint certificate for unsatisfiability known.
So the problem of recognizing  irresolvable = unsatisfiable formulas is
not a problem in NP. 

> But you're welcome to your own opinion.

As are you, but the hope is that in mathematical matters we can come to
some kind of agreement. 

-David


