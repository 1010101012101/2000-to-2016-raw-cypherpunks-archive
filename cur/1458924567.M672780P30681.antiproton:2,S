Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id u2PGm7KR030666;
	Fri, 25 Mar 2016 12:48:08 -0400
Authentication-Results: antiproton.jfet.org; dkim=pass
	reason="1024-bit key; unprotected key"
	header.d=riseup.net header.i=@riseup.net header.b=par9wAUP;
	dkim-adsp=pass; dkim-atps=neutral
Received: from mx1.riseup.net (mx1.riseup.net [198.252.153.129])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-8) with ESMTP id u2PGm4em030662
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Fri, 25 Mar 2016 12:48:06 -0400
Received: from piha.riseup.net (unknown [10.0.1.163])
 (using TLSv1 with cipher ECDHE-RSA-AES256-SHA (256/256 bits))
 (Client CN "*.riseup.net",
 Issuer "COMODO RSA Domain Validation Secure Server CA" (verified OK))
 by mx1.riseup.net (Postfix) with ESMTPS id 98B2A1A835F
 for <cypherpunks@cpunks.org>; Fri, 25 Mar 2016 16:48:04 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=riseup.net; s=squak;
 t=1458924484; bh=ZPgqrO6wmaqu7iJriiKc2A+6gvDr1MRaq5we2Xader4=;
 h=To:From:Subject:Date:From;
 b=par9wAUPpCeeuZH8lpnNY8Y6RTu+12eGUSgdbMeanTfH9y3gz7xc5EDDlhqrM6OyQ
 mj0cEBi6F2OkCZnbZkVT1RE4pFwnPxYqOhBdaYFqKWu+iVfeovwHt5lTkUDLCzkLjp
 9AL1A4bgCiC65yjQ+CCz6+H7x4iRxq/EUcZXB8AQ=
Received: from [127.0.0.1] (localhost [127.0.0.1])
 (Authenticated sender: Rayzer) with ESMTPSA id 3F70E1C0511
To: Cypherpunks <cypherpunks@cpunks.org>
From: Rayzer <Rayzer@riseup.net>
Subject: Cloudflare blogs on their Cert Tech
Openpgp: id=E4680A20986D50D5C05C1B3E0FB61A0728EC7796
Message-ID: <56F56BBF.9040706@riseup.net>
Date: Fri, 25 Mar 2016 09:47:59 -0700
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha1;
 protocol="application/pgp-signature";
 boundary="29kA22j8Gv7KKFbt4xqS4nCKXcVkTMbb9"
X-Virus-Scanned: clamav-milter 0.99 at mx1.riseup.net
X-Virus-Status: Clean
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
Lines: 221

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--29kA22j8Gv7KKFbt4xqS4nCKXcVkTMbb9
Content-Type: multipart/alternative;
 boundary="------------080608070307050807080108"

This is a multi-part message in MIME format.
--------------080608070307050807080108
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Wondering if their cert tech can spoof a cert to look like it belongs to
a site they DNS when it really belongs to them and you've never really
visited the site at all.

    TLS Certificate Optimization: The Technical Details behind "No
    Browser Left Behind"

    Overview

    Back in early December we announced our "no browser left behind"
    initiative to the world. Since then, we have served well over 500
    billion SHA-1 certificates to visitors that otherwise would not have
    been able to communicate securely with our customers=E2=80=99 sites u=
sing
    HTTPS. All the while, we=E2=80=99ve continued to present newer SHA-2
    certificates to modern browsers using the latest in elliptic curve
    cryptography, demonstrating that one does not have to sacrifice
    security to accommodate all the world=E2=80=99s Internet users. (If y=
ou
    weren=E2=80=99t able to acquire a SHA-1 certificate before CAs ceased=

    issuing them on 2015/12/31, you can still sign up for a paid plan
    and we will immediately generate one to serve to your legacy visitors=
=2E)

    Shortly after we announced these new benefits for our paid Universal
    SSL customers, we started hearing from other technology leaders who
    were implementing (or already had implemented) similar
    functionality. At first glance, the logic to identify incoming
    connections that only support SHA-1 seems straightforward, but as we
    spoke with our friends at Facebook, Twitter, and Mozilla, I realized
    that everyone was taking a slightly different approach. Complicating
    the matter even further was the fact that at CloudFlare we not only
    wanted to optimize between SHA-1 and SHA-2, but also between RSA and
    the newer, but less universally supported ECDSA certificates. Solve
    the "optimal certificate" question incorrectly, and the TLS
    handshake will fail =E2=80=94 or get explicitly aborted by browsers t=
hat
    have deprecated SHA-1 entirely; solve it correctly, and the client
    and server will establish the most performant, secure connection
    available between the two endpoints.

    Certificate Optimization Logic

    After several trillion requests, we=E2=80=99re confident that our app=
roach
    works quite well for CloudFlare=E2=80=99s customers and their visitor=
s. If
    you have taken an alternative approach to implementation, or have
    found any exceptions/potential refinements to our logic, please
    chime in below. We remain committed to withdrawing SHA-1 support if,
    as our CEO said, "a vulnerability is discovered [in our certificate
    optimization logic] which allows some form of downgrade attack=E2=80=94=
where
    a modern browser can be tricked into receiving a certificate signed
    with an insecure protocol=E2=80=94and the vulnerability cannot be pat=
ched".
    TLS Handshake

    Before your web browser can securely exchange "application data"
    such as HTTP GET or POST requests and responses with a web server,
    it must first establish the cryptographic parameters of the secure
    session. This well-choreographed dance, known as the SSL/TLS
    handshake, commences as soon as you click, type, or get redirected
    to a URL containing the "https://" scheme. (The process described
    below also applies to connections from any user agent =E2=80=94 not j=
ust
    browsers=E2=80=94so substitute "mobile app", "command-line utility", =
or
    anything else that can communicate via HTTPS.)


More:
https://blog.cloudflare.com/tls-certificate-optimization-technical-detail=
s/

--=20
RR
"Through counter-intelligence it should be possible to pinpoint potential=
 trouble-makers ... And neutralize them, neutralize them, neutralize them=
"


--------------080608070307050807080108
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

<html>
  <head>

    <meta http-equiv=3D"content-type" content=3D"text/html; charset=3DUTF=
-8">
  </head>
  <body bgcolor=3D"#FFFFFF" text=3D"#000000">
    Wondering if their cert tech can spoof a cert to look like it
    belongs to a site they DNS when it really belongs to them and you've
    never really visited the site at all.<br>
    <br>
    <blockquote>TLS Certificate Optimization: The Technical Details
      behind "No Browser Left Behind"<br>
      <br>
      Overview<br>
      <br>
      Back in early December we announced our "no browser left behind"
      initiative to the world. Since then, we have served well over 500
      billion SHA-1 certificates to visitors that otherwise would not
      have been able to communicate securely with our customers=E2=80=99 =
sites
      using HTTPS. All the while, we=E2=80=99ve continued to present newe=
r SHA-2
      certificates to modern browsers using the latest in elliptic curve
      cryptography, demonstrating that one does not have to sacrifice
      security to accommodate all the world=E2=80=99s Internet users. (If=
 you
      weren=E2=80=99t able to acquire a SHA-1 certificate before CAs ceas=
ed
      issuing them on 2015/12/31, you can still sign up for a paid plan
      and we will immediately generate one to serve to your legacy
      visitors.)<br>
      <br>
      Shortly after we announced these new benefits for our paid
      Universal SSL customers, we started hearing from other technology
      leaders who were implementing (or already had implemented) similar
      functionality. At first glance, the logic to identify incoming
      connections that only support SHA-1 seems straightforward, but as
      we spoke with our friends at Facebook, Twitter, and Mozilla, I
      realized that everyone was taking a slightly different approach.
      Complicating the matter even further was the fact that at
      CloudFlare we not only wanted to optimize between SHA-1 and SHA-2,
      but also between RSA and the newer, but less universally supported
      ECDSA certificates. Solve the "optimal certificate" question
      incorrectly, and the TLS handshake will fail =E2=80=94 or get expli=
citly
      aborted by browsers that have deprecated SHA-1 entirely; solve it
      correctly, and the client and server will establish the most
      performant, secure connection available between the two endpoints.<=
br>
      <br>
      Certificate Optimization Logic<br>
      <br>
      After several trillion requests, we=E2=80=99re confident that our a=
pproach
      works quite well for CloudFlare=E2=80=99s customers and their visit=
ors. If
      you have taken an alternative approach to implementation, or have
      found any exceptions/potential refinements to our logic, please
      chime in below. We remain committed to withdrawing SHA-1 support
      if, as our CEO said, "a vulnerability is discovered [in our
      certificate optimization logic] which allows some form of
      downgrade attack=E2=80=94where a modern browser can be tricked into=

      receiving a certificate signed with an insecure protocol=E2=80=94an=
d the
      vulnerability cannot be patched".<br>
      TLS Handshake<br>
      <br>
      Before your web browser can securely exchange "application data"
      such as HTTP GET or POST requests and responses with a web server,
      it must first establish the cryptographic parameters of the secure
      session. This well-choreographed dance, known as the SSL/TLS
      handshake, commences as soon as you click, type, or get redirected
      to a URL containing the <a class=3D"moz-txt-link-rfc2396E" href=3D"=
https://">"https://"</a> scheme. (The process described
      below also applies to connections from any user agent =E2=80=94 not=
 just
      browsers=E2=80=94so substitute "mobile app", "command-line utility"=
, or
      anything else that can communicate via HTTPS.)<br>
      <br>
    </blockquote>
    <br>
    More:
<a class=3D"moz-txt-link-freetext" href=3D"https://blog.cloudflare.com/tl=
s-certificate-optimization-technical-details/">https://blog.cloudflare.co=
m/tls-certificate-optimization-technical-details/</a><br>
    <pre class=3D"moz-signature" cols=3D"72">--=20
RR
"Through counter-intelligence it should be possible to pinpoint potential=
 trouble-makers ... And neutralize them, neutralize them, neutralize them=
"</pre>
  </body>
</html>

--------------080608070307050807080108--

--29kA22j8Gv7KKFbt4xqS4nCKXcVkTMbb9
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQIcBAEBAgAGBQJW9WvCAAoJEA+2Ggco7HeWMq8QAJeHqoznayKzsswSFO22Q/9B
RKM6DlJ69JICoNiciTMca9qUQGWVkH11jvB/sirW8X6/O7gm2oV+EW3Hpe9fCrYy
iD/o3G5VRjwjA6jSCsgF9kIpKM74cwrqsS31rLntdmgID+GrZjlL6kr6mv0f3Ros
eFtCwsi3KeLoh+gfPiPLD+yNNY7hT2ru8dTVK86CCbdt0fx4ocI4Wk2yAHLnlGR7
DM9QXQmUEXoX7o3c8eg58V0pEX2YulbdBSPIEn7h6jai7VLTO54UKo5lC5mSN4sw
cOK+CLiRy3UMu971avEj0y055636adWM3j3/LFre7dbDm8rx2VxeOKqV1zRe2tHm
huT9U/h8RfITujmA3Uey+cWG0PDdys0/wqGQC6fxzn40XkD5l75zElQBg8LhuF5+
+nQRaRLnUwhQhdPEnMYGX/h0zygrH/fjSzuxB8WZ7msp0XxVbUhqA888Zf0/zcbK
a83LHKrwKRxQTDug7r5xRDaY20y+yDJphdfWTIlOxbzzmqvhB3pPMVlRcZNtRgtE
iCFPsb+BZI6jHexqL2EyuXe3ahwDa4Wd5yEgFb/oyWWGAj56p0pEwaqN2Qr7VvU4
+zB7Lvw6HIbYWMqOaJ7ly0zI2Y+jMqLiVdOThouWlS6EXkW6V0Z6a29kmTroyFQu
fBrH6sd0dshuSZlJQb2M
=d8ib
-----END PGP SIGNATURE-----

--29kA22j8Gv7KKFbt4xqS4nCKXcVkTMbb9--

