From owner-cypherpunks@Algebra.COM  Thu Mar  8 07:35:17 2001
Received: from pacific-carrier-annex.mit.edu (PACIFIC-CARRIER-ANNEX.MIT.EDU [18.7.21.83])
	by positron.mit.edu (8.9.3/8.9.3) with ESMTP id HAA21395
	for <kwantam@positron.mit.edu>; Thu, 8 Mar 2001 07:35:01 -0500
Received: from ak47.algebra.com (root@ak47.algebra.com [208.233.99.160])
	by pacific-carrier-annex.mit.edu (8.9.2/8.9.2) with ESMTP id HAA20814
	for <rsw@mit.edu>; Thu, 8 Mar 2001 07:35:01 -0500 (EST)
Received: (from majordom@localhost)
	by ak47.algebra.com (8.11.1/8.11.1) id f28CFIT32467
	for cypherpunks-outgoing; Thu, 8 Mar 2001 06:15:18 -0600
X-Authentication-Warning: ak47.algebra.com: majordom set sender to owner-cypherpunks@Algebra.COM using -f
Received: from toad.com ([140.174.2.1])
	by ak47.algebra.com (8.11.1/8.11.1) with ESMTP id f28CFG432453
	for <cypherpunks@algebra.com>; Thu, 8 Mar 2001 06:15:17 -0600
Received: (from majordom@localhost) by toad.com (8.7.5/8.7.3) id EAA25737 for cypherpunks-unedited-outgoing; Thu, 8 Mar 2001 04:10:40 -0800 (PST)
Received: from mailserver.wilnetonline.net ([202.164.96.4]) by toad.com (8.7.5/8.7.3) with ESMTP id EAA25730 for <cypherpunks@toad.com>; Thu, 8 Mar 2001 04:10:31 -0800 (PST)
From: jamehta@wilnetonline.net
Received: from jamehta ([202.164.105.212]) by
          mailserver.wilnetonline.net (Netscape Messaging Server 4.15)
          with SMTP id G9VOK804.2AL for <cypherpunks@toad.com>; Thu, 8 Mar
          2001 17:42:08 +0530 
To: <cypherpunks@toad.com>
Old-Subject: a request for help regarding rc5 algorithm from a student
Date: Thu, 8 Mar 2001 02:35:26 +0530
Message-ID: <MABBJBJJGOEMCKDFMOPKEEEJCAAA.jamehta@wilnetonline.net>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)
Importance: Normal
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2314.1300
Subject:  a request for help regarding rc5 algorithm from a student
X-Algebra: <A HREF=http://www.algebra.com>Algebra</A>
Sender: owner-cypherpunks@Algebra.COM
Precedence: bulk
X-Mailing-List: cypherpunks@algebra.com
X-List-Admin: ichudov@algebra.com
X-Loop: cypherpunks@algebra.com
Status: O
Content-Length: 2486
Lines: 66


respected sir,
       i am a student(B.E,electronics) of M S University,Baroda,India.my
name is kurang mehta. as my final year project i am implementing voice
encryption algorithm using the dsp kit tms320c5x. i came across your
reference by surfing the net. i have implemented the rc5 encryption
algorithm but the decryption part is becoming a problem for me. i am
herewith sending you the encryption algorithm:

We assume that the input block is given in two w-bit registers A and B. We
also assume that key-expansion has already been performed, so that the array
S[0...t-1] has been computed. Below is the encryption algorithm in
pseudo-code. The output is also placed in registers A and B.

     A = A + S[0];
     B = B + S[1];
     FOR i = 1 TO r DO

          A = ((A [Image] B) <<< B) + S[2*i];
          B = ((B [Image] A) <<< A) + S[2*i+1];

The key expansion is also performed as showm below:(Image is any constant)


The first algorithmic step of key expansion is to copy the secret key
K[0...b-1] into an array L[0...c-1] of c = [Image] words, where u=w/8 is the
number of bytes/word. This operation is done in a natural manner, using u
consecutive key bytes of K to fill up each successive word in L, low-order
byte to high-order byte. Any unfilled byte positions of L are zeroed.

The second algorithmic step of key expansion is to initialize array S to a
particular fixed (key-independent) pseudo-random bit pattern, using an
arithmetic progression modulo [Image] determined by the "magic constants"
[Image] and [Image]. Since [Image] is odd, the arithmetic progression has
period [Image].

     S[0] = [Image];
     FOR i = 1 TO t-1 DO

          S[i] = S[i-1] + [Image];

The third algorithmic step of key expansion is to mix in the user's secret
key in three passes over the arrays S and L. More precisely, due to the
potentially different sizes of S and L, the larger array will be processed
three times, and the other may be handled more times.

     i = j = 0;
     A = B = 0;
     DO 3*max(t,c) TIMES:

          A = S[i] = (S[i] + A + B) <<< 3;
          B = L[j] = (L[j] + A + B) <<< (A+B);
          i = (i + 1) mod(t);
          j = (j + 1) mod(c);

The key-expansion function has a certain amount of "one-wayness": it is not
so easy to determine K from S.

Now if possible i would like to get some help from you regarding the rc5
decryption algorithm (in the form of source code or c language).

awaiting a response at the earliest.

sincerely yours

kurang

