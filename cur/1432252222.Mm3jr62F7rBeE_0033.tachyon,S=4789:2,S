From cypherpunks-bounces@cpunks.org  Sun Jan 19 13:44:15 2014
Return-Path: <cypherpunks-bounces@cpunks.org>
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0JIhpTf022928;
	Sun, 19 Jan 2014 13:43:55 -0500
Received: from order.stressinduktion.org (order.stressinduktion.org
 [87.106.68.36])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4) with ESMTP id s0JIhlEj022924
 (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Sun, 19 Jan 2014 13:43:49 -0500
Received: by order.stressinduktion.org (Postfix, from userid 500)
 id 7C2781A0C284; Sun, 19 Jan 2014 19:43:43 +0100 (CET)
Date: Sun, 19 Jan 2014 19:43:43 +0100
From: Hannes Frederic Sowa <hannes@stressinduktion.org>
To: Hannes Mehnert <hannes@mehnert.org>
Subject: Re: Programming languages for a safe and secure future
Message-ID: <20140119184343.GF6302@order.stressinduktion.org>
References: <1389950750.79148.YahooMailNeo@web141202.mail.bf1.yahoo.com>
 <52DAE12D.9080406@cypherpunks.to>
 <CAJVRA1QtQySXCmBHK5hey36UL6E8afDMrctcGTnmbka+mfiqRQ@mail.gmail.com>
 <52DC1500.3020805@mehnert.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <52DC1500.3020805@mehnert.org>
Cc: cypherpunks@cpunks.org
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>

Hi Hannes! :)

On Sun, Jan 19, 2014 at 06:10:08PM +0000, Hannes Mehnert wrote:
> On 01/18/2014 23:29, coderman wrote:
> > other languages on my short list: - C/C++ (it's everywhere.  it
> > will remain everywhere.) - Scheme/Lisp (for the perspective more
> > than utility) - Ruby/PHP/PERL (good complements to Python. except
> > PHP, which should be hated and ostracized :) - Bash/Csh/PowerShell
> > (scripting++) - Go/C#/Java (you're going to want to know these
> > sooner or later) what would you add, and why?
> 
> while it is nice to see that people are interesting in programming
> language where common bug classes of C and C++ are not present (read:
> no buffer overflows, format string exploits, no memory corruptions due
> to temporal safety (no double free etc.)). I suggest to look into
> http://media.ccc.de/browse/congress/2013/30C3_-_5412_-_en_-_saal_1_-_201312271830_-_bug_class_genocide_-_andreas_bogk.html
> - -- which is about a compiler plugin to get rid of these bug classes in
> C (or any other language using LLVM).

MPX was already committed to gcc trunk, so I hope this situation could
improve in future (it is reverted for 4.9 but I think it will come back
after the release in March).

(I am still not sure how this will be rolled out, maybe by switching
some software back to 32 bit to reduce the load on the pointer length
lookup tables.)

> The rise of the Curry-Howard correspondence (programs and proofs are
> the same!) resulted in several programming languages whose type
> systems are so expressive that it can carry mathematical proofs (of
> intuitionistic logics) around. The common hello-world example is a
> list carrying (at compile time!) its length around, and thus being
> able to verify that append called on a list of length n and a list of
> length m returns a list of length n + m (and that reverse returns a
> list of the same length).
> 
> While it is true, that these examples and languages are used mainly in
> computer science at the moment, I hope to see more people attracted to
> these kind of languages, writing libraries and applications.
> 
> I can recommend several languages:
>  - coq (http://coq.inria.fr) [the tutorial software foundations
> http://www.cis.upenn.edu/~bcpierce/sf/ ]
>  - agda (http://wiki.portal.chalmers.se/agda/pmwiki.php)
>  - idris (http://www.idris-lang.org/)

Maybe you can comment a bit on the code extraction process into compilable
languages.

There seems to be a semantic differences between the proofable
language and the language the extraction process targets in e.g. array
handling(e.g.  ocaml code) or just overflow handling in integers.
I guess Idris does not have this problem?

I always wondered if ats-lang would be the most suitable language for
writing more typesafe code?

Greetings,

  Hannes

