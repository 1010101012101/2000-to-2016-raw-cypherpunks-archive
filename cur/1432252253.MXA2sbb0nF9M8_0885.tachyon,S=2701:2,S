From owner-cypherpunks@lne.com  Thu Nov 13 19:25:45 2003
Return-Path: <owner-cypherpunks@lne.com>
Received: from slack.lne.com (gw.lne.com [209.157.136.81])
	by positron.jfet.org (8.11.6p3/8.11.6-03-31-03) with ESMTP id hAE0Phq01787
	for <rsw@jfet.org>; Thu, 13 Nov 2003 19:25:43 -0500
Received: from slack.lne.com (slack.lne.com [127.0.0.1])
	by slack.lne.com (8.12.10/8.12.10) with ESMTP id hAE08ntQ028412
	(version=TLSv1/SSLv3 cipher=EDH-DSS-DES-CBC3-SHA bits=168 verify=NO)
	for <cypherpunks-goingout345@slack.lne.com>; Thu, 13 Nov 2003 16:08:49 -0800
Received: (from majordom@localhost)
	by slack.lne.com (8.12.10/8.12.10/Submit) id hAE08n3d028411
	for cypherpunks-goingout345; Thu, 13 Nov 2003 16:08:49 -0800
X-Authentication-Warning: slack.lne.com: majordom set sender to owner-cypherpunks@lne.com using -f
Message-Id: <5.2.0.9.0.20031113182352.04670660@pop.ix.netcom.com>
X-Sender: kelsey.j@pop.ix.netcom.com
X-Mailer: QUALCOMM Windows Eudora Version 5.2.0.9
Date: Thu, 13 Nov 2003 18:41:16 -0500
To: "James A. Donald" <jamesd@echeque.com>, cypherpunks@lne.com
From: John Kelsey <kelsey.j@ix.netcom.com>
Subject: Re: Deniable data storage
In-Reply-To: <3FA94872.10325.DEE3A0@localhost>
References: <20030325092528.A22947@cluebot.com>
  <3E7F8732.24885.D5EF3A@localhost>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
Sender: owner-cypherpunks@lne.com
Precedence: bulk
X-Loop: cypherpunks@lne.com
Status: O
Content-Length: 1223
Lines: 23

At 06:58 PM 11/5/03 -0800, James A. Donald wrote:
>I want to store information deniably.
...
>This would contain various items of information that one could
>extract by supplyin a secret, symmetric, key.   A random key would
>extract a block of gibberish of random length   There would be no
>indication as to how many bits of meaningful data were stored in the
>block, though obviously they would have to add up to less than the
>size of the block.

I believe one of Ross Anderson's students did something like this a few 
years ago, basically using error-correcting codes with a lot of 
redundancy.  The basic idea is that you use some kind of massive error 
correction and use a different sequence of bits with each key, so that 
you're very unlikely to have enough of your message bits clobbered by 
another message to make it impossible to decode correctly.  (It seems like 
there'd be a problem with information leakage about number of channels 
here, if you had a message encoded in that block of bits, because you would 
know when you decoded it how often you'd had bits flipped, but maybe they 
resolved that somehow.)

--John Kelsey, kelsey.j@ix.netcom.com
PGP: FA48 3237 9AD5 30AC EEDD  BBC8 2A80 6948 4CAA F259

