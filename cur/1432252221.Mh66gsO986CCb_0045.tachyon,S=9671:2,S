From rswatjfet.org+caf_=rsw=jfet.org@gmail.com  Sun Aug 17 18:47:01 2014
Return-Path: <rswatjfet.org+caf_=rsw=jfet.org@gmail.com>
Received: from mail-pd0-f171.google.com (mail-pd0-f171.google.com [209.85.192.171])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s7HMkxPe003134
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <rsw@jfet.org>; Sun, 17 Aug 2014 18:47:01 -0400
Received: by mail-pd0-f171.google.com with SMTP id z10so6338167pdj.30
        for <rsw@jfet.org>; Sun, 17 Aug 2014 15:45:23 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20130820;
        h=x-original-authentication-results:delivered-to:date:to:subject
         :message-id:references:mime-version:content-type:content-disposition
         :in-reply-to:user-agent:cc:precedence:list-id:list-unsubscribe
         :list-archive:list-post:list-help:list-subscribe:errors-to:sender
         :from;
        bh=EH6bHmjv62FDSU5U3Te10CFJYXM2UmrzbuPSvUS5fD8=;
        b=OB0vqkoPefUUHG9X73vzfkmXx0eJhLSp5VIpEQcVz3dQQeiASjyT2e7QYKzPF4vQFh
         rlJL5hcAH4oAMKOIiTyAxqRNA6ic/EAqswL7pWDshRv+uYZhjkZMzYGWhzClUgSMBqSE
         cT1sHYVrzeYzAsk8A6ZUG9jK3KUgUqWDQCOCClyyRDn+rih1l9Syro1pfJDDb9StezD9
         sTOPAg7Qy+OLlV0qAumSGJ4/1pD+AS8TIkF4DC5aVJctPXOb3+E6MUH+WWm0/3HsI6Oe
         TIHyQIHtcXnhH5CnJshtxsKuMeQ77UmT8rxK4RicwtDlNMONKv/PspoNVs2ftwU16/qJ
         vyqA==
X-Original-Authentication-Results: mx.google.com;       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net
X-Received: by 10.69.17.230 with SMTP id gh6mr30592206pbd.0.1408315522484;
        Sun, 17 Aug 2014 15:45:22 -0700 (PDT)
X-Forwarded-To: rsw@jfet.org
X-Forwarded-For: rswatjfet.org@gmail.com rsw@jfet.org
Delivered-To: rswatjfet.org@gmail.com
Received: by 10.70.3.197 with SMTP id e5csp92987pde;
        Sun, 17 Aug 2014 15:45:21 -0700 (PDT)
X-Received: by 10.68.220.71 with SMTP id pu7mr3864108pbc.22.1408315521531;
        Sun, 17 Aug 2014 15:45:21 -0700 (PDT)
Received: from localhost (antiproton.jfet.org. [209.141.47.85])
        by mx.google.com with ESMTPS id ua4si18863978pac.100.2014.08.17.15.45.20
        for <rswATjfet.org@gmail.com>
        (version=TLSv1.2 cipher=RC4-SHA bits=128/128);
        Sun, 17 Aug 2014 15:45:21 -0700 (PDT)
Received-SPF: neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) client-ip=209.141.47.85;
Authentication-Results: mx.google.com;
       spf=neutral (google.com: 209.141.47.85 is neither permitted nor denied by domain of rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net) smtp.mail=rsw+cypherpunks-bounces=cpunks.org@gloop.phonon.net
Received: from antiproton.jfet.org (localhost.localdomain [127.0.0.1])
	by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s7HMkOJV003116;
	Sun, 17 Aug 2014 18:46:30 -0400
Received: from straum.hexapodia.org (straum.hexapodia.org [192.235.78.53])
 by antiproton.jfet.org (8.14.4/8.14.4/Debian-4.1) with ESMTP id s7HMkL3Y003112
 (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT)
 for <cypherpunks@cpunks.org>; Sun, 17 Aug 2014 18:46:23 -0400
Received: by straum.hexapodia.org (Postfix, from userid 22448)
 id 17975422D; Sun, 17 Aug 2014 15:44:51 -0700 (PDT)
Date: Sun, 17 Aug 2014 15:44:51 -0700
To: Eric Mill <eric@konklone.com>
Subject: Re: How does the Hacking Team network malware work? How bad is it?
Message-ID: <20140817224450.GH32086@hexapodia.org>
References: <CANBOYLX5fqC2Pd3G5LPrD7AnyoW5WhYY3965cfyw=s=mN5+cWA@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <CANBOYLX5fqC2Pd3G5LPrD7AnyoW5WhYY3965cfyw=s=mN5+cWA@mail.gmail.com>
X-Old-GPG-Fingerprint: 1914 0645 FD53 C18E EEEF C402 4A69 B1F3 68D2 A63F
X-GPG-Fingerprint: A5FC 6141 F76D B6B1 C81F  0FB7 AFA0 A45F ED3D 116D
X-GPG-Key-URL: http://web.hexapodia.org/~adi/gpg.txt
X-Domestic-Surveillance: money launder bomb tax evasion
User-Agent: Mutt/1.5.21 (2010-09-15)
Cc: cpunks <cypherpunks@cpunks.org>
X-BeenThere: cypherpunks@cpunks.org
X-Mailman-Version: 2.1.16
Precedence: list
List-Id: The Cypherpunks Mailing List <cypherpunks.cpunks.org>
List-Unsubscribe: <https://cpunks.org/mailman/options/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=unsubscribe>
List-Archive: <http://cpunks.org/pipermail/cypherpunks/>
List-Post: <mailto:cypherpunks@cpunks.org>
List-Help: <mailto:cypherpunks-request@cpunks.org?subject=help>
List-Subscribe: <https://cpunks.org/mailman/listinfo/cypherpunks>,
 <mailto:cypherpunks-request@cpunks.org?subject=subscribe>
Errors-To: cypherpunks-bounces@cpunks.org
Sender: "cypherpunks" <cypherpunks-bounces@cpunks.org>
From: Andy Isaacson <adi@hexapodia.org>
X-Gspam-Loop: antiproton.jfet.org
Status: O
Content-Length: 4694
Lines: 91

On Sun, Aug 17, 2014 at 05:24:38PM -0400, Eric Mill wrote:
> I've read the Intercept's writeup[1], and read through Citizen Lab's
> writeup[2]. I'm having trouble understanding the attack surface, and how
> widely applicable the vulnerability is.
> 
> Are MS and Google targeted because of their ubiquity, or is there also
> something (besides not using HTTPS) that they did to make their services
> vulnerable?

As an attacker, you want your attack to be targeted to a single user.
(It's not the end of the world if you QUANTUMINSERT a few extra
machines, but byspray increases the likelihood of a sample escaping to a
non-colluding AV vendor [if there are any of those] or a curious
researcher.)

So you want to target a HTTP session that you have high assurance
belongs to the targeted user.

For targets who have a Google account, Google has helpfully assigned
cookies which associate the user's account with the HTTP stream.  These
cookies are initially established over https, but are linked to YouTube
cookies for unencrypted http so that YouTube can provide valuable
advertising services at lower cost than serving over HTTPS.

> How can there be a remote code vulnerability so low in the stack that it
> can be injected at the packet level, but high enough that TLS encryption
> foils the attack?

The general technique is flexible to any targeted vulnerable network
software, but to make my description more concrete, the Flash one is
very understandable.  The Flash plugin has hundreds of unpatched RCE
vulns.  The exploit for these vulns is generally a sequence of a few
hundred ActionScript bytecode instructions.  The YouTube webpage serves
a very standardized Flash .flv file which is nearly identical for every
video.  So as the QUANTUMINSERT vendor, you code up a module which takes
the .flv off the wire from the server, patches it to include the
exploit, and puts a new .flv on the wire to the user.  Then you wire
that up to an inline capture appliance which uses an FPGA running at
10GigE wire speed to match HTTP responses that contain the desired
cookie, and just wait for your target to desire a fuzzy kitten video.

I don't know any details of any fielded systems, so the following is
just my description of a sensible way to build this product.  (I have
some experience building products with these technologies.)

The injection is extremely low level, at the Ethernet frame processing
layer.  The FPGA has the responsibility of running at line rate and
forwarding all frames except those belonging to a stream marked as a
match.

When the regex engine running in the FPGA sees the Cookie: header of the
target, it notes the IP-4-tuple (srcIP, srcPort, dstIP, dstPort) as an
intercepted stream, and forwards those packets to a higher-level
software layer.  Every other stream on the network keeps running as
normal.

At the higher layer, QUANTUMINSERT wants to keep youtube.com happy, so
it forges the ACK packets that the browser would have been sending.
QUANTUMINSERT also can see what packets the browser has received so far,
and the data that youtube.com was sending.  QUANTUMINSERT then edits the
FLV, on the fly, so that it contains the exploit code *and* the fluffy
kitten video.  The resulting FLV is the same size or maybe a few hundred
bytes longer, but that's peanuts compared to the size of the MPEG video
stream, so nobody notices.

>From the point of view of youtube.com, the unmolested flv was served.
>From the point of view of the browser, youtube.com sent it a flv to run,
it just arrived 150 milliseconds later than expected (due to the
QUANTUMINSERT flv editing software).  From the point of view of the
user, the fluffy cat video pranced as expected.  From the point of view
of the Mukhabarat, they've got a backdoor into the PC of another
dangerous twitter user.

(OK the Bahraini Mukhabarat don't use QUANTUMINSERT, they are a Hacking
Team customer.  Same difference.)

> Does this affect Windows only? Through particular browsers?

Any specific attack is platform+browser dependent, but the general
technique works everywhere where you have 0day RCE vulns.  (ie
everywhere.)  Browser and OS vulnerability mitigation techniques like
ASLR and (especially) sandboxing highly vulnerable components like Flash
can help enormously by raising the complexity of exploits, by reducing
the supply of known+weaponized 0day, and by requiring more complicated
multistage exploits.

If you haven't read it already, the WaPo spy story is *incredible*:

http://www.washingtonpost.com/world/national-security/spyware-tools-allow-buyers-to-slip-malicious-code-into-youtube-videos-microsoft-pages/2014/08/15/31c5696c-249c-11e4-8593-da634b334390_story.html

-andy

